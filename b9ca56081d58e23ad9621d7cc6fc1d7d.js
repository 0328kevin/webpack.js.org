!function(n,s){if("object"==typeof exports&&"object"==typeof module)module.exports=s();else if("function"==typeof define&&define.amd)define([],s);else{var a=s();for(var t in a)("object"==typeof exports?exports:n)[t]=a[t]}}("undefined"!=typeof self?self:this,function(){return function(n){function s(t){if(a[t])return a[t].exports;var e=a[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,s),e.l=!0,e.exports}var a={};return s.m=n,s.c=a,s.d=function(n,a,t){s.o(n,a)||Object.defineProperty(n,a,{configurable:!1,enumerable:!0,get:t})},s.n=function(n){var a=n&&n.__esModule?function(){return n.default}:function(){return n};return s.d(a,"a",a),a},s.o=function(n,s){return Object.prototype.hasOwnProperty.call(n,s)},s.p="/",s(s.s=49)}([function(n,s,a){(function(s){!function(s,t){n.exports=t(a(13),a(17))}(0,function(n,a){function t(){return null}function e(n){var s=n.nodeName,a=n.attributes;n.attributes={},s.defaultProps&&y(n.attributes,s.defaultProps),a&&y(n.attributes,a)}function o(n,s){var a,t,e;if(s){for(e in s)if(a=H.test(e))break;if(a){t=n.attributes={};for(e in s)s.hasOwnProperty(e)&&(t[H.test(e)?e.replace(/([A-Z0-9])/,"-$1").toLowerCase():e]=s[e])}}}function p(n,s,t){var e=s&&s._preactCompatRendered&&s._preactCompatRendered.base;e&&e.parentNode!==s&&(e=null),!e&&s&&(e=s.firstElementChild);for(var o=s.childNodes.length;o--;)s.childNodes[o]!==e&&s.removeChild(s.childNodes[o]);var p=a.render(n,s,e);return s&&(s._preactCompatRendered=p&&(p._component||{base:p})),"function"==typeof t&&t(),p&&p._component||p}function c(n,s,t,e){var o=a.h(V,{context:n.context},s),c=p(o,t),l=c._component||c.base;return e&&e.call(l,c),l}function l(n){var s=n._preactCompatRendered&&n._preactCompatRendered.base;return!(!s||s.parentNode!==n||(a.render(a.h(t),n,s),0))}function i(n){return h.bind(null,n)}function u(n,s){for(var a=s||0;a<n.length;a++){var t=n[a];Array.isArray(t)?u(t):t&&"object"==typeof t&&!m(t)&&(t.props&&t.type||t.attributes&&t.nodeName||t.children)&&(n[a]=h(t.type||t.nodeName,t.props||t.attributes,t.children))}}function r(n){return"function"==typeof n&&!(n.prototype&&n.prototype.render)}function d(n){return _({displayName:n.displayName||n.name,render:function(){return n(this.props,this.context)}})}function k(n){var s=n[z];return s?!0===s?n:s:(s=d(n),Object.defineProperty(s,z,{configurable:!0,value:!0}),s.displayName=n.displayName,s.propTypes=n.propTypes,s.defaultProps=n.defaultProps,Object.defineProperty(n,z,{configurable:!0,value:s}),s)}function h(){for(var n=[],s=arguments.length;s--;)n[s]=arguments[s];return u(n,2),b(a.h.apply(void 0,n))}function b(n){n.preactCompatNormalized=!0,w(n),r(n.nodeName)&&(n.nodeName=k(n.nodeName));var s=n.attributes.ref,a=s&&typeof s;return!K||"string"!==a&&"number"!==a||(n.attributes.ref=g(s,K)),f(n),n}function v(n,s){for(var t=[],e=arguments.length-2;e-- >0;)t[e]=arguments[e+2];if(!m(n))return n;var o=n.attributes||n.props,p=a.h(n.nodeName||n.type,o,n.children||o&&o.children),c=[p,s];return t&&t.length?c.push(t):s&&s.children&&c.push(s.children),b(a.cloneElement.apply(void 0,c))}function m(n){return n&&(n instanceof U||n.$$typeof===I)}function g(n,s){return s._refProxies[n]||(s._refProxies[n]=function(a){s&&s.refs&&(s.refs[n]=a,null===a&&(delete s._refProxies[n],s=null))})}function f(n){var s=n.nodeName,a=n.attributes;if(a&&"string"==typeof s){var t={};for(var e in a)t[e.toLowerCase()]=e;if(t.ondoubleclick&&(a.ondblclick=a[t.ondoubleclick],delete a[t.ondoubleclick]),t.onchange&&("textarea"===s||"input"===s.toLowerCase()&&!/^fil|che|rad/i.test(a.type))){var o=t.oninput||"oninput";a[o]||(a[o]=T([a[o],a[t.onchange]]),delete a[t.onchange])}}}function w(n){var s=n.attributes||(n.attributes={});Z.enumerable="className"in s,s.className&&(s.class=s.className),Object.defineProperty(s,"className",Z)}function y(n,s){for(var a=arguments,t=1,e=void 0;t<arguments.length;t++)if(e=a[t])for(var o in e)e.hasOwnProperty(o)&&(n[o]=e[o]);return n}function x(n,s){for(var a in n)if(!(a in s))return!0;for(var t in s)if(n[t]!==s[t])return!0;return!1}function j(n){return n&&n.base||n}function q(){}function _(n){function s(n,s){P(this),A.call(this,n,s,B),M.call(this,n,s)}return n=y({constructor:s},n),n.mixins&&C(n,S(n.mixins)),n.statics&&y(s,n.statics),n.propTypes&&(s.propTypes=n.propTypes),n.defaultProps&&(s.defaultProps=n.defaultProps),n.getDefaultProps&&(s.defaultProps=n.getDefaultProps()),q.prototype=A.prototype,s.prototype=y(new q,n),s.displayName=n.displayName||"Component",s}function S(n){for(var s={},a=0;a<n.length;a++){var t=n[a];for(var e in t)t.hasOwnProperty(e)&&"function"==typeof t[e]&&(s[e]||(s[e]=[])).push(t[e])}return s}function C(n,s){for(var a in s)s.hasOwnProperty(a)&&(n[a]=T(s[a].concat(n[a]||G),"getDefaultProps"===a||"getInitialState"===a||"getChildContext"===a))}function P(n){for(var s in n){var a=n[s];"function"!=typeof a||a.__bound||W.hasOwnProperty(s)||((n[s]=a.bind(n)).__bound=!0)}}function E(n,s,a){if("string"==typeof s&&(s=n.constructor.prototype[s]),"function"==typeof s)return s.apply(n,a)}function T(n,s){return function(){for(var a,t=arguments,e=this,o=0;o<n.length;o++){var p=E(e,n[o],t);if(s&&null!=p){a||(a={});for(var c in p)p.hasOwnProperty(c)&&(a[c]=p[c])}else void 0!==p&&(a=p)}return a}}function M(n,s){D.call(this,n,s),this.componentWillReceiveProps=T([D,this.componentWillReceiveProps||"componentWillReceiveProps"]),this.render=T([D,R,this.render||"render",N])}function D(s,a){if(s){var t=s.children;if(t&&Array.isArray(t)&&1===t.length&&("string"==typeof t[0]||"function"==typeof t[0]||t[0]instanceof U)&&(s.children=t[0],s.children&&"object"==typeof s.children&&(s.children.length=1,s.children[0]=s.children)),J){var e="function"==typeof this?this:this.constructor,o=this.propTypes||e.propTypes,p=this.displayName||e.name;o&&n.checkPropTypes(o,s,"prop",p)}}}function R(n){K=this}function N(){K===this&&(K=null)}function A(n,s,t){a.Component.call(this,n,s),this.state=this.getInitialState?this.getInitialState():{},this.refs={},this._refProxies={},t!==B&&M.call(this,n,s)}function L(n,s){A.call(this,n,s)}n="default"in n?n.default:n;var O="a abbr address area article aside audio b base bdi bdo big blockquote body br button canvas caption cite code col colgroup data datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup hr html i iframe img input ins kbd keygen label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td textarea tfoot th thead time title tr track u ul var video wbr circle clipPath defs ellipse g image line linearGradient mask path pattern polygon polyline radialGradient rect stop svg text tspan".split(" "),I="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,z="undefined"!=typeof Symbol?Symbol.for("__preactCompatWrapper"):"__preactCompatWrapper",W={constructor:1,render:1,shouldComponentUpdate:1,componentWillReceiveProps:1,componentWillUpdate:1,componentDidUpdate:1,componentWillMount:1,componentDidMount:1,componentWillUnmount:1,componentDidUnmount:1},H=/^(?:accent|alignment|arabic|baseline|cap|clip|color|fill|flood|font|glyph|horiz|marker|overline|paint|stop|strikethrough|stroke|text|underline|unicode|units|v|vector|vert|word|writing|x)[A-Z]/,B={},J=void 0===s||!s.env||"production"!==s.env.NODE_ENV,U=a.h("a",null).constructor;U.prototype.$$typeof=I,U.prototype.preactCompatUpgraded=!1,U.prototype.preactCompatNormalized=!1,Object.defineProperty(U.prototype,"type",{get:function(){return this.nodeName},set:function(n){this.nodeName=n},configurable:!0}),Object.defineProperty(U.prototype,"props",{get:function(){return this.attributes},set:function(n){this.attributes=n},configurable:!0});var F=a.options.event;a.options.event=function(n){return F&&(n=F(n)),n.persist=Object,n.nativeEvent=n,n};var $=a.options.vnode;a.options.vnode=function(n){if(!n.preactCompatUpgraded){n.preactCompatUpgraded=!0;var s=n.nodeName,a=n.attributes=y({},n.attributes);"function"==typeof s?(!0===s[z]||s.prototype&&"isReactComponent"in s.prototype)&&(n.children&&""===String(n.children)&&(n.children=void 0),n.children&&(a.children=n.children),n.preactCompatNormalized||b(n),e(n)):(n.children&&""===String(n.children)&&(n.children=void 0),n.children&&(a.children=n.children),a.defaultValue&&(a.value||0===a.value||(a.value=a.defaultValue),delete a.defaultValue),o(n,a))}$&&$(n)};var V=function(){};V.prototype.getChildContext=function(){return this.props.context},V.prototype.render=function(n){return n.children[0]};for(var K,G=[],Y={map:function(n,s,a){return null==n?null:(n=Y.toArray(n),a&&a!==n&&(s=s.bind(a)),n.map(s))},forEach:function(n,s,a){if(null==n)return null;n=Y.toArray(n),a&&a!==n&&(s=s.bind(a)),n.forEach(s)},count:function(n){return n&&n.length||0},only:function(n){if(n=Y.toArray(n),1!==n.length)throw new Error("Children.only() expects only one child.");return n[0]},toArray:function(n){return null==n?[]:G.concat(n)}},Q={},X=O.length;X--;)Q[O[X]]=i(O[X]);var Z={configurable:!0,get:function(){return this.class},set:function(n){this.class=n}};return y(A.prototype=new a.Component,{constructor:A,isReactComponent:{},replaceState:function(n,s){var a=this;this.setState(n,s);for(var t in a.state)t in n||delete a.state[t]},getDOMNode:function(){return this.base},isMounted:function(){return!!this.base}}),q.prototype=A.prototype,L.prototype=new q,L.prototype.isPureReactComponent=!0,L.prototype.shouldComponentUpdate=function(n,s){return x(this.props,n)||x(this.state,s)},{version:"15.1.0",DOM:Q,PropTypes:n,Children:Y,render:p,createClass:_,createFactory:i,createElement:h,cloneElement:v,isValidElement:m,findDOMNode:j,unmountComponentAtNode:l,Component:A,PureComponent:L,unstable_renderSubtreeIntoContainer:c,__spread:y}})}).call(s,a(1))},function(n,s){function a(){throw new Error("setTimeout has not been defined")}function t(){throw new Error("clearTimeout has not been defined")}function e(n){if(u===setTimeout)return setTimeout(n,0);if((u===a||!u)&&setTimeout)return u=setTimeout,setTimeout(n,0);try{return u(n,0)}catch(s){try{return u.call(null,n,0)}catch(s){return u.call(this,n,0)}}}function o(n){if(r===clearTimeout)return clearTimeout(n);if((r===t||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(n);try{return r(n)}catch(s){try{return r.call(null,n)}catch(s){return r.call(this,n)}}}function p(){b&&k&&(b=!1,k.length?h=k.concat(h):v=-1,h.length&&c())}function c(){if(!b){var n=e(p);b=!0;for(var s=h.length;s;){for(k=h,h=[];++v<s;)k&&k[v].run();v=-1,s=h.length}k=null,b=!1,o(n)}}function l(n,s){this.fun=n,this.array=s}function i(){}var u,r,d=n.exports={};!function(){try{u="function"==typeof setTimeout?setTimeout:a}catch(n){u=a}try{r="function"==typeof clearTimeout?clearTimeout:t}catch(n){r=t}}();var k,h=[],b=!1,v=-1;d.nextTick=function(n){var s=new Array(arguments.length-1);if(arguments.length>1)for(var a=1;a<arguments.length;a++)s[a-1]=arguments[a];h.push(new l(n,s)),1!==h.length||b||e(c)},l.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=i,d.addListener=i,d.once=i,d.off=i,d.removeListener=i,d.removeAllListeners=i,d.emit=i,d.binding=function(n){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(n){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},function(n,s,a){"use strict";function t(n){return function(){return n}}var e=function(){};e.thatReturns=t,e.thatReturnsFalse=t(!1),e.thatReturnsTrue=t(!0),e.thatReturnsNull=t(null),e.thatReturnsThis=function(){return this},e.thatReturnsArgument=function(n){return n},n.exports=e},function(n,s,a){"use strict";(function(s){function a(n,s,a,e,o,p,c,l){if(t(s),!n){var i;if(void 0===s)i=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[a,e,o,p,c,l],r=0;i=new Error(s.replace(/%s/g,function(){return u[r++]})),i.name="Invariant Violation"}throw i.framesToPop=1,i}}var t=function(n){};"production"!==s.env.NODE_ENV&&(t=function(n){if(void 0===n)throw new Error("invariant requires an error message argument")}),n.exports=a}).call(s,a(1))},function(n,s,a){"use strict";n.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(n,s,a){"use strict";function t(n){return n&&n.__esModule?n:{default:n}}function e(n,s){var a={};for(var t in n)s.indexOf(t)>=0||Object.prototype.hasOwnProperty.call(n,t)&&(a[t]=n[t]);return a}Object.defineProperty(s,"__esModule",{value:!0});var o=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(n[t]=a[t])}return n},p=a(0),c=t(p),l=a(20),i=t(l);s.default=function(n){var s=n.to,a=e(n,["to"]);return(0,i.default)(s,"http")||(0,i.default)(s,"//")?c.default.createElement("a",o({href:s,target:"_blank"},a)):c.default.createElement("a",o({href:s},a))}},function(n,s,a){var t=a(22),e=t.Symbol;n.exports=e},function(n,s,a){"use strict";(function(s){var t=a(2),e=t;"production"!==s.env.NODE_ENV&&function(){var n=function(n){for(var s=arguments.length,a=Array(s>1?s-1:0),t=1;t<s;t++)a[t-1]=arguments[t];var e=0,o="Warning: "+n.replace(/%s/g,function(){return a[e++]});"undefined"!=typeof console&&console.error(o);try{throw new Error(o)}catch(n){}};e=function(s,a){if(void 0===a)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==a.indexOf("Failed Composite propType: ")&&!s){for(var t=arguments.length,e=Array(t>2?t-2:0),o=2;o<t;o++)e[o-2]=arguments[o];n.apply(void 0,[a].concat(e))}}}(),n.exports=e}).call(s,a(1))},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var t=a(0),e=function(n){return n&&n.__esModule?n:{default:n}}(t);s.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},s=n.className,a=void 0===s?"":s;return e.default.createElement("div",{className:"container "+a},n.children)}},function(n,s,a){function t(n){if("string"==typeof n)return n;if(p(n))return o(n,t)+"";if(c(n))return u?u.call(n):"";var s=n+"";return"0"==s&&1/n==-l?"-0":s}var e=a(6),o=a(24),p=a(25),c=a(11),l=1/0,i=e?e.prototype:void 0,u=i?i.toString:void 0;n.exports=t},function(n,s){var a;a=function(){return this}();try{a=a||Function("return this")()||(0,eval)("this")}catch(n){"object"==typeof window&&(a=window)}n.exports=a},function(n,s,a){function t(n){return"symbol"==typeof n||o(n)&&e(n)==p}var e=a(26),o=a(29),p="[object Symbol]";n.exports=t},function(n,s,a){"use strict";function t(n){return n&&n.__esModule?n:{default:n}}function e(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function p(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var c=function(){function n(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(s,a,t){return a&&n(s.prototype,a),t&&n(s,t),s}}(),l=a(0),i=t(l),u=a(8),r=t(u),d=a(18),k=t(d),h=!1!==(0,k.default)(),b=function(n){function s(){return e(this,s),o(this,(s.__proto__||Object.getPrototypeOf(s)).apply(this,arguments))}return p(s,n),c(s,[{key:"render",value:function(){var n=this._dismissed?"notification-bar--dismissed":"";return i.default.createElement("div",{className:"notification-bar "+n},i.default.createElement(r.default,{className:"notification-bar__inner"},i.default.createElement("p",null,"赞助 webpack，同时从",i.default.createElement("a",{href:"https://webpack.threadless.com"},"官方商店"),"购买衣服"," ","或者在",i.default.createElement("a",{href:"http://www.unixstickers.com/tag/webpack"},"这里"),"购买贴纸！所有收益将转到我们的"," ",i.default.createElement("a",{href:"https://opencollective.com/webpack"},"open collective"),"！"),h?i.default.createElement("button",{className:"notification-bar__close icon-cross",onClick:this._close.bind(this)}):null))}},{key:"_close",value:function(n){h&&localStorage.setItem("notification-dismissed","2"),this.forceUpdate()}},{key:"_dismissed",get:function(){return!!h&&"2"===localStorage.getItem("notification-dismissed")}}]),s}(i.default.Component);s.default=b},function(n,s,a){(function(s){if("production"!==s.env.NODE_ENV){var t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,e=function(n){return"object"==typeof n&&null!==n&&n.$$typeof===t};n.exports=a(14)(e,!0)}else n.exports=a(16)()}).call(s,a(1))},function(n,s,a){"use strict";(function(s){var t=a(2),e=a(3),o=a(7),p=a(4),c=a(15);n.exports=function(n,a){function l(n){var s=n&&(_&&n[_]||n[S]);if("function"==typeof s)return s}function i(n,s){return n===s?0!==n||1/n==1/s:n!==n&&s!==s}function u(n){this.message=n,this.stack=""}function r(n){function t(t,i,r,d,k,h,b){if(d=d||C,h=h||r,b!==p)if(a)e(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");else if("production"!==s.env.NODE_ENV&&"undefined"!=typeof console){var v=d+":"+r;!c[v]&&l<3&&(o(!1,"You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",h,d),c[v]=!0,l++)}return null==i[r]?t?new u(null===i[r]?"The "+k+" `"+h+"` is marked as required in `"+d+"`, but its value is `null`.":"The "+k+" `"+h+"` is marked as required in `"+d+"`, but its value is `undefined`."):null:n(i,r,d,k,h)}if("production"!==s.env.NODE_ENV)var c={},l=0;var i=t.bind(null,!1);return i.isRequired=t.bind(null,!0),i}function d(n){function s(s,a,t,e,o,p){var c=s[a];if(y(c)!==n)return new u("Invalid "+e+" `"+o+"` of type `"+x(c)+"` supplied to `"+t+"`, expected `"+n+"`.");return null}return r(s)}function k(n){function s(s,a,t,e,o){if("function"!=typeof n)return new u("Property `"+o+"` of component `"+t+"` has invalid PropType notation inside arrayOf.");var c=s[a];if(!Array.isArray(c)){return new u("Invalid "+e+" `"+o+"` of type `"+y(c)+"` supplied to `"+t+"`, expected an array.")}for(var l=0;l<c.length;l++){var i=n(c,l,t,e,o+"["+l+"]",p);if(i instanceof Error)return i}return null}return r(s)}function h(n){function s(s,a,t,e,o){if(!(s[a]instanceof n)){var p=n.name||C;return new u("Invalid "+e+" `"+o+"` of type `"+q(s[a])+"` supplied to `"+t+"`, expected instance of `"+p+"`.")}return null}return r(s)}function b(n){function a(s,a,t,e,o){for(var p=s[a],c=0;c<n.length;c++)if(i(p,n[c]))return null;return new u("Invalid "+e+" `"+o+"` of value `"+p+"` supplied to `"+t+"`, expected one of "+JSON.stringify(n)+".")}return Array.isArray(n)?r(a):("production"!==s.env.NODE_ENV&&o(!1,"Invalid argument supplied to oneOf, expected an instance of array."),t.thatReturnsNull)}function v(n){function s(s,a,t,e,o){if("function"!=typeof n)return new u("Property `"+o+"` of component `"+t+"` has invalid PropType notation inside objectOf.");var c=s[a],l=y(c);if("object"!==l)return new u("Invalid "+e+" `"+o+"` of type `"+l+"` supplied to `"+t+"`, expected an object.");for(var i in c)if(c.hasOwnProperty(i)){var r=n(c,i,t,e,o+"."+i,p);if(r instanceof Error)return r}return null}return r(s)}function m(n){function a(s,a,t,e,o){for(var c=0;c<n.length;c++){if(null==(0,n[c])(s,a,t,e,o,p))return null}return new u("Invalid "+e+" `"+o+"` supplied to `"+t+"`.")}if(!Array.isArray(n))return"production"!==s.env.NODE_ENV&&o(!1,"Invalid argument supplied to oneOfType, expected an instance of array."),t.thatReturnsNull;for(var e=0;e<n.length;e++){var c=n[e];if("function"!=typeof c)return o(!1,"Invalid argument supplid to oneOfType. Expected an array of check functions, but received %s at index %s.",j(c),e),t.thatReturnsNull}return r(a)}function g(n){function s(s,a,t,e,o){var c=s[a],l=y(c);if("object"!==l)return new u("Invalid "+e+" `"+o+"` of type `"+l+"` supplied to `"+t+"`, expected `object`.");for(var i in n){var r=n[i];if(r){var d=r(c,i,t,e,o+"."+i,p);if(d)return d}}return null}return r(s)}function f(s){switch(typeof s){case"number":case"string":case"undefined":return!0;case"boolean":return!s;case"object":if(Array.isArray(s))return s.every(f);if(null===s||n(s))return!0;var a=l(s);if(!a)return!1;var t,e=a.call(s);if(a!==s.entries){for(;!(t=e.next()).done;)if(!f(t.value))return!1}else for(;!(t=e.next()).done;){var o=t.value;if(o&&!f(o[1]))return!1}return!0;default:return!1}}function w(n,s){return"symbol"===n||("Symbol"===s["@@toStringTag"]||"function"==typeof Symbol&&s instanceof Symbol)}function y(n){var s=typeof n;return Array.isArray(n)?"array":n instanceof RegExp?"object":w(s,n)?"symbol":s}function x(n){if(void 0===n||null===n)return""+n;var s=y(n);if("object"===s){if(n instanceof Date)return"date";if(n instanceof RegExp)return"regexp"}return s}function j(n){var s=x(n);switch(s){case"array":case"object":return"an "+s;case"boolean":case"date":case"regexp":return"a "+s;default:return s}}function q(n){return n.constructor&&n.constructor.name?n.constructor.name:C}var _="function"==typeof Symbol&&Symbol.iterator,S="@@iterator",C="<<anonymous>>",P={array:d("array"),bool:d("boolean"),func:d("function"),number:d("number"),object:d("object"),string:d("string"),symbol:d("symbol"),any:function(){return r(t.thatReturnsNull)}(),arrayOf:k,element:function(){function s(s,a,t,e,o){var p=s[a];if(!n(p)){return new u("Invalid "+e+" `"+o+"` of type `"+y(p)+"` supplied to `"+t+"`, expected a single ReactElement.")}return null}return r(s)}(),instanceOf:h,node:function(){function n(n,s,a,t,e){return f(n[s])?null:new u("Invalid "+t+" `"+e+"` supplied to `"+a+"`, expected a ReactNode.")}return r(n)}(),objectOf:v,oneOf:b,oneOfType:m,shape:g};return u.prototype=Error.prototype,P.checkPropTypes=c,P.PropTypes=P,P}}).call(s,a(1))},function(n,s,a){"use strict";(function(s){function t(n,a,t,l,i){if("production"!==s.env.NODE_ENV)for(var u in n)if(n.hasOwnProperty(u)){var r;try{e("function"==typeof n[u],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",l||"React class",t,u),r=n[u](a,u,l,t,null,p)}catch(n){r=n}if(o(!r||r instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",l||"React class",t,u,typeof r),r instanceof Error&&!(r.message in c)){c[r.message]=!0;var d=i?i():"";o(!1,"Failed %s type: %s%s",t,r.message,null!=d?d:"")}}}if("production"!==s.env.NODE_ENV)var e=a(3),o=a(7),p=a(4),c={};n.exports=t}).call(s,a(1))},function(n,s,a){"use strict";var t=a(2),e=a(3),o=a(4);n.exports=function(){function n(n,s,a,t,p,c){c!==o&&e(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function s(){return n}n.isRequired=n;var a={array:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:s,element:n,instanceOf:s,node:n,objectOf:s,oneOf:s,oneOfType:s,shape:s};return a.checkPropTypes=t,a.PropTypes=a,a}},function(n,s,a){"use strict";function t(){}function e(n,s){var a,e,o,p,c=A;for(p=arguments.length;p-- >2;)N.push(arguments[p]);for(s&&null!=s.children&&(N.length||N.push(s.children),delete s.children);N.length;)if((e=N.pop())&&void 0!==e.pop)for(p=e.length;p--;)N.push(e[p]);else"boolean"==typeof e&&(e=null),(o="function"!=typeof n)&&(null==e?e="":"number"==typeof e?e=String(e):"string"!=typeof e&&(o=!1)),o&&a?c[c.length-1]+=e:c===A?c=[e]:c.push(e),a=o;var l=new t;return l.nodeName=n,l.children=c,l.attributes=null==s?void 0:s,l.key=null==s?void 0:s.key,void 0!==R.vnode&&R.vnode(l),l}function o(n,s){for(var a in s)n[a]=s[a];return n}function p(n,s){return e(n.nodeName,o(o({},n.attributes),s),arguments.length>2?[].slice.call(arguments,2):n.children)}function c(n){!n._dirty&&(n._dirty=!0)&&1==I.push(n)&&(R.debounceRendering||L)(l)}function l(){var n,s=I;for(I=[];n=s.pop();)n._dirty&&P(n)}function i(n,s,a){return"string"==typeof s||"number"==typeof s?void 0!==n.splitText:"string"==typeof s.nodeName?!n._componentConstructor&&u(n,s.nodeName):a||n._componentConstructor===s.nodeName}function u(n,s){return n.normalizedNodeName===s||n.nodeName.toLowerCase()===s.toLowerCase()}function r(n){var s=o({},n.attributes);s.children=n.children;var a=n.nodeName.defaultProps;if(void 0!==a)for(var t in a)void 0===s[t]&&(s[t]=a[t]);return s}function d(n,s){var a=s?document.createElementNS("http://www.w3.org/2000/svg",n):document.createElement(n);return a.normalizedNodeName=n,a}function k(n){var s=n.parentNode;s&&s.removeChild(n)}function h(n,s,a,t,e){if("className"===s&&(s="class"),"key"===s);else if("ref"===s)a&&a(null),t&&t(n);else if("class"!==s||e)if("style"===s){if(t&&"string"!=typeof t&&"string"!=typeof a||(n.style.cssText=t||""),t&&"object"==typeof t){if("string"!=typeof a)for(var o in a)o in t||(n.style[o]="");for(var o in t)n.style[o]="number"==typeof t[o]&&!1===O.test(o)?t[o]+"px":t[o]}}else if("dangerouslySetInnerHTML"===s)t&&(n.innerHTML=t.__html||"");else if("o"==s[0]&&"n"==s[1]){var p=s!==(s=s.replace(/Capture$/,""));s=s.toLowerCase().substring(2),t?a||n.addEventListener(s,v,p):n.removeEventListener(s,v,p),(n._listeners||(n._listeners={}))[s]=t}else if("list"!==s&&"type"!==s&&!e&&s in n)b(n,s,null==t?"":t),null!=t&&!1!==t||n.removeAttribute(s);else{var c=e&&s!==(s=s.replace(/^xlink\:?/,""));null==t||!1===t?c?n.removeAttributeNS("http://www.w3.org/1999/xlink",s.toLowerCase()):n.removeAttribute(s):"function"!=typeof t&&(c?n.setAttributeNS("http://www.w3.org/1999/xlink",s.toLowerCase(),t):n.setAttribute(s,t))}else n.className=t||""}function b(n,s,a){try{n[s]=a}catch(n){}}function v(n){return this._listeners[n.type](R.event&&R.event(n)||n)}function m(){for(var n;n=z.pop();)R.afterMount&&R.afterMount(n),n.componentDidMount&&n.componentDidMount()}function g(n,s,a,t,e,o){W++||(H=null!=e&&void 0!==e.ownerSVGElement,B=null!=n&&!("__preactattr_"in n));var p=f(n,s,a,t,o);return e&&p.parentNode!==e&&e.appendChild(p),--W||(B=!1,o||m()),p}function f(n,s,a,t,e){var o=n,p=H;if(null!=s&&"boolean"!=typeof s||(s=""),"string"==typeof s||"number"==typeof s)return n&&void 0!==n.splitText&&n.parentNode&&(!n._component||e)?n.nodeValue!=s&&(n.nodeValue=s):(o=document.createTextNode(s),n&&(n.parentNode&&n.parentNode.replaceChild(o,n),y(n,!0))),o.__preactattr_=!0,o;var c=s.nodeName;if("function"==typeof c)return E(n,s,a,t);if(H="svg"===c||"foreignObject"!==c&&H,c=String(c),(!n||!u(n,c))&&(o=d(c,H),n)){for(;n.firstChild;)o.appendChild(n.firstChild);n.parentNode&&n.parentNode.replaceChild(o,n),y(n,!0)}var l=o.firstChild,i=o.__preactattr_,r=s.children;if(null==i){i=o.__preactattr_={};for(var k=o.attributes,h=k.length;h--;)i[k[h].name]=k[h].value}return!B&&r&&1===r.length&&"string"==typeof r[0]&&null!=l&&void 0!==l.splitText&&null==l.nextSibling?l.nodeValue!=r[0]&&(l.nodeValue=r[0]):(r&&r.length||null!=l)&&w(o,r,a,t,B||null!=i.dangerouslySetInnerHTML),j(o,s.attributes,i),H=p,o}function w(n,s,a,t,e){var o,p,c,l,u,r=n.childNodes,d=[],h={},b=0,v=0,m=r.length,g=0,w=s?s.length:0;if(0!==m)for(var x=0;x<m;x++){var j=r[x],q=j.__preactattr_,_=w&&q?j._component?j._component.__key:q.key:null;null!=_?(b++,h[_]=j):(q||(void 0!==j.splitText?!e||j.nodeValue.trim():e))&&(d[g++]=j)}if(0!==w)for(var x=0;x<w;x++){l=s[x],u=null;var _=l.key;if(null!=_)b&&void 0!==h[_]&&(u=h[_],h[_]=void 0,b--);else if(!u&&v<g)for(o=v;o<g;o++)if(void 0!==d[o]&&i(p=d[o],l,e)){u=p,d[o]=void 0,o===g-1&&g--,o===v&&v++;break}u=f(u,l,a,t),c=r[x],u&&u!==n&&u!==c&&(null==c?n.appendChild(u):u===c.nextSibling?k(c):n.insertBefore(u,c))}if(b)for(var x in h)void 0!==h[x]&&y(h[x],!1);for(;v<=g;)void 0!==(u=d[g--])&&y(u,!1)}function y(n,s){var a=n._component;a?T(a):(null!=n.__preactattr_&&n.__preactattr_.ref&&n.__preactattr_.ref(null),!1!==s&&null!=n.__preactattr_||k(n),x(n))}function x(n){for(n=n.lastChild;n;){var s=n.previousSibling;y(n,!0),n=s}}function j(n,s,a){var t;for(t in a)s&&null!=s[t]||null==a[t]||h(n,t,a[t],a[t]=void 0,H);for(t in s)"children"===t||"innerHTML"===t||t in a&&s[t]===("value"===t||"checked"===t?n[t]:a[t])||h(n,t,a[t],a[t]=s[t],H)}function q(n){var s=n.constructor.name;(J[s]||(J[s]=[])).push(n)}function _(n,s,a){var t,e=J[n.name];if(n.prototype&&n.prototype.render?(t=new n(s,a),M.call(t,s,a)):(t=new M(s,a),t.constructor=n,t.render=S),e)for(var o=e.length;o--;)if(e[o].constructor===n){t.nextBase=e[o].nextBase,e.splice(o,1);break}return t}function S(n,s,a){return this.constructor(n,a)}function C(n,s,a,t,e){n._disable||(n._disable=!0,(n.__ref=s.ref)&&delete s.ref,(n.__key=s.key)&&delete s.key,!n.base||e?n.componentWillMount&&n.componentWillMount():n.componentWillReceiveProps&&n.componentWillReceiveProps(s,t),t&&t!==n.context&&(n.prevContext||(n.prevContext=n.context),n.context=t),n.prevProps||(n.prevProps=n.props),n.props=s,n._disable=!1,0!==a&&(1!==a&&!1===R.syncComponentUpdates&&n.base?c(n):P(n,1,e)),n.__ref&&n.__ref(n))}function P(n,s,a,t){if(!n._disable){var e,p,c,l=n.props,i=n.state,u=n.context,d=n.prevProps||l,k=n.prevState||i,h=n.prevContext||u,b=n.base,v=n.nextBase,f=b||v,w=n._component,x=!1;if(b&&(n.props=d,n.state=k,n.context=h,2!==s&&n.shouldComponentUpdate&&!1===n.shouldComponentUpdate(l,i,u)?x=!0:n.componentWillUpdate&&n.componentWillUpdate(l,i,u),n.props=l,n.state=i,n.context=u),n.prevProps=n.prevState=n.prevContext=n.nextBase=null,n._dirty=!1,!x){e=n.render(l,i,u),n.getChildContext&&(u=o(o({},u),n.getChildContext()));var j,q,S=e&&e.nodeName;if("function"==typeof S){var E=r(e);p=w,p&&p.constructor===S&&E.key==p.__key?C(p,E,1,u,!1):(j=p,n._component=p=_(S,E,u),p.nextBase=p.nextBase||v,p._parentComponent=n,C(p,E,0,u,!1),P(p,1,a,!0)),q=p.base}else c=f,j=w,j&&(c=n._component=null),(f||1===s)&&(c&&(c._component=null),q=g(c,e,u,a||!b,f&&f.parentNode,!0));if(f&&q!==f&&p!==w){var M=f.parentNode;M&&q!==M&&(M.replaceChild(q,f),j||(f._component=null,y(f,!1)))}if(j&&T(j),n.base=q,q&&!t){for(var D=n,N=n;N=N._parentComponent;)(D=N).base=q;q._component=D,q._componentConstructor=D.constructor}}if(!b||a?z.unshift(n):x||(n.componentDidUpdate&&n.componentDidUpdate(d,k,h),R.afterUpdate&&R.afterUpdate(n)),null!=n._renderCallbacks)for(;n._renderCallbacks.length;)n._renderCallbacks.pop().call(n);W||t||m()}}function E(n,s,a,t){for(var e=n&&n._component,o=e,p=n,c=e&&n._componentConstructor===s.nodeName,l=c,i=r(s);e&&!l&&(e=e._parentComponent);)l=e.constructor===s.nodeName;return e&&l&&(!t||e._component)?(C(e,i,3,a,t),n=e.base):(o&&!c&&(T(o),n=p=null),e=_(s.nodeName,i,a),n&&!e.nextBase&&(e.nextBase=n,p=null),C(e,i,1,a,t),n=e.base,p&&n!==p&&(p._component=null,y(p,!1))),n}function T(n){R.beforeUnmount&&R.beforeUnmount(n);var s=n.base;n._disable=!0,n.componentWillUnmount&&n.componentWillUnmount(),n.base=null;var a=n._component;a?T(a):s&&(s.__preactattr_&&s.__preactattr_.ref&&s.__preactattr_.ref(null),n.nextBase=s,k(s),q(n),x(s)),n.__ref&&n.__ref(null)}function M(n,s){this._dirty=!0,this.context=s,this.props=n,this.state=this.state||{}}function D(n,s,a){return g(a,n,{},!1,s,!1)}Object.defineProperty(s,"__esModule",{value:!0}),a.d(s,"h",function(){return e}),a.d(s,"createElement",function(){return e}),a.d(s,"cloneElement",function(){return p}),a.d(s,"Component",function(){return M}),a.d(s,"render",function(){return D}),a.d(s,"rerender",function(){return l}),a.d(s,"options",function(){return R});var R={},N=[],A=[],L="function"==typeof Promise?Promise.resolve().then.bind(Promise.resolve()):setTimeout,O=/acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i,I=[],z=[],W=0,H=!1,B=!1,J={};o(M.prototype,{setState:function(n,s){var a=this.state;this.prevState||(this.prevState=o({},a)),o(a,"function"==typeof n?n(a,this.props):n),s&&(this._renderCallbacks=this._renderCallbacks||[]).push(s),c(this)},forceUpdate:function(n){n&&(this._renderCallbacks=this._renderCallbacks||[]).push(n),P(this,2)},render:function(){}});var U={h:e,createElement:e,cloneElement:p,Component:M,render:D,rerender:l,options:R};s.default=U},function(n,s){n.exports=function(){const n="localStorageTest";try{localStorage.setItem(n,n),localStorage.removeItem(n)}catch(n){return!1}}},function(n,s,a){"use strict";function t(n){return n&&n.__esModule?n:{default:n}}function e(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function p(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var c=function(){function n(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(s,a,t){return a&&n(s.prototype,a),t&&n(s,t),s}}(),l=a(0),i=t(l),u=a(5),r=t(u),d=a(8),k=t(d),h=a(35),b=t(h),v=a(37),m=t(v),g=a(39),f=t(g),w=a(40),y=t(w),x=function(n){function s(){return e(this,s),o(this,(s.__proto__||Object.getPrototypeOf(s)).apply(this,arguments))}return p(s,n),c(s,[{key:"render",value:function(){var n=this;this.props.pageUrl;return i.default.createElement("header",{className:"navigation"},i.default.createElement(k.default,{className:"navigation__inner"},i.default.createElement("div",{className:"navigation__mobile",onClick:this._toggleSidebar},i.default.createElement("i",{className:"icon-menu"})),i.default.createElement(r.default,{className:"navigation__logo",to:"/"},i.default.createElement(b.default,{light:!0})),i.default.createElement("nav",{className:"navigation__links"},f.default.map(function(s){var a=n._isActive(s),t=a?"navigation__link--active":"";return i.default.createElement(r.default,{key:"navigation__link-"+s.title,className:"navigation__link "+t,to:"/"+s.url+"/"},s.title)})),i.default.createElement("div",{className:"navigation__search"},i.default.createElement("input",{type:"text",className:"navigation__search-input",placeholder:"在文档中搜索...",onBlur:this._toggleSearch.bind(this)}),i.default.createElement("button",{className:"navigation__search-icon icon-magnifying-glass",onClick:this._toggleSearch.bind(this)}),i.default.createElement("button",{className:"navigation__search-icon icon-cross",onClick:this._toggleSearch.bind(this)})),i.default.createElement(r.default,{className:"navigation__icon",title:"GitHub Repository",to:"//github.com/webpack/webpack"},i.default.createElement("i",{className:"sidecar__icon icon-github"})),i.default.createElement(r.default,{className:"navigation__icon",title:"See Questions on Stack Overflow",to:"//stackoverflow.com/questions/tagged/webpack"},i.default.createElement("i",{className:"sidecar__icon icon-stack-overflow"})),i.default.createElement(y.default,{className:"navigation__hrefs",items:[{title:"印记中文文档导航",url:"https://docschina.org/"},{title:"Vue.js 中文文档",url:"https://vuefe.cn/"},{title:"React.js 中文文档",url:"https://doc.react-china.org/"},{title:"Babel 中文文档",url:"https://babeljs.cn/"},{title:"rollup.js 中文文档",url:"https://rollupjs.org/zh"},{title:"Node.js 中文文档",url:"http://nodejs.cn/"}]}),i.default.createElement(m.default,{className:"navigation__languages",items:[{title:"English",url:"https://webpack.js.org/"},{title:"中文",url:"https://doc.webpack-china.org/"}]})),f.default.filter(function(s){return n._isActive(s)&&s.children}).map(function(s){return i.default.createElement("div",{className:"navigation__bottom",key:s.title},i.default.createElement(k.default,{className:"navigation__inner"},s.children.map(function(s){var a=n._isActive(s)?"navigation__child--active":"";return i.default.createElement(r.default,{key:"navigation__child-"+s.title,className:"navigation__child "+a,to:"/"+s.url+"/"},s.title)})))}))}},{key:"componentDidMount",value:function(){var n=this;if("undefined"!=typeof window){var s=function(){};window.docsearch&&(s=window.docsearch.default||window.docsearch),s({apiKey:"cccb861b286b414d0f820013f3f70b84",indexName:"webpack_china",inputSelector:".navigation__search-input"}),window.addEventListener("keyup",function(s){9===s.which&&s.target.classList.contains("navigation__search-input")&&n._openSearch()})}}},{key:"_isActive",value:function(n){var s=this.props.pageUrl,a=void 0===s?"":s;return n.children?n.children.some(function(n){return new RegExp("^/"+n.url+".*/").test(a)}):new RegExp("^/"+n.url+".*/").test(a)}},{key:"_toggleSidebar",value:function(n){document.querySelector(".sidebar-mobile").classList.toggle("sidebar-mobile--visible")}},{key:"_toggleSearch",value:function(){var n=document.querySelector(".navigation"),s=document.querySelector(".navigation__search-input");!0===n.classList.toggle("navigation--search-mode")&&s.focus()}},{key:"_openSearch",value:function(){document.querySelector(".navigation").classList.add("navigation--search-mode")}}]),s}(i.default.Component);s.default=x},function(n,s,a){function t(n,s,a){return n=c(n),a=null==a?0:e(p(a),0,n.length),s=o(s),n.slice(a,a+s.length)==s}var e=a(21),o=a(9),p=a(30),c=a(34);n.exports=t},function(n,s){function a(n,s,a){return n===n&&(void 0!==a&&(n=n<=a?n:a),void 0!==s&&(n=n>=s?n:s)),n}n.exports=a},function(n,s,a){var t=a(23),e="object"==typeof self&&self&&self.Object===Object&&self,o=t||e||Function("return this")();n.exports=o},function(n,s,a){(function(s){var a="object"==typeof s&&s&&s.Object===Object&&s;n.exports=a}).call(s,a(10))},function(n,s){function a(n,s){for(var a=-1,t=null==n?0:n.length,e=Array(t);++a<t;)e[a]=s(n[a],a,n);return e}n.exports=a},function(n,s){var a=Array.isArray;n.exports=a},function(n,s,a){function t(n){return null==n?void 0===n?l:c:i&&i in Object(n)?o(n):p(n)}var e=a(6),o=a(27),p=a(28),c="[object Null]",l="[object Undefined]",i=e?e.toStringTag:void 0;n.exports=t},function(n,s,a){function t(n){var s=p.call(n,l),a=n[l];try{n[l]=void 0;var t=!0}catch(n){}var e=c.call(n);return t&&(s?n[l]=a:delete n[l]),e}var e=a(6),o=Object.prototype,p=o.hasOwnProperty,c=o.toString,l=e?e.toStringTag:void 0;n.exports=t},function(n,s){function a(n){return e.call(n)}var t=Object.prototype,e=t.toString;n.exports=a},function(n,s){function a(n){return null!=n&&"object"==typeof n}n.exports=a},function(n,s,a){function t(n){var s=e(n),a=s%1;return s===s?a?s-a:s:0}var e=a(31);n.exports=t},function(n,s,a){function t(n){if(!n)return 0===n?n:0;if((n=e(n))===o||n===-o){return(n<0?-1:1)*p}return n===n?n:0}var e=a(32),o=1/0,p=1.7976931348623157e308;n.exports=t},function(n,s,a){function t(n){if("number"==typeof n)return n;if(o(n))return p;if(e(n)){var s="function"==typeof n.valueOf?n.valueOf():n;n=e(s)?s+"":s}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(c,"");var a=i.test(n);return a||u.test(n)?r(n.slice(2),a?2:8):l.test(n)?p:+n}var e=a(33),o=a(11),p=NaN,c=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,u=/^0o[0-7]+$/i,r=parseInt;n.exports=t},function(n,s){function a(n){var s=typeof n;return null!=n&&("object"==s||"function"==s)}n.exports=a},function(n,s,a){function t(n){return null==n?"":e(n)}var e=a(9);n.exports=t},function(n,s,a){"use strict";function t(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(s,"__esModule",{value:!0});var e=a(0),o=t(e),p=a(36),c=t(p);s.default=function(){return o.default.createElement("img",{className:"logo",src:c.default,alt:"webpack logo"})}},function(n,s,a){n.exports=a.p+"cd0bb358c45b584743d8ce4991777c42.svg"},function(n,s,a){"use strict";function t(n){return n&&n.__esModule?n:{default:n}}function e(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function p(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var c=function(){function n(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(s,a,t){return a&&n(s.prototype,a),t&&n(s,t),s}}(),l=a(0),i=t(l),u=a(38),r=t(u),d=function(n){function s(){var n,a,t,p;e(this,s);for(var c=arguments.length,l=Array(c),i=0;i<c;i++)l[i]=arguments[i];return a=t=o(this,(n=s.__proto__||Object.getPrototypeOf(s)).call.apply(n,[this].concat(l))),t.state={active:!1},p=a,o(t,p)}return p(s,n),c(s,[{key:"render",value:function(){var n=this.props,s=n.className,a=void 0===s?"":s,t=n.items,e=void 0===t?[]:t,o=this.state.active?"dropdown__list--active":"";return i.default.createElement("div",{tabIndex:"0",className:"dropdown "+a,onMouseOver:this._toggle.bind(this,!0),onMouseLeave:this._toggle.bind(this,!1)},i.default.createElement("img",{className:"dropdown__language",alt:"select language",src:r.default}),i.default.createElement("i",{className:"dropdown__arrow"}),i.default.createElement("div",{className:"dropdown__list "+o},i.default.createElement("ul",null,e.map(function(n){return i.default.createElement("li",{key:n.title},i.default.createElement("a",{href:n.url},i.default.createElement("span",null,n.title)))}))))}},{key:"_toggle",value:function(){var n=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.setState({active:n})}}]),s}(i.default.Component);s.default=d},function(n,s,a){n.exports=a.p+"ffb234d54a64f189d1e4f4d643cb8bb6.svg"},function(n,s){n.exports=[{title:"文档",url:"concepts",children:[{title:"概念",url:"concepts"},{title:"配置",url:"configuration"},{title:"API",url:"api"},{title:"指南",url:"guides"},{title:"loaders",url:"loaders"},{title:"插件",url:"plugins"}]},{title:"参与贡献",url:"contribute"},{title:"投票",url:"vote"},{title:"博客",url:"//medium.com/webpack"}]},function(n,s,a){"use strict";function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function e(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function o(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var p=function(){function n(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(s,a,t){return a&&n(s.prototype,a),t&&n(s,t),s}}(),c=a(0),l=function(n){return n&&n.__esModule?n:{default:n}}(c),i=function(n){function s(){var n,a,o,p;t(this,s);for(var c=arguments.length,l=Array(c),i=0;i<c;i++)l[i]=arguments[i];return a=o=e(this,(n=s.__proto__||Object.getPrototypeOf(s)).call.apply(n,[this].concat(l))),o.state={active:!1},p=a,e(o,p)}return o(s,n),p(s,[{key:"render",value:function(){var n=this.props,s=n.className,a=void 0===s?"":s,t=n.items,e=void 0===t?[]:t,o=this.state.active?"dropdown__list--active":"";return l.default.createElement("div",{tabIndex:"0",className:"dropdown "+a,onMouseOver:this._toggle.bind(this,!0),onMouseLeave:this._toggle.bind(this,!1)},l.default.createElement("i",{className:"sidecar__icon icon-link"}),l.default.createElement("i",{className:"dropdown__arrow"}),l.default.createElement("div",{className:"dropdown__list "+o},l.default.createElement("ul",null,e.map(function(n){return l.default.createElement("li",{key:n.title},l.default.createElement("a",{href:n.url,target:"_blank"},l.default.createElement("span",null,n.title)))}))))}},{key:"_toggle",value:function(){var n=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.setState({active:n})}}]),s}(l.default.Component);s.default=i},function(n,s,a){"use strict";function t(n){return n&&n.__esModule?n:{default:n}}function e(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function p(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var c=function(){function n(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(s,a,t){return a&&n(s.prototype,a),t&&n(s,t),s}}(),l=a(0),i=t(l),u=a(5),r=t(u),d={},k={},h=function(n){function s(n){e(this,s);var a=o(this,(s.__proto__||Object.getPrototypeOf(s)).call(this,n));return a._handleBodyClick=function(n){n.target.classList.contains("icon-menu")||a.container.contains(n.target)||a._close()},a._handleBodyClick=a._handleBodyClick.bind(a),a}return p(s,n),c(s,[{key:"render",value:function(){var n=this;return i.default.createElement("nav",{className:"sidebar-mobile",ref:function(s){return n.container=s},onTouchStart:this._handleTouchStart.bind(this),onTouchMove:this._handleTouchMove.bind(this),onTouchEnd:this._handleTouchEnd.bind(this)},i.default.createElement("div",{className:"sidebar-mobile__toggle",onTouchStart:this._handleTouchStart.bind(this),onTouchMove:this._handleOpenerTouchMove.bind(this),onTouchEnd:this._handleTouchEnd.bind(this)}),i.default.createElement("div",{className:"sidebar-mobile__content"},i.default.createElement("i",{className:"sidebar-mobile__close icon-cross",onClick:this._close.bind(this)}),this._getSections()))}},{key:"componentDidMount",value:function(){"undefined"!=typeof window&&(window.addEventListener("click",this._handleBodyClick),window.addEventListener("touchstart",this._handleBodyClick))}},{key:"componentWillUnmount",value:function(){"undefined"!=typeof window&&(window.removeEventListener("click",this._handleBodyClick),window.removeEventListener("touchstart",this._handleBodyClick))}},{key:"_getSections",value:function(){var n=this,s="";return"undefined"!=typeof window&&(s=window.location.pathname),this.props.sections.map(function(a){var t=s===a.url||s.includes("/"+a.url),e="/"==a.url?"/":"/"+a.url;return i.default.createElement("div",{className:"sidebar-mobile__section "+(t?"sidebar-mobile__section--active":""),key:e},i.default.createElement(r.default,{className:"sidebar-mobile__section-header",key:e,to:e,onClick:n._close.bind(n)},i.default.createElement("h3",null,a.title||a.url)),n._getPages(a.pages))})}},{key:"_getPages",value:function(n){var s=this,a="";return"undefined"!=typeof window&&(a=window.location.pathname),n.map(function(n){var t=""+n.url,e=a===t||a.includes(t+"/");return i.default.createElement(r.default,{key:t,className:"sidebar-mobile__page "+(e?"sidebar-mobile__page--active":""),to:t,onClick:s._close.bind(s)},n.title)})}},{key:"_close",value:function(){this.container.classList.remove("sidebar-mobile--visible")}},{key:"_open",value:function(){this.container.classList.add("sidebar-mobile--visible")}},{key:"_handleTouchStart",value:function(n){d.x=n.touches[0].pageX,d.y=n.touches[0].pageY,this.container.classList.add("no-delay")}},{key:"_handleTouchMove",value:function(n){var s=d.x-n.touches[0].pageX,a=d.y-n.touches[0].pageY,t=Math.abs(a/s);s>0&&t<.8&&(n.preventDefault(),this.container.style.transform="translateX(-"+s+"px)",k.x=n.touches[0].pageX,k.y=n.touches[0].pageY)}},{key:"_handleOpenerTouchMove",value:function(n){var s=n.touches[0].pageX-d.x,a=d.y-n.touches[0].pageY,t=Math.abs(a/s);s>0&&s<295&&t<.8&&(n.preventDefault(),this.container.style.transform="translateX(calc(-100% + "+s+"px))",k.x=n.touches[0].pageX,k.y=n.touches[0].pageY)}},{key:"_handleTouchEnd",value:function(n){this.container.classList.remove("no-delay"),this.container.style.transform="",d.x-k.x>100?this._close():k.x-d.x>100&&this._open()}}]),s}(i.default.Component);s.default=h},function(n,s,a){"use strict";function t(n){return n&&n.__esModule?n:{default:n}}function e(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function p(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var c=function(){function n(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(s,a,t){return a&&n(s.prototype,a),t&&n(s,t),s}}(),l=a(0),i=t(l),u=a(43),r=t(u),d=a(44),k=t(d),h=function(n){function s(){var n,a,t,p;e(this,s);for(var c=arguments.length,l=Array(c),i=0;i<c;i++)l[i]=arguments[i];return a=t=o(this,(n=s.__proto__||Object.getPrototypeOf(s)).call.apply(n,[this].concat(l))),t.state={fixed:!1,availableHeight:null,maxWidth:null},p=a,o(t,p)}return p(s,n),c(s,[{key:"render",value:function(){var n=this,s=this.props,a=s.pages,t=s.currentPage,e=this.state,o=e.fixed,p=e.availableHeight,c=e.maxWidth,l=void 0;return i.default.createElement("nav",{className:"sidebar",ref:function(s){return n._container=s},style:{position:o?"fixed":null,top:o?0:null,width:o?c:null,maxHeight:p}},i.default.createElement("div",{className:"sidebar__inner"},i.default.createElement("a",{href:"https://github.com/webpack/webpack/releases"},i.default.createElement(r.default,{content:"npm/v/webpack",label:"webpack"})),a.map(function(s,a){var e=l!==s.group&&"-"!==s.group;return l=s.group,i.default.createElement("div",{key:"sidebar-item-"+a},e?i.default.createElement("h4",{className:"sidebar__group"},l):null,i.default.createElement(k.default,{index:a,url:s.url,title:s.title,anchors:s.anchors,currentPage:t,onToggle:n._recalculate.bind(n)}))}),i.default.createElement("div",{style:{marginTop:"20px"}},i.default.createElement("a",{href:"//cloud.tencent.com/community",target:"_blank"},"腾讯云技术社区"))))}},{key:"componentDidMount",value:function(){setTimeout(this._recalculate.bind(this),250),document.addEventListener("scroll",this._recalculate.bind(this))}},{key:"componentWillUnmount",value:function(){document.removeEventListener("scroll",this._recalculate.bind(this))}},{key:"_recalculate",value:function(){var n=window,s=n.scrollY,a=n.innerHeight,t=document.body.scrollHeight,e=this._container.offsetHeight,o=this._container.parentNode,p=o.offsetWidth,c=o.offsetHeight,l=document.querySelector("header").offsetHeight+document.querySelector(".notification-bar").offsetHeight,i=document.querySelector("footer").offsetHeight,u=t-s-a,r=s>l?0:l-s,d=u>i?0:i-u;this.setState({fixed:s>=l&&e<c,availableHeight:a-r-d,maxWidth:p})}}]),s}(l.Component);s.default=h},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var t=a(0),e=function(n){return n&&n.__esModule?n:{default:n}}(t);s.default=function(n){return e.default.createElement("img",{src:"https://img.shields.io/"+n.content+".svg?label="+n.label+"&style=flat-square&maxAge=3600"})}},function(n,s,a){"use strict";function t(n){return n&&n.__esModule?n:{default:n}}function e(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function p(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var c=function(){function n(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(s,a,t){return a&&n(s.prototype,a),t&&n(s,t),s}}(),l=a(0),i=t(l),u=a(45),r=a(5),d=t(r),k="sidebar-item",h=function(n){function s(){var n,a,t,p;e(this,s);for(var c=arguments.length,l=Array(c),i=0;i<c;i++)l[i]=arguments[i];return a=t=o(this,(n=s.__proto__||Object.getPrototypeOf(s)).call.apply(n,[this].concat(l))),t.state={open:t._isOpen(t.props)},p=a,o(t,p)}return p(s,n),c(s,[{key:"render",value:function(){var n=this,s=this.props,a=s.title,t=s.anchors,e=void 0===t?[]:t,o=this.state.open?k+"--open":"",p=0==e.length?k+"--disabled":"";return i.default.createElement("div",{className:k+" "+o+" "+p},e.length>0?i.default.createElement("i",{className:k+"__toggle icon-chevron-right",onClick:this._toggle.bind(this)}):i.default.createElement("i",{className:k+"__toggle icon-vertical-bar"}),i.default.createElement(d.default,{className:k+"__title",to:this.props.url},a),e.length>0?i.default.createElement("ul",{className:k+"__anchors"},e.map(function(s){return i.default.createElement("li",{key:"anchor-"+a+"-"+(0,u.uniqueId)(),className:k+"__anchor",title:s.title},i.default.createElement("a",{href:n._generateAnchorURL(s)},s.title))})):null)}},{key:"componentWillReceiveProps",value:function(n){n.currentPage!==this.props.currentPage&&this.setState({open:this._isOpen(n)})}},{key:"_isOpen",value:function(n){return RegExp(n.currentPage+"/?$").test(n.url)}},{key:"_toggle",value:function(n){var s=this.props.onToggle;this.setState({open:!this.state.open},function(){"function"==typeof s&&s()})}},{key:"_generateAnchorURL",value:function(n){var s=this.props,a=s.currentPage,t=s.url;return"/"+a===t?"#"+n.id:t+"#"+n.id}}]),s}(i.default.Component);s.default=h},function(n,s,a){(function(n,t){var e;(function(){function o(n,s){return n.set(s[0],s[1]),n}function p(n,s){return n.add(s),n}function c(n,s,a){switch(a.length){case 0:return n.call(s);case 1:return n.call(s,a[0]);case 2:return n.call(s,a[0],a[1]);case 3:return n.call(s,a[0],a[1],a[2])}return n.apply(s,a)}function l(n,s,a,t){for(var e=-1,o=null==n?0:n.length;++e<o;){var p=n[e];s(t,p,a(p),n)}return t}function i(n,s){for(var a=-1,t=null==n?0:n.length;++a<t&&!1!==s(n[a],a,n););return n}function u(n,s){for(var a=null==n?0:n.length;a--&&!1!==s(n[a],a,n););return n}function r(n,s){for(var a=-1,t=null==n?0:n.length;++a<t;)if(!s(n[a],a,n))return!1;return!0}function d(n,s){for(var a=-1,t=null==n?0:n.length,e=0,o=[];++a<t;){var p=n[a];s(p,a,n)&&(o[e++]=p)}return o}function k(n,s){return!!(null==n?0:n.length)&&q(n,s,0)>-1}function h(n,s,a){for(var t=-1,e=null==n?0:n.length;++t<e;)if(a(s,n[t]))return!0;return!1}function b(n,s){for(var a=-1,t=null==n?0:n.length,e=Array(t);++a<t;)e[a]=s(n[a],a,n);return e}function v(n,s){for(var a=-1,t=s.length,e=n.length;++a<t;)n[e+a]=s[a];return n}function m(n,s,a,t){var e=-1,o=null==n?0:n.length;for(t&&o&&(a=n[++e]);++e<o;)a=s(a,n[e],e,n);return a}function g(n,s,a,t){var e=null==n?0:n.length;for(t&&e&&(a=n[--e]);e--;)a=s(a,n[e],e,n);return a}function f(n,s){for(var a=-1,t=null==n?0:n.length;++a<t;)if(s(n[a],a,n))return!0;return!1}function w(n){return n.split("")}function y(n){return n.match(Hs)||[]}function x(n,s,a){var t;return a(n,function(n,a,e){if(s(n,a,e))return t=a,!1}),t}function j(n,s,a,t){for(var e=n.length,o=a+(t?1:-1);t?o--:++o<e;)if(s(n[o],o,n))return o;return-1}function q(n,s,a){return s===s?Q(n,s,a):j(n,S,a)}function _(n,s,a,t){for(var e=a-1,o=n.length;++e<o;)if(t(n[e],s))return e;return-1}function S(n){return n!==n}function C(n,s){var a=null==n?0:n.length;return a?D(n,s)/a:Ln}function P(n){return function(s){return null==s?en:s[n]}}function E(n){return function(s){return null==n?en:n[s]}}function T(n,s,a,t,e){return e(n,function(n,e,o){a=t?(t=!1,n):s(a,n,e,o)}),a}function M(n,s){var a=n.length;for(n.sort(s);a--;)n[a]=n[a].value;return n}function D(n,s){for(var a,t=-1,e=n.length;++t<e;){var o=s(n[t]);o!==en&&(a=a===en?o:a+o)}return a}function R(n,s){for(var a=-1,t=Array(n);++a<n;)t[a]=s(a);return t}function N(n,s){return b(s,function(s){return[s,n[s]]})}function A(n){return function(s){return n(s)}}function L(n,s){return b(s,function(s){return n[s]})}function O(n,s){return n.has(s)}function I(n,s){for(var a=-1,t=n.length;++a<t&&q(s,n[a],0)>-1;);return a}function z(n,s){for(var a=n.length;a--&&q(s,n[a],0)>-1;);return a}function W(n,s){for(var a=n.length,t=0;a--;)n[a]===s&&++t;return t}function H(n){return"\\"+Pa[n]}function B(n,s){return null==n?en:n[s]}function J(n){return fa.test(n)}function U(n){return wa.test(n)}function F(n){for(var s,a=[];!(s=n.next()).done;)a.push(s.value);return a}function $(n){var s=-1,a=Array(n.size);return n.forEach(function(n,t){a[++s]=[t,n]}),a}function V(n,s){return function(a){return n(s(a))}}function K(n,s){for(var a=-1,t=n.length,e=0,o=[];++a<t;){var p=n[a];p!==s&&p!==rn||(n[a]=rn,o[e++]=a)}return o}function G(n){var s=-1,a=Array(n.size);return n.forEach(function(n){a[++s]=n}),a}function Y(n){var s=-1,a=Array(n.size);return n.forEach(function(n){a[++s]=[n,n]}),a}function Q(n,s,a){for(var t=a-1,e=n.length;++t<e;)if(n[t]===s)return t;return-1}function X(n,s,a){for(var t=a+1;t--;)if(n[t]===s)return t;return t}function Z(n){return J(n)?sn(n):Fa(n)}function nn(n){return J(n)?an(n):w(n)}function sn(n){for(var s=ma.lastIndex=0;ma.test(n);)++s;return s}function an(n){return n.match(ma)||[]}function tn(n){return n.match(ga)||[]}var en,on=200,pn="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",cn="Expected a function",ln="__lodash_hash_undefined__",un=500,rn="__lodash_placeholder__",dn=1,kn=2,hn=4,bn=1,vn=2,mn=1,gn=2,fn=4,wn=8,yn=16,xn=32,jn=64,qn=128,_n=256,Sn=512,Cn=30,Pn="...",En=800,Tn=16,Mn=1,Dn=2,Rn=1/0,Nn=9007199254740991,An=1.7976931348623157e308,Ln=NaN,On=4294967295,In=On-1,zn=On>>>1,Wn=[["ary",qn],["bind",mn],["bindKey",gn],["curry",wn],["curryRight",yn],["flip",Sn],["partial",xn],["partialRight",jn],["rearg",_n]],Hn="[object Arguments]",Bn="[object Array]",Jn="[object AsyncFunction]",Un="[object Boolean]",Fn="[object Date]",$n="[object DOMException]",Vn="[object Error]",Kn="[object Function]",Gn="[object GeneratorFunction]",Yn="[object Map]",Qn="[object Number]",Xn="[object Null]",Zn="[object Object]",ns="[object Proxy]",ss="[object RegExp]",as="[object Set]",ts="[object String]",es="[object Symbol]",os="[object Undefined]",ps="[object WeakMap]",cs="[object WeakSet]",ls="[object ArrayBuffer]",is="[object DataView]",us="[object Float32Array]",rs="[object Float64Array]",ds="[object Int8Array]",ks="[object Int16Array]",hs="[object Int32Array]",bs="[object Uint8Array]",vs="[object Uint8ClampedArray]",ms="[object Uint16Array]",gs="[object Uint32Array]",fs=/\b__p \+= '';/g,ws=/\b(__p \+=) '' \+/g,ys=/(__e\(.*?\)|\b__t\)) \+\n'';/g,xs=/&(?:amp|lt|gt|quot|#39);/g,js=/[&<>"']/g,qs=RegExp(xs.source),_s=RegExp(js.source),Ss=/<%-([\s\S]+?)%>/g,Cs=/<%([\s\S]+?)%>/g,Ps=/<%=([\s\S]+?)%>/g,Es=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Ts=/^\w*$/,Ms=/^\./,Ds=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Rs=/[\\^$.*+?()[\]{}|]/g,Ns=RegExp(Rs.source),As=/^\s+|\s+$/g,Ls=/^\s+/,Os=/\s+$/,Is=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,zs=/\{\n\/\* \[wrapped with (.+)\] \*/,Ws=/,? & /,Hs=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Bs=/\\(\\)?/g,Js=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Us=/\w*$/,Fs=/^[-+]0x[0-9a-f]+$/i,$s=/^0b[01]+$/i,Vs=/^\[object .+?Constructor\]$/,Ks=/^0o[0-7]+$/i,Gs=/^(?:0|[1-9]\d*)$/,Ys=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Qs=/($^)/,Xs=/['\n\r\u2028\u2029\\]/g,Zs="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",na="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",sa="["+na+"]",aa="["+Zs+"]",ta="[a-z\\xdf-\\xf6\\xf8-\\xff]",ea="[^\\ud800-\\udfff"+na+"\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",oa="\\ud83c[\\udffb-\\udfff]",pa="(?:\\ud83c[\\udde6-\\uddff]){2}",ca="[\\ud800-\\udbff][\\udc00-\\udfff]",la="[A-Z\\xc0-\\xd6\\xd8-\\xde]",ia="(?:"+ta+"|"+ea+")",ua="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",ra="(?:\\u200d(?:"+["[^\\ud800-\\udfff]",pa,ca].join("|")+")[\\ufe0e\\ufe0f]?"+ua+")*",da="[\\ufe0e\\ufe0f]?"+ua+ra,ka="(?:"+["[\\u2700-\\u27bf]",pa,ca].join("|")+")"+da,ha="(?:"+["[^\\ud800-\\udfff]"+aa+"?",aa,pa,ca,"[\\ud800-\\udfff]"].join("|")+")",ba=RegExp("['’]","g"),va=RegExp(aa,"g"),ma=RegExp(oa+"(?="+oa+")|"+ha+da,"g"),ga=RegExp([la+"?"+ta+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[sa,la,"$"].join("|")+")","(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[sa,la+ia,"$"].join("|")+")",la+"?"+ia+"+(?:['’](?:d|ll|m|re|s|t|ve))?",la+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)","\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)","\\d+",ka].join("|"),"g"),fa=RegExp("[\\u200d\\ud800-\\udfff"+Zs+"\\ufe0e\\ufe0f]"),wa=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ya=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],xa=-1,ja={};ja[us]=ja[rs]=ja[ds]=ja[ks]=ja[hs]=ja[bs]=ja[vs]=ja[ms]=ja[gs]=!0,ja[Hn]=ja[Bn]=ja[ls]=ja[Un]=ja[is]=ja[Fn]=ja[Vn]=ja[Kn]=ja[Yn]=ja[Qn]=ja[Zn]=ja[ss]=ja[as]=ja[ts]=ja[ps]=!1;var qa={};qa[Hn]=qa[Bn]=qa[ls]=qa[is]=qa[Un]=qa[Fn]=qa[us]=qa[rs]=qa[ds]=qa[ks]=qa[hs]=qa[Yn]=qa[Qn]=qa[Zn]=qa[ss]=qa[as]=qa[ts]=qa[es]=qa[bs]=qa[vs]=qa[ms]=qa[gs]=!0,qa[Vn]=qa[Kn]=qa[ps]=!1;var _a={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"},Sa={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},Ca={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"},Pa={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ea=parseFloat,Ta=parseInt,Ma="object"==typeof n&&n&&n.Object===Object&&n,Da="object"==typeof self&&self&&self.Object===Object&&self,Ra=Ma||Da||Function("return this")(),Na="object"==typeof s&&s&&!s.nodeType&&s,Aa=Na&&"object"==typeof t&&t&&!t.nodeType&&t,La=Aa&&Aa.exports===Na,Oa=La&&Ma.process,Ia=function(){try{return Oa&&Oa.binding&&Oa.binding("util")}catch(n){}}(),za=Ia&&Ia.isArrayBuffer,Wa=Ia&&Ia.isDate,Ha=Ia&&Ia.isMap,Ba=Ia&&Ia.isRegExp,Ja=Ia&&Ia.isSet,Ua=Ia&&Ia.isTypedArray,Fa=P("length"),$a=E(_a),Va=E(Sa),Ka=E(Ca),Ga=function n(s){function a(n){if(ol(n)&&!vd(n)&&!(n instanceof w)){if(n instanceof e)return n;if(vu.call(n,"__wrapped__"))return ap(n)}return new e(n)}function t(){}function e(n,s){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!s,this.__index__=0,this.__values__=en}function w(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=On,this.__views__=[]}function E(){var n=new w(this.__wrapped__);return n.__actions__=Oe(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=Oe(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=Oe(this.__views__),n}function Q(){if(this.__filtered__){var n=new w(this);n.__dir__=-1,n.__filtered__=!0}else n=this.clone(),n.__dir__*=-1;return n}function sn(){var n=this.__wrapped__.value(),s=this.__dir__,a=vd(n),t=s<0,e=a?n.length:0,o=Co(0,e,this.__views__),p=o.start,c=o.end,l=c-p,i=t?c:p-1,u=this.__iteratees__,r=u.length,d=0,k=$u(l,this.__takeCount__);if(!a||!t&&e==l&&k==l)return ge(n,this.__actions__);var h=[];n:for(;l--&&d<k;){i+=s;for(var b=-1,v=n[i];++b<r;){var m=u[b],g=m.iteratee,f=m.type,w=g(v);if(f==Dn)v=w;else if(!w){if(f==Mn)continue n;break n}}h[d++]=v}return h}function an(n){var s=-1,a=null==n?0:n.length;for(this.clear();++s<a;){var t=n[s];this.set(t[0],t[1])}}function Hs(){this.__data__=ar?ar(null):{},this.size=0}function Zs(n){var s=this.has(n)&&delete this.__data__[n];return this.size-=s?1:0,s}function na(n){var s=this.__data__;if(ar){var a=s[n];return a===ln?en:a}return vu.call(s,n)?s[n]:en}function sa(n){var s=this.__data__;return ar?s[n]!==en:vu.call(s,n)}function aa(n,s){var a=this.__data__;return this.size+=this.has(n)?0:1,a[n]=ar&&s===en?ln:s,this}function ta(n){var s=-1,a=null==n?0:n.length;for(this.clear();++s<a;){var t=n[s];this.set(t[0],t[1])}}function ea(){this.__data__=[],this.size=0}function oa(n){var s=this.__data__,a=Ya(s,n);return!(a<0)&&(a==s.length-1?s.pop():Tu.call(s,a,1),--this.size,!0)}function pa(n){var s=this.__data__,a=Ya(s,n);return a<0?en:s[a][1]}function ca(n){return Ya(this.__data__,n)>-1}function la(n,s){var a=this.__data__,t=Ya(a,n);return t<0?(++this.size,a.push([n,s])):a[t][1]=s,this}function ia(n){var s=-1,a=null==n?0:n.length;for(this.clear();++s<a;){var t=n[s];this.set(t[0],t[1])}}function ua(){this.size=0,this.__data__={hash:new an,map:new(Xu||ta),string:new an}}function ra(n){var s=jo(this,n).delete(n);return this.size-=s?1:0,s}function da(n){return jo(this,n).get(n)}function ka(n){return jo(this,n).has(n)}function ha(n,s){var a=jo(this,n),t=a.size;return a.set(n,s),this.size+=a.size==t?0:1,this}function ma(n){var s=-1,a=null==n?0:n.length;for(this.__data__=new ia;++s<a;)this.add(n[s])}function ga(n){return this.__data__.set(n,ln),this}function fa(n){return this.__data__.has(n)}function wa(n){var s=this.__data__=new ta(n);this.size=s.size}function _a(){this.__data__=new ta,this.size=0}function Sa(n){var s=this.__data__,a=s.delete(n);return this.size=s.size,a}function Ca(n){return this.__data__.get(n)}function Pa(n){return this.__data__.has(n)}function Ma(n,s){var a=this.__data__;if(a instanceof ta){var t=a.__data__;if(!Xu||t.length<on-1)return t.push([n,s]),this.size=++a.size,this;a=this.__data__=new ia(t)}return a.set(n,s),this.size=a.size,this}function Da(n,s){var a=vd(n),t=!a&&bd(n),e=!a&&!t&&gd(n),o=!a&&!t&&!e&&jd(n),p=a||t||e||o,c=p?R(n.length,iu):[],l=c.length;for(var i in n)!s&&!vu.call(n,i)||p&&("length"==i||e&&("offset"==i||"parent"==i)||o&&("buffer"==i||"byteLength"==i||"byteOffset"==i)||Ao(i,l))||c.push(i);return c}function Na(n){var s=n.length;return s?n[Zt(0,s-1)]:en}function Aa(n,s){return Xo(Oe(n),at(s,0,n.length))}function Oa(n){return Xo(Oe(n))}function Ia(n,s,a){(a===en||Fc(n[s],a))&&(a!==en||s in n)||nt(n,s,a)}function Fa(n,s,a){var t=n[s];vu.call(n,s)&&Fc(t,a)&&(a!==en||s in n)||nt(n,s,a)}function Ya(n,s){for(var a=n.length;a--;)if(Fc(n[a][0],s))return a;return-1}function Qa(n,s,a,t){return hr(n,function(n,e,o){s(t,n,a(n),o)}),t}function Xa(n,s){return n&&Ie(s,Wl(s),n)}function Za(n,s){return n&&Ie(s,Hl(s),n)}function nt(n,s,a){"__proto__"==s&&Nu?Nu(n,s,{configurable:!0,enumerable:!0,value:a,writable:!0}):n[s]=a}function st(n,s){for(var a=-1,t=s.length,e=au(t),o=null==n;++a<t;)e[a]=o?en:Ol(n,s[a]);return e}function at(n,s,a){return n===n&&(a!==en&&(n=n<=a?n:a),s!==en&&(n=n>=s?n:s)),n}function tt(n,s,a,t,e,o){var p,c=s&dn,l=s&kn,u=s&hn;if(a&&(p=e?a(n,t,e,o):a(n)),p!==en)return p;if(!el(n))return n;var r=vd(n);if(r){if(p=To(n),!c)return Oe(n,p)}else{var d=Sr(n),k=d==Kn||d==Gn;if(gd(n))return _e(n,c);if(d==Zn||d==Hn||k&&!e){if(p=l||k?{}:Mo(n),!c)return l?We(n,Za(p,n)):ze(n,Xa(p,n))}else{if(!qa[d])return e?n:{};p=Do(n,d,tt,c)}}o||(o=new wa);var h=o.get(n);if(h)return h;o.set(n,p);var b=u?l?fo:go:l?Hl:Wl,v=r?en:b(n);return i(v||n,function(t,e){v&&(e=t,t=n[e]),Fa(p,e,tt(t,s,a,e,n,o))}),p}function et(n){var s=Wl(n);return function(a){return ot(a,n,s)}}function ot(n,s,a){var t=a.length;if(null==n)return!t;for(n=cu(n);t--;){var e=a[t],o=s[e],p=n[e];if(p===en&&!(e in n)||!o(p))return!1}return!0}function pt(n,s,a){if("function"!=typeof n)throw new uu(cn);return Er(function(){n.apply(en,a)},s)}function ct(n,s,a,t){var e=-1,o=k,p=!0,c=n.length,l=[],i=s.length;if(!c)return l;a&&(s=b(s,A(a))),t?(o=h,p=!1):s.length>=on&&(o=O,p=!1,s=new ma(s));n:for(;++e<c;){var u=n[e],r=null==a?u:a(u);if(u=t||0!==u?u:0,p&&r===r){for(var d=i;d--;)if(s[d]===r)continue n;l.push(u)}else o(s,r,t)||l.push(u)}return l}function lt(n,s){var a=!0;return hr(n,function(n,t,e){return a=!!s(n,t,e)}),a}function it(n,s,a){for(var t=-1,e=n.length;++t<e;){var o=n[t],p=s(o);if(null!=p&&(c===en?p===p&&!vl(p):a(p,c)))var c=p,l=o}return l}function ut(n,s,a,t){var e=n.length;for(a=xl(a),a<0&&(a=-a>e?0:e+a),t=t===en||t>e?e:xl(t),t<0&&(t+=e),t=a>t?0:jl(t);a<t;)n[a++]=s;return n}function rt(n,s){var a=[];return hr(n,function(n,t,e){s(n,t,e)&&a.push(n)}),a}function dt(n,s,a,t,e){var o=-1,p=n.length;for(a||(a=No),e||(e=[]);++o<p;){var c=n[o];s>0&&a(c)?s>1?dt(c,s-1,a,t,e):v(e,c):t||(e[e.length]=c)}return e}function kt(n,s){return n&&vr(n,s,Wl)}function ht(n,s){return n&&mr(n,s,Wl)}function bt(n,s){return d(s,function(s){return sl(n[s])})}function vt(n,s){s=je(s,n);for(var a=0,t=s.length;null!=n&&a<t;)n=n[Zo(s[a++])];return a&&a==t?n:en}function mt(n,s,a){var t=s(n);return vd(n)?t:v(t,a(n))}function gt(n){return null==n?n===en?os:Xn:Ru&&Ru in cu(n)?So(n):$o(n)}function ft(n,s){return n>s}function wt(n,s){return null!=n&&vu.call(n,s)}function yt(n,s){return null!=n&&s in cu(n)}function xt(n,s,a){return n>=$u(s,a)&&n<Fu(s,a)}function jt(n,s,a){for(var t=a?h:k,e=n[0].length,o=n.length,p=o,c=au(o),l=1/0,i=[];p--;){var u=n[p];p&&s&&(u=b(u,A(s))),l=$u(u.length,l),c[p]=!a&&(s||e>=120&&u.length>=120)?new ma(p&&u):en}u=n[0];var r=-1,d=c[0];n:for(;++r<e&&i.length<l;){var v=u[r],m=s?s(v):v;if(v=a||0!==v?v:0,!(d?O(d,m):t(i,m,a))){for(p=o;--p;){var g=c[p];if(!(g?O(g,m):t(n[p],m,a)))continue n}d&&d.push(m),i.push(v)}}return i}function qt(n,s,a,t){return kt(n,function(n,e,o){s(t,a(n),e,o)}),t}function _t(n,s,a){s=je(s,n),n=Ko(n,s);var t=null==n?n:n[Zo(yp(s))];return null==t?en:c(t,n,a)}function St(n){return ol(n)&&gt(n)==Hn}function Ct(n){return ol(n)&&gt(n)==ls}function Pt(n){return ol(n)&&gt(n)==Fn}function Et(n,s,a,t,e){return n===s||(null==n||null==s||!ol(n)&&!ol(s)?n!==n&&s!==s:Tt(n,s,a,t,Et,e))}function Tt(n,s,a,t,e,o){var p=vd(n),c=vd(s),l=p?Bn:Sr(n),i=c?Bn:Sr(s);l=l==Hn?Zn:l,i=i==Hn?Zn:i;var u=l==Zn,r=i==Zn,d=l==i;if(d&&gd(n)){if(!gd(s))return!1;p=!0,u=!1}if(d&&!u)return o||(o=new wa),p||jd(n)?ho(n,s,a,t,e,o):bo(n,s,l,a,t,e,o);if(!(a&bn)){var k=u&&vu.call(n,"__wrapped__"),h=r&&vu.call(s,"__wrapped__");if(k||h){var b=k?n.value():n,v=h?s.value():s;return o||(o=new wa),e(b,v,a,t,o)}}return!!d&&(o||(o=new wa),vo(n,s,a,t,e,o))}function Mt(n){return ol(n)&&Sr(n)==Yn}function Dt(n,s,a,t){var e=a.length,o=e,p=!t;if(null==n)return!o;for(n=cu(n);e--;){var c=a[e];if(p&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++e<o;){c=a[e];var l=c[0],i=n[l],u=c[1];if(p&&c[2]){if(i===en&&!(l in n))return!1}else{var r=new wa;if(t)var d=t(i,u,l,n,s,r);if(!(d===en?Et(u,i,bn|vn,t,r):d))return!1}}return!0}function Rt(n){return!(!el(n)||Wo(n))&&(sl(n)?xu:Vs).test(np(n))}function Nt(n){return ol(n)&&gt(n)==ss}function At(n){return ol(n)&&Sr(n)==as}function Lt(n){return ol(n)&&tl(n.length)&&!!ja[gt(n)]}function Ot(n){return"function"==typeof n?n:null==n?Ti:"object"==typeof n?vd(n)?Jt(n[0],n[1]):Bt(n):Ii(n)}function It(n){if(!Ho(n))return Uu(n);var s=[];for(var a in cu(n))vu.call(n,a)&&"constructor"!=a&&s.push(a);return s}function zt(n){if(!el(n))return Fo(n);var s=Ho(n),a=[];for(var t in n)("constructor"!=t||!s&&vu.call(n,t))&&a.push(t);return a}function Wt(n,s){return n<s}function Ht(n,s){var a=-1,t=$c(n)?au(n.length):[];return hr(n,function(n,e,o){t[++a]=s(n,e,o)}),t}function Bt(n){var s=qo(n);return 1==s.length&&s[0][2]?Jo(s[0][0],s[0][1]):function(a){return a===n||Dt(a,n,s)}}function Jt(n,s){return Oo(n)&&Bo(s)?Jo(Zo(n),s):function(a){var t=Ol(a,n);return t===en&&t===s?zl(a,n):Et(s,t,bn|vn)}}function Ut(n,s,a,t,e){n!==s&&vr(s,function(o,p){if(el(o))e||(e=new wa),Ft(n,s,p,a,Ut,t,e);else{var c=t?t(n[p],o,p+"",n,s,e):en;c===en&&(c=o),Ia(n,p,c)}},Hl)}function Ft(n,s,a,t,e,o,p){var c=n[a],l=s[a],i=p.get(l);if(i)return void Ia(n,a,i);var u=o?o(c,l,a+"",n,s,p):en,r=u===en;if(r){var d=vd(l),k=!d&&gd(l),h=!d&&!k&&jd(l);u=l,d||k||h?vd(c)?u=c:Vc(c)?u=Oe(c):k?(r=!1,u=_e(l,!0)):h?(r=!1,u=De(l,!0)):u=[]:kl(l)||bd(l)?(u=c,bd(c)?u=_l(c):(!el(c)||t&&sl(c))&&(u=Mo(l))):r=!1}r&&(p.set(l,u),e(u,l,t,o,p),p.delete(l)),Ia(n,a,u)}function $t(n,s){var a=n.length;if(a)return s+=s<0?a:0,Ao(s,a)?n[s]:en}function Vt(n,s,a){var t=-1;return s=b(s.length?s:[Ti],A(xo())),M(Ht(n,function(n,a,e){return{criteria:b(s,function(s){return s(n)}),index:++t,value:n}}),function(n,s){return Ne(n,s,a)})}function Kt(n,s){return Gt(n,s,function(s,a){return zl(n,a)})}function Gt(n,s,a){for(var t=-1,e=s.length,o={};++t<e;){var p=s[t],c=vt(n,p);a(c,p)&&oe(o,je(p,n),c)}return o}function Yt(n){return function(s){return vt(s,n)}}function Qt(n,s,a,t){var e=t?_:q,o=-1,p=s.length,c=n;for(n===s&&(s=Oe(s)),a&&(c=b(n,A(a)));++o<p;)for(var l=0,i=s[o],u=a?a(i):i;(l=e(c,u,l,t))>-1;)c!==n&&Tu.call(c,l,1),Tu.call(n,l,1);return n}function Xt(n,s){for(var a=n?s.length:0,t=a-1;a--;){var e=s[a];if(a==t||e!==o){var o=e;Ao(e)?Tu.call(n,e,1):be(n,e)}}return n}function Zt(n,s){return n+zu(Gu()*(s-n+1))}function ne(n,s,a,t){for(var e=-1,o=Fu(Iu((s-n)/(a||1)),0),p=au(o);o--;)p[t?o:++e]=n,n+=a;return p}function se(n,s){var a="";if(!n||s<1||s>Nn)return a;do{s%2&&(a+=n),(s=zu(s/2))&&(n+=n)}while(s);return a}function ae(n,s){return Tr(Vo(n,s,Ti),n+"")}function te(n){return Na(Zl(n))}function ee(n,s){var a=Zl(n);return Xo(a,at(s,0,a.length))}function oe(n,s,a,t){if(!el(n))return n;s=je(s,n);for(var e=-1,o=s.length,p=o-1,c=n;null!=c&&++e<o;){var l=Zo(s[e]),i=a;if(e!=p){var u=c[l];i=t?t(u,l,c):en,i===en&&(i=el(u)?u:Ao(s[e+1])?[]:{})}Fa(c,l,i),c=c[l]}return n}function pe(n){return Xo(Zl(n))}function ce(n,s,a){var t=-1,e=n.length;s<0&&(s=-s>e?0:e+s),a=a>e?e:a,a<0&&(a+=e),e=s>a?0:a-s>>>0,s>>>=0;for(var o=au(e);++t<e;)o[t]=n[t+s];return o}function le(n,s){var a;return hr(n,function(n,t,e){return!(a=s(n,t,e))}),!!a}function ie(n,s,a){var t=0,e=null==n?t:n.length;if("number"==typeof s&&s===s&&e<=zn){for(;t<e;){var o=t+e>>>1,p=n[o];null!==p&&!vl(p)&&(a?p<=s:p<s)?t=o+1:e=o}return e}return ue(n,s,Ti,a)}function ue(n,s,a,t){s=a(s);for(var e=0,o=null==n?0:n.length,p=s!==s,c=null===s,l=vl(s),i=s===en;e<o;){var u=zu((e+o)/2),r=a(n[u]),d=r!==en,k=null===r,h=r===r,b=vl(r);if(p)var v=t||h;else v=i?h&&(t||d):c?h&&d&&(t||!k):l?h&&d&&!k&&(t||!b):!k&&!b&&(t?r<=s:r<s);v?e=u+1:o=u}return $u(o,In)}function re(n,s){for(var a=-1,t=n.length,e=0,o=[];++a<t;){var p=n[a],c=s?s(p):p;if(!a||!Fc(c,l)){var l=c;o[e++]=0===p?0:p}}return o}function de(n){return"number"==typeof n?n:vl(n)?Ln:+n}function ke(n){if("string"==typeof n)return n;if(vd(n))return b(n,ke)+"";if(vl(n))return dr?dr.call(n):"";var s=n+"";return"0"==s&&1/n==-Rn?"-0":s}function he(n,s,a){var t=-1,e=k,o=n.length,p=!0,c=[],l=c;if(a)p=!1,e=h;else if(o>=on){var i=s?null:xr(n);if(i)return G(i);p=!1,e=O,l=new ma}else l=s?[]:c;n:for(;++t<o;){var u=n[t],r=s?s(u):u;if(u=a||0!==u?u:0,p&&r===r){for(var d=l.length;d--;)if(l[d]===r)continue n;s&&l.push(r),c.push(u)}else e(l,r,a)||(l!==c&&l.push(r),c.push(u))}return c}function be(n,s){return s=je(s,n),null==(n=Ko(n,s))||delete n[Zo(yp(s))]}function ve(n,s,a,t){return oe(n,s,a(vt(n,s)),t)}function me(n,s,a,t){for(var e=n.length,o=t?e:-1;(t?o--:++o<e)&&s(n[o],o,n););return a?ce(n,t?0:o,t?o+1:e):ce(n,t?o+1:0,t?e:o)}function ge(n,s){var a=n;return a instanceof w&&(a=a.value()),m(s,function(n,s){return s.func.apply(s.thisArg,v([n],s.args))},a)}function fe(n,s,a){var t=n.length;if(t<2)return t?he(n[0]):[];for(var e=-1,o=au(t);++e<t;)for(var p=n[e],c=-1;++c<t;)c!=e&&(o[e]=ct(o[e]||p,n[c],s,a));return he(dt(o,1),s,a)}function we(n,s,a){for(var t=-1,e=n.length,o=s.length,p={};++t<e;){var c=t<o?s[t]:en;a(p,n[t],c)}return p}function ye(n){return Vc(n)?n:[]}function xe(n){return"function"==typeof n?n:Ti}function je(n,s){return vd(n)?n:Oo(n,s)?[n]:Mr(Cl(n))}function qe(n,s,a){var t=n.length;return a=a===en?t:a,!s&&a>=t?n:ce(n,s,a)}function _e(n,s){if(s)return n.slice();var a=n.length,t=Su?Su(a):new n.constructor(a);return n.copy(t),t}function Se(n){var s=new n.constructor(n.byteLength);return new _u(s).set(new _u(n)),s}function Ce(n,s){var a=s?Se(n.buffer):n.buffer;return new n.constructor(a,n.byteOffset,n.byteLength)}function Pe(n,s,a){return m(s?a($(n),dn):$(n),o,new n.constructor)}function Ee(n){var s=new n.constructor(n.source,Us.exec(n));return s.lastIndex=n.lastIndex,s}function Te(n,s,a){return m(s?a(G(n),dn):G(n),p,new n.constructor)}function Me(n){return rr?cu(rr.call(n)):{}}function De(n,s){var a=s?Se(n.buffer):n.buffer;return new n.constructor(a,n.byteOffset,n.length)}function Re(n,s){if(n!==s){var a=n!==en,t=null===n,e=n===n,o=vl(n),p=s!==en,c=null===s,l=s===s,i=vl(s);if(!c&&!i&&!o&&n>s||o&&p&&l&&!c&&!i||t&&p&&l||!a&&l||!e)return 1;if(!t&&!o&&!i&&n<s||i&&a&&e&&!t&&!o||c&&a&&e||!p&&e||!l)return-1}return 0}function Ne(n,s,a){for(var t=-1,e=n.criteria,o=s.criteria,p=e.length,c=a.length;++t<p;){var l=Re(e[t],o[t]);if(l){if(t>=c)return l;return l*("desc"==a[t]?-1:1)}}return n.index-s.index}function Ae(n,s,a,t){for(var e=-1,o=n.length,p=a.length,c=-1,l=s.length,i=Fu(o-p,0),u=au(l+i),r=!t;++c<l;)u[c]=s[c];for(;++e<p;)(r||e<o)&&(u[a[e]]=n[e]);for(;i--;)u[c++]=n[e++];return u}function Le(n,s,a,t){for(var e=-1,o=n.length,p=-1,c=a.length,l=-1,i=s.length,u=Fu(o-c,0),r=au(u+i),d=!t;++e<u;)r[e]=n[e];for(var k=e;++l<i;)r[k+l]=s[l];for(;++p<c;)(d||e<o)&&(r[k+a[p]]=n[e++]);return r}function Oe(n,s){var a=-1,t=n.length;for(s||(s=au(t));++a<t;)s[a]=n[a];return s}function Ie(n,s,a,t){var e=!a;a||(a={});for(var o=-1,p=s.length;++o<p;){var c=s[o],l=t?t(a[c],n[c],c,a,n):en;l===en&&(l=n[c]),e?nt(a,c,l):Fa(a,c,l)}return a}function ze(n,s){return Ie(n,qr(n),s)}function We(n,s){return Ie(n,_r(n),s)}function He(n,s){return function(a,t){var e=vd(a)?l:Qa,o=s?s():{};return e(a,n,xo(t,2),o)}}function Be(n){return ae(function(s,a){var t=-1,e=a.length,o=e>1?a[e-1]:en,p=e>2?a[2]:en;for(o=n.length>3&&"function"==typeof o?(e--,o):en,p&&Lo(a[0],a[1],p)&&(o=e<3?en:o,e=1),s=cu(s);++t<e;){var c=a[t];c&&n(s,c,t,o)}return s})}function Je(n,s){return function(a,t){if(null==a)return a;if(!$c(a))return n(a,t);for(var e=a.length,o=s?e:-1,p=cu(a);(s?o--:++o<e)&&!1!==t(p[o],o,p););return a}}function Ue(n){return function(s,a,t){for(var e=-1,o=cu(s),p=t(s),c=p.length;c--;){var l=p[n?c:++e];if(!1===a(o[l],l,o))break}return s}}function Fe(n,s,a){function t(){return(this&&this!==Ra&&this instanceof t?o:n).apply(e?a:this,arguments)}var e=s&mn,o=Ke(n);return t}function $e(n){return function(s){s=Cl(s);var a=J(s)?nn(s):en,t=a?a[0]:s.charAt(0),e=a?qe(a,1).join(""):s.slice(1);return t[n]()+e}}function Ve(n){return function(s){return m(_i(oi(s).replace(ba,"")),n,"")}}function Ke(n){return function(){var s=arguments;switch(s.length){case 0:return new n;case 1:return new n(s[0]);case 2:return new n(s[0],s[1]);case 3:return new n(s[0],s[1],s[2]);case 4:return new n(s[0],s[1],s[2],s[3]);case 5:return new n(s[0],s[1],s[2],s[3],s[4]);case 6:return new n(s[0],s[1],s[2],s[3],s[4],s[5]);case 7:return new n(s[0],s[1],s[2],s[3],s[4],s[5],s[6])}var a=kr(n.prototype),t=n.apply(a,s);return el(t)?t:a}}function Ge(n,s,a){function t(){for(var o=arguments.length,p=au(o),l=o,i=yo(t);l--;)p[l]=arguments[l];var u=o<3&&p[0]!==i&&p[o-1]!==i?[]:K(p,i);return(o-=u.length)<a?po(n,s,Xe,t.placeholder,en,p,u,en,en,a-o):c(this&&this!==Ra&&this instanceof t?e:n,this,p)}var e=Ke(n);return t}function Ye(n){return function(s,a,t){var e=cu(s);if(!$c(s)){var o=xo(a,3);s=Wl(s),a=function(n){return o(e[n],n,e)}}var p=n(s,a,t);return p>-1?e[o?s[p]:p]:en}}function Qe(n){return mo(function(s){var a=s.length,t=a,o=e.prototype.thru;for(n&&s.reverse();t--;){var p=s[t];if("function"!=typeof p)throw new uu(cn);if(o&&!c&&"wrapper"==wo(p))var c=new e([],!0)}for(t=c?t:a;++t<a;){p=s[t];var l=wo(p),i="wrapper"==l?jr(p):en;c=i&&zo(i[0])&&i[1]==(qn|wn|xn|_n)&&!i[4].length&&1==i[9]?c[wo(i[0])].apply(c,i[3]):1==p.length&&zo(p)?c[l]():c.thru(p)}return function(){var n=arguments,t=n[0];if(c&&1==n.length&&vd(t))return c.plant(t).value();for(var e=0,o=a?s[e].apply(this,n):t;++e<a;)o=s[e].call(this,o);return o}})}function Xe(n,s,a,t,e,o,p,c,l,i){function u(){for(var m=arguments.length,g=au(m),f=m;f--;)g[f]=arguments[f];if(h)var w=yo(u),y=W(g,w);if(t&&(g=Ae(g,t,e,h)),o&&(g=Le(g,o,p,h)),m-=y,h&&m<i){var x=K(g,w);return po(n,s,Xe,u.placeholder,a,g,x,c,l,i-m)}var j=d?a:this,q=k?j[n]:n;return m=g.length,c?g=Go(g,c):b&&m>1&&g.reverse(),r&&l<m&&(g.length=l),this&&this!==Ra&&this instanceof u&&(q=v||Ke(q)),q.apply(j,g)}var r=s&qn,d=s&mn,k=s&gn,h=s&(wn|yn),b=s&Sn,v=k?en:Ke(n);return u}function Ze(n,s){return function(a,t){return qt(a,n,s(t),{})}}function no(n,s){return function(a,t){var e;if(a===en&&t===en)return s;if(a!==en&&(e=a),t!==en){if(e===en)return t;"string"==typeof a||"string"==typeof t?(a=ke(a),t=ke(t)):(a=de(a),t=de(t)),e=n(a,t)}return e}}function so(n){return mo(function(s){return s=b(s,A(xo())),ae(function(a){var t=this;return n(s,function(n){return c(n,t,a)})})})}function ao(n,s){s=s===en?" ":ke(s);var a=s.length;if(a<2)return a?se(s,n):s;var t=se(s,Iu(n/Z(s)));return J(s)?qe(nn(t),0,n).join(""):t.slice(0,n)}function to(n,s,a,t){function e(){for(var s=-1,l=arguments.length,i=-1,u=t.length,r=au(u+l),d=this&&this!==Ra&&this instanceof e?p:n;++i<u;)r[i]=t[i];for(;l--;)r[i++]=arguments[++s];return c(d,o?a:this,r)}var o=s&mn,p=Ke(n);return e}function eo(n){return function(s,a,t){return t&&"number"!=typeof t&&Lo(s,a,t)&&(a=t=en),s=yl(s),a===en?(a=s,s=0):a=yl(a),t=t===en?s<a?1:-1:yl(t),ne(s,a,t,n)}}function oo(n){return function(s,a){return"string"==typeof s&&"string"==typeof a||(s=ql(s),a=ql(a)),n(s,a)}}function po(n,s,a,t,e,o,p,c,l,i){var u=s&wn,r=u?p:en,d=u?en:p,k=u?o:en,h=u?en:o;s|=u?xn:jn,(s&=~(u?jn:xn))&fn||(s&=~(mn|gn));var b=[n,s,e,k,r,h,d,c,l,i],v=a.apply(en,b);return zo(n)&&Pr(v,b),v.placeholder=t,Yo(v,n,s)}function co(n){var s=pu[n];return function(n,a){if(n=ql(n),a=null==a?0:$u(xl(a),292)){var t=(Cl(n)+"e").split("e");return t=(Cl(s(t[0]+"e"+(+t[1]+a)))+"e").split("e"),+(t[0]+"e"+(+t[1]-a))}return s(n)}}function lo(n){return function(s){var a=Sr(s);return a==Yn?$(s):a==as?Y(s):N(s,n(s))}}function io(n,s,a,t,e,o,p,c){var l=s&gn;if(!l&&"function"!=typeof n)throw new uu(cn);var i=t?t.length:0;if(i||(s&=~(xn|jn),t=e=en),p=p===en?p:Fu(xl(p),0),c=c===en?c:xl(c),i-=e?e.length:0,s&jn){var u=t,r=e;t=e=en}var d=l?en:jr(n),k=[n,s,a,t,e,u,r,o,p,c];if(d&&Uo(k,d),n=k[0],s=k[1],a=k[2],t=k[3],e=k[4],c=k[9]=k[9]===en?l?0:n.length:Fu(k[9]-i,0),!c&&s&(wn|yn)&&(s&=~(wn|yn)),s&&s!=mn)h=s==wn||s==yn?Ge(n,s,c):s!=xn&&s!=(mn|xn)||e.length?Xe.apply(en,k):to(n,s,a,t);else var h=Fe(n,s,a);return Yo((d?gr:Pr)(h,k),n,s)}function uo(n,s,a,t){return n===en||Fc(n,ku[a])&&!vu.call(t,a)?s:n}function ro(n,s,a,t,e,o){return el(n)&&el(s)&&(o.set(s,n),Ut(n,s,en,ro,o),o.delete(s)),n}function ko(n){return kl(n)?en:n}function ho(n,s,a,t,e,o){var p=a&bn,c=n.length,l=s.length;if(c!=l&&!(p&&l>c))return!1;var i=o.get(n);if(i&&o.get(s))return i==s;var u=-1,r=!0,d=a&vn?new ma:en;for(o.set(n,s),o.set(s,n);++u<c;){var k=n[u],h=s[u];if(t)var b=p?t(h,k,u,s,n,o):t(k,h,u,n,s,o);if(b!==en){if(b)continue;r=!1;break}if(d){if(!f(s,function(n,s){if(!O(d,s)&&(k===n||e(k,n,a,t,o)))return d.push(s)})){r=!1;break}}else if(k!==h&&!e(k,h,a,t,o)){r=!1;break}}return o.delete(n),o.delete(s),r}function bo(n,s,a,t,e,o,p){switch(a){case is:if(n.byteLength!=s.byteLength||n.byteOffset!=s.byteOffset)return!1;n=n.buffer,s=s.buffer;case ls:return!(n.byteLength!=s.byteLength||!o(new _u(n),new _u(s)));case Un:case Fn:case Qn:return Fc(+n,+s);case Vn:return n.name==s.name&&n.message==s.message;case ss:case ts:return n==s+"";case Yn:var c=$;case as:var l=t&bn;if(c||(c=G),n.size!=s.size&&!l)return!1;var i=p.get(n);if(i)return i==s;t|=vn,p.set(n,s);var u=ho(c(n),c(s),t,e,o,p);return p.delete(n),u;case es:if(rr)return rr.call(n)==rr.call(s)}return!1}function vo(n,s,a,t,e,o){var p=a&bn,c=go(n),l=c.length;if(l!=go(s).length&&!p)return!1;for(var i=l;i--;){var u=c[i];if(!(p?u in s:vu.call(s,u)))return!1}var r=o.get(n);if(r&&o.get(s))return r==s;var d=!0;o.set(n,s),o.set(s,n);for(var k=p;++i<l;){u=c[i];var h=n[u],b=s[u];if(t)var v=p?t(b,h,u,s,n,o):t(h,b,u,n,s,o);if(!(v===en?h===b||e(h,b,a,t,o):v)){d=!1;break}k||(k="constructor"==u)}if(d&&!k){var m=n.constructor,g=s.constructor;m!=g&&"constructor"in n&&"constructor"in s&&!("function"==typeof m&&m instanceof m&&"function"==typeof g&&g instanceof g)&&(d=!1)}return o.delete(n),o.delete(s),d}function mo(n){return Tr(Vo(n,en,kp),n+"")}function go(n){return mt(n,Wl,qr)}function fo(n){return mt(n,Hl,_r)}function wo(n){for(var s=n.name+"",a=er[s],t=vu.call(er,s)?a.length:0;t--;){var e=a[t],o=e.func;if(null==o||o==n)return e.name}return s}function yo(n){return(vu.call(a,"placeholder")?a:n).placeholder}function xo(){var n=a.iteratee||Mi;return n=n===Mi?Ot:n,arguments.length?n(arguments[0],arguments[1]):n}function jo(n,s){var a=n.__data__;return Io(s)?a["string"==typeof s?"string":"hash"]:a.map}function qo(n){for(var s=Wl(n),a=s.length;a--;){var t=s[a],e=n[t];s[a]=[t,e,Bo(e)]}return s}function _o(n,s){var a=B(n,s);return Rt(a)?a:en}function So(n){var s=vu.call(n,Ru),a=n[Ru];try{n[Ru]=en;var t=!0}catch(n){}var e=fu.call(n);return t&&(s?n[Ru]=a:delete n[Ru]),e}function Co(n,s,a){for(var t=-1,e=a.length;++t<e;){var o=a[t],p=o.size;switch(o.type){case"drop":n+=p;break;case"dropRight":s-=p;break;case"take":s=$u(s,n+p);break;case"takeRight":n=Fu(n,s-p)}}return{start:n,end:s}}function Po(n){var s=n.match(zs);return s?s[1].split(Ws):[]}function Eo(n,s,a){s=je(s,n);for(var t=-1,e=s.length,o=!1;++t<e;){var p=Zo(s[t]);if(!(o=null!=n&&a(n,p)))break;n=n[p]}return o||++t!=e?o:!!(e=null==n?0:n.length)&&tl(e)&&Ao(p,e)&&(vd(n)||bd(n))}function To(n){var s=n.length,a=n.constructor(s);return s&&"string"==typeof n[0]&&vu.call(n,"index")&&(a.index=n.index,a.input=n.input),a}function Mo(n){return"function"!=typeof n.constructor||Ho(n)?{}:kr(Cu(n))}function Do(n,s,a,t){var e=n.constructor;switch(s){case ls:return Se(n);case Un:case Fn:return new e(+n);case is:return Ce(n,t);case us:case rs:case ds:case ks:case hs:case bs:case vs:case ms:case gs:return De(n,t);case Yn:return Pe(n,t,a);case Qn:case ts:return new e(n);case ss:return Ee(n);case as:return Te(n,t,a);case es:return Me(n)}}function Ro(n,s){var a=s.length;if(!a)return n;var t=a-1;return s[t]=(a>1?"& ":"")+s[t],s=s.join(a>2?", ":" "),n.replace(Is,"{\n/* [wrapped with "+s+"] */\n")}function No(n){return vd(n)||bd(n)||!!(Mu&&n&&n[Mu])}function Ao(n,s){return!!(s=null==s?Nn:s)&&("number"==typeof n||Gs.test(n))&&n>-1&&n%1==0&&n<s}function Lo(n,s,a){if(!el(a))return!1;var t=typeof s;return!!("number"==t?$c(a)&&Ao(s,a.length):"string"==t&&s in a)&&Fc(a[s],n)}function Oo(n,s){if(vd(n))return!1;var a=typeof n;return!("number"!=a&&"symbol"!=a&&"boolean"!=a&&null!=n&&!vl(n))||(Ts.test(n)||!Es.test(n)||null!=s&&n in cu(s))}function Io(n){var s=typeof n;return"string"==s||"number"==s||"symbol"==s||"boolean"==s?"__proto__"!==n:null===n}function zo(n){var s=wo(n),t=a[s];if("function"!=typeof t||!(s in w.prototype))return!1;if(n===t)return!0;var e=jr(t);return!!e&&n===e[0]}function Wo(n){return!!gu&&gu in n}function Ho(n){var s=n&&n.constructor;return n===("function"==typeof s&&s.prototype||ku)}function Bo(n){return n===n&&!el(n)}function Jo(n,s){return function(a){return null!=a&&(a[n]===s&&(s!==en||n in cu(a)))}}function Uo(n,s){var a=n[1],t=s[1],e=a|t,o=e<(mn|gn|qn),p=t==qn&&a==wn||t==qn&&a==_n&&n[7].length<=s[8]||t==(qn|_n)&&s[7].length<=s[8]&&a==wn;if(!o&&!p)return n;t&mn&&(n[2]=s[2],e|=a&mn?0:fn);var c=s[3];if(c){var l=n[3];n[3]=l?Ae(l,c,s[4]):c,n[4]=l?K(n[3],rn):s[4]}return c=s[5],c&&(l=n[5],n[5]=l?Le(l,c,s[6]):c,n[6]=l?K(n[5],rn):s[6]),c=s[7],c&&(n[7]=c),t&qn&&(n[8]=null==n[8]?s[8]:$u(n[8],s[8])),null==n[9]&&(n[9]=s[9]),n[0]=s[0],n[1]=e,n}function Fo(n){var s=[];if(null!=n)for(var a in cu(n))s.push(a);return s}function $o(n){return fu.call(n)}function Vo(n,s,a){return s=Fu(s===en?n.length-1:s,0),function(){for(var t=arguments,e=-1,o=Fu(t.length-s,0),p=au(o);++e<o;)p[e]=t[s+e];e=-1;for(var l=au(s+1);++e<s;)l[e]=t[e];return l[s]=a(p),c(n,this,l)}}function Ko(n,s){return s.length<2?n:vt(n,ce(s,0,-1))}function Go(n,s){for(var a=n.length,t=$u(s.length,a),e=Oe(n);t--;){var o=s[t];n[t]=Ao(o,a)?e[o]:en}return n}function Yo(n,s,a){var t=s+"";return Tr(n,Ro(t,sp(Po(t),a)))}function Qo(n){var s=0,a=0;return function(){var t=Vu(),e=Tn-(t-a);if(a=t,e>0){if(++s>=En)return arguments[0]}else s=0;return n.apply(en,arguments)}}function Xo(n,s){var a=-1,t=n.length,e=t-1;for(s=s===en?t:s;++a<s;){var o=Zt(a,e),p=n[o];n[o]=n[a],n[a]=p}return n.length=s,n}function Zo(n){if("string"==typeof n||vl(n))return n;var s=n+"";return"0"==s&&1/n==-Rn?"-0":s}function np(n){if(null!=n){try{return bu.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function sp(n,s){return i(Wn,function(a){var t="_."+a[0];s&a[1]&&!k(n,t)&&n.push(t)}),n.sort()}function ap(n){if(n instanceof w)return n.clone();var s=new e(n.__wrapped__,n.__chain__);return s.__actions__=Oe(n.__actions__),s.__index__=n.__index__,s.__values__=n.__values__,s}function tp(n,s,a){s=(a?Lo(n,s,a):s===en)?1:Fu(xl(s),0);var t=null==n?0:n.length;if(!t||s<1)return[];for(var e=0,o=0,p=au(Iu(t/s));e<t;)p[o++]=ce(n,e,e+=s);return p}function ep(n){for(var s=-1,a=null==n?0:n.length,t=0,e=[];++s<a;){var o=n[s];o&&(e[t++]=o)}return e}function op(){var n=arguments.length;if(!n)return[];for(var s=au(n-1),a=arguments[0],t=n;t--;)s[t-1]=arguments[t];return v(vd(a)?Oe(a):[a],dt(s,1))}function pp(n,s,a){var t=null==n?0:n.length;return t?(s=a||s===en?1:xl(s),ce(n,s<0?0:s,t)):[]}function cp(n,s,a){var t=null==n?0:n.length;return t?(s=a||s===en?1:xl(s),s=t-s,ce(n,0,s<0?0:s)):[]}function lp(n,s){return n&&n.length?me(n,xo(s,3),!0,!0):[]}function ip(n,s){return n&&n.length?me(n,xo(s,3),!0):[]}function up(n,s,a,t){var e=null==n?0:n.length;return e?(a&&"number"!=typeof a&&Lo(n,s,a)&&(a=0,t=e),ut(n,s,a,t)):[]}function rp(n,s,a){var t=null==n?0:n.length;if(!t)return-1;var e=null==a?0:xl(a);return e<0&&(e=Fu(t+e,0)),j(n,xo(s,3),e)}function dp(n,s,a){var t=null==n?0:n.length;if(!t)return-1;var e=t-1;return a!==en&&(e=xl(a),e=a<0?Fu(t+e,0):$u(e,t-1)),j(n,xo(s,3),e,!0)}function kp(n){return(null==n?0:n.length)?dt(n,1):[]}function hp(n){return(null==n?0:n.length)?dt(n,Rn):[]}function bp(n,s){return(null==n?0:n.length)?(s=s===en?1:xl(s),dt(n,s)):[]}function vp(n){for(var s=-1,a=null==n?0:n.length,t={};++s<a;){var e=n[s];t[e[0]]=e[1]}return t}function mp(n){return n&&n.length?n[0]:en}function gp(n,s,a){var t=null==n?0:n.length;if(!t)return-1;var e=null==a?0:xl(a);return e<0&&(e=Fu(t+e,0)),q(n,s,e)}function fp(n){return(null==n?0:n.length)?ce(n,0,-1):[]}function wp(n,s){return null==n?"":Ju.call(n,s)}function yp(n){var s=null==n?0:n.length;return s?n[s-1]:en}function xp(n,s,a){var t=null==n?0:n.length;if(!t)return-1;var e=t;return a!==en&&(e=xl(a),e=e<0?Fu(t+e,0):$u(e,t-1)),s===s?X(n,s,e):j(n,S,e,!0)}function jp(n,s){return n&&n.length?$t(n,xl(s)):en}function qp(n,s){return n&&n.length&&s&&s.length?Qt(n,s):n}function _p(n,s,a){return n&&n.length&&s&&s.length?Qt(n,s,xo(a,2)):n}function Sp(n,s,a){return n&&n.length&&s&&s.length?Qt(n,s,en,a):n}function Cp(n,s){var a=[];if(!n||!n.length)return a;var t=-1,e=[],o=n.length;for(s=xo(s,3);++t<o;){var p=n[t];s(p,t,n)&&(a.push(p),e.push(t))}return Xt(n,e),a}function Pp(n){return null==n?n:Yu.call(n)}function Ep(n,s,a){var t=null==n?0:n.length;return t?(a&&"number"!=typeof a&&Lo(n,s,a)?(s=0,a=t):(s=null==s?0:xl(s),a=a===en?t:xl(a)),ce(n,s,a)):[]}function Tp(n,s){return ie(n,s)}function Mp(n,s,a){return ue(n,s,xo(a,2))}function Dp(n,s){var a=null==n?0:n.length;if(a){var t=ie(n,s);if(t<a&&Fc(n[t],s))return t}return-1}function Rp(n,s){return ie(n,s,!0)}function Np(n,s,a){return ue(n,s,xo(a,2),!0)}function Ap(n,s){if(null==n?0:n.length){var a=ie(n,s,!0)-1;if(Fc(n[a],s))return a}return-1}function Lp(n){return n&&n.length?re(n):[]}function Op(n,s){return n&&n.length?re(n,xo(s,2)):[]}function Ip(n){var s=null==n?0:n.length;return s?ce(n,1,s):[]}function zp(n,s,a){return n&&n.length?(s=a||s===en?1:xl(s),ce(n,0,s<0?0:s)):[]}function Wp(n,s,a){var t=null==n?0:n.length;return t?(s=a||s===en?1:xl(s),s=t-s,ce(n,s<0?0:s,t)):[]}function Hp(n,s){return n&&n.length?me(n,xo(s,3),!1,!0):[]}function Bp(n,s){return n&&n.length?me(n,xo(s,3)):[]}function Jp(n){return n&&n.length?he(n):[]}function Up(n,s){return n&&n.length?he(n,xo(s,2)):[]}function Fp(n,s){return s="function"==typeof s?s:en,n&&n.length?he(n,en,s):[]}function $p(n){if(!n||!n.length)return[];var s=0;return n=d(n,function(n){if(Vc(n))return s=Fu(n.length,s),!0}),R(s,function(s){return b(n,P(s))})}function Vp(n,s){if(!n||!n.length)return[];var a=$p(n);return null==s?a:b(a,function(n){return c(s,en,n)})}function Kp(n,s){return we(n||[],s||[],Fa)}function Gp(n,s){return we(n||[],s||[],oe)}function Yp(n){var s=a(n);return s.__chain__=!0,s}function Qp(n,s){return s(n),n}function Xp(n,s){return s(n)}function Zp(){return Yp(this)}function nc(){return new e(this.value(),this.__chain__)}function sc(){this.__values__===en&&(this.__values__=wl(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?en:this.__values__[this.__index__++]}}function ac(){return this}function tc(n){for(var s,a=this;a instanceof t;){var e=ap(a);e.__index__=0,e.__values__=en,s?o.__wrapped__=e:s=e;var o=e;a=a.__wrapped__}return o.__wrapped__=n,s}function ec(){var n=this.__wrapped__;if(n instanceof w){var s=n;return this.__actions__.length&&(s=new w(this)),s=s.reverse(),s.__actions__.push({func:Xp,args:[Pp],thisArg:en}),new e(s,this.__chain__)}return this.thru(Pp)}function oc(){return ge(this.__wrapped__,this.__actions__)}function pc(n,s,a){var t=vd(n)?r:lt;return a&&Lo(n,s,a)&&(s=en),t(n,xo(s,3))}function cc(n,s){return(vd(n)?d:rt)(n,xo(s,3))}function lc(n,s){return dt(hc(n,s),1)}function ic(n,s){return dt(hc(n,s),Rn)}function uc(n,s,a){return a=a===en?1:xl(a),dt(hc(n,s),a)}function rc(n,s){return(vd(n)?i:hr)(n,xo(s,3))}function dc(n,s){return(vd(n)?u:br)(n,xo(s,3))}function kc(n,s,a,t){n=$c(n)?n:Zl(n),a=a&&!t?xl(a):0;var e=n.length;return a<0&&(a=Fu(e+a,0)),bl(n)?a<=e&&n.indexOf(s,a)>-1:!!e&&q(n,s,a)>-1}function hc(n,s){return(vd(n)?b:Ht)(n,xo(s,3))}function bc(n,s,a,t){return null==n?[]:(vd(s)||(s=null==s?[]:[s]),a=t?en:a,vd(a)||(a=null==a?[]:[a]),Vt(n,s,a))}function vc(n,s,a){var t=vd(n)?m:T,e=arguments.length<3;return t(n,xo(s,4),a,e,hr)}function mc(n,s,a){var t=vd(n)?g:T,e=arguments.length<3;return t(n,xo(s,4),a,e,br)}function gc(n,s){return(vd(n)?d:rt)(n,Dc(xo(s,3)))}function fc(n){return(vd(n)?Na:te)(n)}function wc(n,s,a){return s=(a?Lo(n,s,a):s===en)?1:xl(s),(vd(n)?Aa:ee)(n,s)}function yc(n){return(vd(n)?Oa:pe)(n)}function xc(n){if(null==n)return 0;if($c(n))return bl(n)?Z(n):n.length;var s=Sr(n);return s==Yn||s==as?n.size:It(n).length}function jc(n,s,a){var t=vd(n)?f:le;return a&&Lo(n,s,a)&&(s=en),t(n,xo(s,3))}function qc(n,s){if("function"!=typeof s)throw new uu(cn);return n=xl(n),function(){if(--n<1)return s.apply(this,arguments)}}function _c(n,s,a){return s=a?en:s,s=n&&null==s?n.length:s,io(n,qn,en,en,en,en,s)}function Sc(n,s){var a;if("function"!=typeof s)throw new uu(cn);return n=xl(n),function(){return--n>0&&(a=s.apply(this,arguments)),n<=1&&(s=en),a}}function Cc(n,s,a){s=a?en:s;var t=io(n,wn,en,en,en,en,en,s);return t.placeholder=Cc.placeholder,t}function Pc(n,s,a){s=a?en:s;var t=io(n,yn,en,en,en,en,en,s);return t.placeholder=Pc.placeholder,t}function Ec(n,s,a){function t(s){var a=d,t=k;return d=k=en,g=s,b=n.apply(t,a)}function e(n){return g=n,v=Er(c,s),f?t(n):b}function o(n){var a=n-m,t=n-g,e=s-a;return w?$u(e,h-t):e}function p(n){var a=n-m,t=n-g;return m===en||a>=s||a<0||w&&t>=h}function c(){var n=ed();if(p(n))return l(n);v=Er(c,o(n))}function l(n){return v=en,y&&d?t(n):(d=k=en,b)}function i(){v!==en&&yr(v),g=0,d=m=k=v=en}function u(){return v===en?b:l(ed())}function r(){var n=ed(),a=p(n);if(d=arguments,k=this,m=n,a){if(v===en)return e(m);if(w)return v=Er(c,s),t(m)}return v===en&&(v=Er(c,s)),b}var d,k,h,b,v,m,g=0,f=!1,w=!1,y=!0;if("function"!=typeof n)throw new uu(cn);return s=ql(s)||0,el(a)&&(f=!!a.leading,w="maxWait"in a,h=w?Fu(ql(a.maxWait)||0,s):h,y="trailing"in a?!!a.trailing:y),r.cancel=i,r.flush=u,r}function Tc(n){return io(n,Sn)}function Mc(n,s){if("function"!=typeof n||null!=s&&"function"!=typeof s)throw new uu(cn);var a=function(){var t=arguments,e=s?s.apply(this,t):t[0],o=a.cache;if(o.has(e))return o.get(e);var p=n.apply(this,t);return a.cache=o.set(e,p)||o,p};return a.cache=new(Mc.Cache||ia),a}function Dc(n){if("function"!=typeof n)throw new uu(cn);return function(){var s=arguments;switch(s.length){case 0:return!n.call(this);case 1:return!n.call(this,s[0]);case 2:return!n.call(this,s[0],s[1]);case 3:return!n.call(this,s[0],s[1],s[2])}return!n.apply(this,s)}}function Rc(n){return Sc(2,n)}function Nc(n,s){if("function"!=typeof n)throw new uu(cn);return s=s===en?s:xl(s),ae(n,s)}function Ac(n,s){if("function"!=typeof n)throw new uu(cn);return s=null==s?0:Fu(xl(s),0),ae(function(a){var t=a[s],e=qe(a,0,s);return t&&v(e,t),c(n,this,e)})}function Lc(n,s,a){var t=!0,e=!0;if("function"!=typeof n)throw new uu(cn);return el(a)&&(t="leading"in a?!!a.leading:t,e="trailing"in a?!!a.trailing:e),Ec(n,s,{leading:t,maxWait:s,trailing:e})}function Oc(n){return _c(n,1)}function Ic(n,s){return ud(xe(s),n)}function zc(){if(!arguments.length)return[];var n=arguments[0];return vd(n)?n:[n]}function Wc(n){return tt(n,hn)}function Hc(n,s){return s="function"==typeof s?s:en,tt(n,hn,s)}function Bc(n){return tt(n,dn|hn)}function Jc(n,s){return s="function"==typeof s?s:en,tt(n,dn|hn,s)}function Uc(n,s){return null==s||ot(n,s,Wl(s))}function Fc(n,s){return n===s||n!==n&&s!==s}function $c(n){return null!=n&&tl(n.length)&&!sl(n)}function Vc(n){return ol(n)&&$c(n)}function Kc(n){return!0===n||!1===n||ol(n)&&gt(n)==Un}function Gc(n){return ol(n)&&1===n.nodeType&&!kl(n)}function Yc(n){if(null==n)return!0;if($c(n)&&(vd(n)||"string"==typeof n||"function"==typeof n.splice||gd(n)||jd(n)||bd(n)))return!n.length;var s=Sr(n);if(s==Yn||s==as)return!n.size;if(Ho(n))return!It(n).length;for(var a in n)if(vu.call(n,a))return!1;return!0}function Qc(n,s){return Et(n,s)}function Xc(n,s,a){a="function"==typeof a?a:en;var t=a?a(n,s):en;return t===en?Et(n,s,en,a):!!t}function Zc(n){if(!ol(n))return!1;var s=gt(n);return s==Vn||s==$n||"string"==typeof n.message&&"string"==typeof n.name&&!kl(n)}function nl(n){return"number"==typeof n&&Bu(n)}function sl(n){if(!el(n))return!1;var s=gt(n);return s==Kn||s==Gn||s==Jn||s==ns}function al(n){return"number"==typeof n&&n==xl(n)}function tl(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=Nn}function el(n){var s=typeof n;return null!=n&&("object"==s||"function"==s)}function ol(n){return null!=n&&"object"==typeof n}function pl(n,s){return n===s||Dt(n,s,qo(s))}function cl(n,s,a){return a="function"==typeof a?a:en,Dt(n,s,qo(s),a)}function ll(n){return dl(n)&&n!=+n}function il(n){if(Cr(n))throw new eu(pn);return Rt(n)}function ul(n){return null===n}function rl(n){return null==n}function dl(n){return"number"==typeof n||ol(n)&&gt(n)==Qn}function kl(n){if(!ol(n)||gt(n)!=Zn)return!1;var s=Cu(n);if(null===s)return!0;var a=vu.call(s,"constructor")&&s.constructor;return"function"==typeof a&&a instanceof a&&bu.call(a)==wu}function hl(n){return al(n)&&n>=-Nn&&n<=Nn}function bl(n){return"string"==typeof n||!vd(n)&&ol(n)&&gt(n)==ts}function vl(n){return"symbol"==typeof n||ol(n)&&gt(n)==es}function ml(n){return n===en}function gl(n){return ol(n)&&Sr(n)==ps}function fl(n){return ol(n)&&gt(n)==cs}function wl(n){if(!n)return[];if($c(n))return bl(n)?nn(n):Oe(n);if(Du&&n[Du])return F(n[Du]());var s=Sr(n);return(s==Yn?$:s==as?G:Zl)(n)}function yl(n){if(!n)return 0===n?n:0;if((n=ql(n))===Rn||n===-Rn){return(n<0?-1:1)*An}return n===n?n:0}function xl(n){var s=yl(n),a=s%1;return s===s?a?s-a:s:0}function jl(n){return n?at(xl(n),0,On):0}function ql(n){if("number"==typeof n)return n;if(vl(n))return Ln;if(el(n)){var s="function"==typeof n.valueOf?n.valueOf():n;n=el(s)?s+"":s}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(As,"");var a=$s.test(n);return a||Ks.test(n)?Ta(n.slice(2),a?2:8):Fs.test(n)?Ln:+n}function _l(n){return Ie(n,Hl(n))}function Sl(n){return n?at(xl(n),-Nn,Nn):0===n?n:0}function Cl(n){return null==n?"":ke(n)}function Pl(n,s){var a=kr(n);return null==s?a:Xa(a,s)}function El(n,s){return x(n,xo(s,3),kt)}function Tl(n,s){return x(n,xo(s,3),ht)}function Ml(n,s){return null==n?n:vr(n,xo(s,3),Hl)}function Dl(n,s){return null==n?n:mr(n,xo(s,3),Hl)}function Rl(n,s){return n&&kt(n,xo(s,3))}function Nl(n,s){return n&&ht(n,xo(s,3))}function Al(n){return null==n?[]:bt(n,Wl(n))}function Ll(n){return null==n?[]:bt(n,Hl(n))}function Ol(n,s,a){var t=null==n?en:vt(n,s);return t===en?a:t}function Il(n,s){return null!=n&&Eo(n,s,wt)}function zl(n,s){return null!=n&&Eo(n,s,yt)}function Wl(n){return $c(n)?Da(n):It(n)}function Hl(n){return $c(n)?Da(n,!0):zt(n)}function Bl(n,s){var a={};return s=xo(s,3),kt(n,function(n,t,e){nt(a,s(n,t,e),n)}),a}function Jl(n,s){var a={};return s=xo(s,3),kt(n,function(n,t,e){nt(a,t,s(n,t,e))}),a}function Ul(n,s){return Fl(n,Dc(xo(s)))}function Fl(n,s){if(null==n)return{};var a=b(fo(n),function(n){return[n]});return s=xo(s),Gt(n,a,function(n,a){return s(n,a[0])})}function $l(n,s,a){s=je(s,n);var t=-1,e=s.length;for(e||(e=1,n=en);++t<e;){var o=null==n?en:n[Zo(s[t])];o===en&&(t=e,o=a),n=sl(o)?o.call(n):o}return n}function Vl(n,s,a){return null==n?n:oe(n,s,a)}function Kl(n,s,a,t){return t="function"==typeof t?t:en,null==n?n:oe(n,s,a,t)}function Gl(n,s,a){var t=vd(n),e=t||gd(n)||jd(n);if(s=xo(s,4),null==a){var o=n&&n.constructor;a=e?t?new o:[]:el(n)&&sl(o)?kr(Cu(n)):{}}return(e?i:kt)(n,function(n,t,e){return s(a,n,t,e)}),a}function Yl(n,s){return null==n||be(n,s)}function Ql(n,s,a){return null==n?n:ve(n,s,xe(a))}function Xl(n,s,a,t){return t="function"==typeof t?t:en,null==n?n:ve(n,s,xe(a),t)}function Zl(n){return null==n?[]:L(n,Wl(n))}function ni(n){return null==n?[]:L(n,Hl(n))}function si(n,s,a){return a===en&&(a=s,s=en),a!==en&&(a=ql(a),a=a===a?a:0),s!==en&&(s=ql(s),s=s===s?s:0),at(ql(n),s,a)}function ai(n,s,a){return s=yl(s),a===en?(a=s,s=0):a=yl(a),n=ql(n),xt(n,s,a)}function ti(n,s,a){if(a&&"boolean"!=typeof a&&Lo(n,s,a)&&(s=a=en),a===en&&("boolean"==typeof s?(a=s,s=en):"boolean"==typeof n&&(a=n,n=en)),n===en&&s===en?(n=0,s=1):(n=yl(n),s===en?(s=n,n=0):s=yl(s)),n>s){var t=n;n=s,s=t}if(a||n%1||s%1){var e=Gu();return $u(n+e*(s-n+Ea("1e-"+((e+"").length-1))),s)}return Zt(n,s)}function ei(n){return Gd(Cl(n).toLowerCase())}function oi(n){return(n=Cl(n))&&n.replace(Ys,$a).replace(va,"")}function pi(n,s,a){n=Cl(n),s=ke(s);var t=n.length;a=a===en?t:at(xl(a),0,t);var e=a;return(a-=s.length)>=0&&n.slice(a,e)==s}function ci(n){return n=Cl(n),n&&_s.test(n)?n.replace(js,Va):n}function li(n){return n=Cl(n),n&&Ns.test(n)?n.replace(Rs,"\\$&"):n}function ii(n,s,a){n=Cl(n),s=xl(s);var t=s?Z(n):0;if(!s||t>=s)return n;var e=(s-t)/2;return ao(zu(e),a)+n+ao(Iu(e),a)}function ui(n,s,a){n=Cl(n),s=xl(s);var t=s?Z(n):0;return s&&t<s?n+ao(s-t,a):n}function ri(n,s,a){n=Cl(n),s=xl(s);var t=s?Z(n):0;return s&&t<s?ao(s-t,a)+n:n}function di(n,s,a){return a||null==s?s=0:s&&(s=+s),Ku(Cl(n).replace(Ls,""),s||0)}function ki(n,s,a){return s=(a?Lo(n,s,a):s===en)?1:xl(s),se(Cl(n),s)}function hi(){var n=arguments,s=Cl(n[0]);return n.length<3?s:s.replace(n[1],n[2])}function bi(n,s,a){return a&&"number"!=typeof a&&Lo(n,s,a)&&(s=a=en),(a=a===en?On:a>>>0)?(n=Cl(n),n&&("string"==typeof s||null!=s&&!yd(s))&&!(s=ke(s))&&J(n)?qe(nn(n),0,a):n.split(s,a)):[]}function vi(n,s,a){return n=Cl(n),a=null==a?0:at(xl(a),0,n.length),s=ke(s),n.slice(a,a+s.length)==s}function mi(n,s,t){var e=a.templateSettings;t&&Lo(n,s,t)&&(s=en),n=Cl(n),s=Pd({},s,e,uo);var o,p,c=Pd({},s.imports,e.imports,uo),l=Wl(c),i=L(c,l),u=0,r=s.interpolate||Qs,d="__p += '",k=lu((s.escape||Qs).source+"|"+r.source+"|"+(r===Ps?Js:Qs).source+"|"+(s.evaluate||Qs).source+"|$","g"),h="//# sourceURL="+("sourceURL"in s?s.sourceURL:"lodash.templateSources["+ ++xa+"]")+"\n";n.replace(k,function(s,a,t,e,c,l){return t||(t=e),d+=n.slice(u,l).replace(Xs,H),a&&(o=!0,d+="' +\n__e("+a+") +\n'"),c&&(p=!0,d+="';\n"+c+";\n__p += '"),t&&(d+="' +\n((__t = ("+t+")) == null ? '' : __t) +\n'"),u=l+s.length,s}),d+="';\n";var b=s.variable;b||(d="with (obj) {\n"+d+"\n}\n"),d=(p?d.replace(fs,""):d).replace(ws,"$1").replace(ys,"$1;"),d="function("+(b||"obj")+") {\n"+(b?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(p?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var v=Yd(function(){return ou(l,h+"return "+d).apply(en,i)});if(v.source=d,Zc(v))throw v;return v}function gi(n){return Cl(n).toLowerCase()}function fi(n){return Cl(n).toUpperCase()}function wi(n,s,a){if((n=Cl(n))&&(a||s===en))return n.replace(As,"");if(!n||!(s=ke(s)))return n;var t=nn(n),e=nn(s);return qe(t,I(t,e),z(t,e)+1).join("")}function yi(n,s,a){if((n=Cl(n))&&(a||s===en))return n.replace(Os,"");if(!n||!(s=ke(s)))return n;var t=nn(n);return qe(t,0,z(t,nn(s))+1).join("")}function xi(n,s,a){if((n=Cl(n))&&(a||s===en))return n.replace(Ls,"");if(!n||!(s=ke(s)))return n;var t=nn(n);return qe(t,I(t,nn(s))).join("")}function ji(n,s){var a=Cn,t=Pn;if(el(s)){var e="separator"in s?s.separator:e;a="length"in s?xl(s.length):a,t="omission"in s?ke(s.omission):t}n=Cl(n);var o=n.length;if(J(n)){var p=nn(n);o=p.length}if(a>=o)return n;var c=a-Z(t);if(c<1)return t;var l=p?qe(p,0,c).join(""):n.slice(0,c);if(e===en)return l+t;if(p&&(c+=l.length-c),yd(e)){if(n.slice(c).search(e)){var i,u=l;for(e.global||(e=lu(e.source,Cl(Us.exec(e))+"g")),e.lastIndex=0;i=e.exec(u);)var r=i.index;l=l.slice(0,r===en?c:r)}}else if(n.indexOf(ke(e),c)!=c){var d=l.lastIndexOf(e);d>-1&&(l=l.slice(0,d))}return l+t}function qi(n){return n=Cl(n),n&&qs.test(n)?n.replace(xs,Ka):n}function _i(n,s,a){return n=Cl(n),s=a?en:s,s===en?U(n)?tn(n):y(n):n.match(s)||[]}function Si(n){var s=null==n?0:n.length,a=xo();return n=s?b(n,function(n){if("function"!=typeof n[1])throw new uu(cn);return[a(n[0]),n[1]]}):[],ae(function(a){for(var t=-1;++t<s;){var e=n[t];if(c(e[0],this,a))return c(e[1],this,a)}})}function Ci(n){return et(tt(n,dn))}function Pi(n){return function(){return n}}function Ei(n,s){return null==n||n!==n?s:n}function Ti(n){return n}function Mi(n){return Ot("function"==typeof n?n:tt(n,dn))}function Di(n){return Bt(tt(n,dn))}function Ri(n,s){return Jt(n,tt(s,dn))}function Ni(n,s,a){var t=Wl(s),e=bt(s,t);null!=a||el(s)&&(e.length||!t.length)||(a=s,s=n,n=this,e=bt(s,Wl(s)));var o=!(el(a)&&"chain"in a&&!a.chain),p=sl(n);return i(e,function(a){var t=s[a];n[a]=t,p&&(n.prototype[a]=function(){var s=this.__chain__;if(o||s){var a=n(this.__wrapped__);return(a.__actions__=Oe(this.__actions__)).push({func:t,args:arguments,thisArg:n}),a.__chain__=s,a}return t.apply(n,v([this.value()],arguments))})}),n}function Ai(){return Ra._===this&&(Ra._=yu),this}function Li(){}function Oi(n){return n=xl(n),ae(function(s){return $t(s,n)})}function Ii(n){return Oo(n)?P(Zo(n)):Yt(n)}function zi(n){return function(s){return null==n?en:vt(n,s)}}function Wi(){return[]}function Hi(){return!1}function Bi(){return{}}function Ji(){return""}function Ui(){return!0}function Fi(n,s){if((n=xl(n))<1||n>Nn)return[];var a=On,t=$u(n,On);s=xo(s),n-=On;for(var e=R(t,s);++a<n;)s(a);return e}function $i(n){return vd(n)?b(n,Zo):vl(n)?[n]:Oe(Mr(Cl(n)))}function Vi(n){var s=++mu;return Cl(n)+s}function Ki(n){return n&&n.length?it(n,Ti,ft):en}function Gi(n,s){return n&&n.length?it(n,xo(s,2),ft):en}function Yi(n){return C(n,Ti)}function Qi(n,s){return C(n,xo(s,2))}function Xi(n){return n&&n.length?it(n,Ti,Wt):en}function Zi(n,s){return n&&n.length?it(n,xo(s,2),Wt):en}function nu(n){return n&&n.length?D(n,Ti):0}function su(n,s){return n&&n.length?D(n,xo(s,2)):0}s=null==s?Ra:Ga.defaults(Ra.Object(),s,Ga.pick(Ra,ya));var au=s.Array,tu=s.Date,eu=s.Error,ou=s.Function,pu=s.Math,cu=s.Object,lu=s.RegExp,iu=s.String,uu=s.TypeError,ru=au.prototype,du=ou.prototype,ku=cu.prototype,hu=s["__core-js_shared__"],bu=du.toString,vu=ku.hasOwnProperty,mu=0,gu=function(){var n=/[^.]+$/.exec(hu&&hu.keys&&hu.keys.IE_PROTO||"");return n?"Symbol(src)_1."+n:""}(),fu=ku.toString,wu=bu.call(cu),yu=Ra._,xu=lu("^"+bu.call(vu).replace(Rs,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ju=La?s.Buffer:en,qu=s.Symbol,_u=s.Uint8Array,Su=ju?ju.allocUnsafe:en,Cu=V(cu.getPrototypeOf,cu),Pu=cu.create,Eu=ku.propertyIsEnumerable,Tu=ru.splice,Mu=qu?qu.isConcatSpreadable:en,Du=qu?qu.iterator:en,Ru=qu?qu.toStringTag:en,Nu=function(){try{var n=_o(cu,"defineProperty");return n({},"",{}),n}catch(n){}}(),Au=s.clearTimeout!==Ra.clearTimeout&&s.clearTimeout,Lu=tu&&tu.now!==Ra.Date.now&&tu.now,Ou=s.setTimeout!==Ra.setTimeout&&s.setTimeout,Iu=pu.ceil,zu=pu.floor,Wu=cu.getOwnPropertySymbols,Hu=ju?ju.isBuffer:en,Bu=s.isFinite,Ju=ru.join,Uu=V(cu.keys,cu),Fu=pu.max,$u=pu.min,Vu=tu.now,Ku=s.parseInt,Gu=pu.random,Yu=ru.reverse,Qu=_o(s,"DataView"),Xu=_o(s,"Map"),Zu=_o(s,"Promise"),nr=_o(s,"Set"),sr=_o(s,"WeakMap"),ar=_o(cu,"create"),tr=sr&&new sr,er={},or=np(Qu),pr=np(Xu),cr=np(Zu),lr=np(nr),ir=np(sr),ur=qu?qu.prototype:en,rr=ur?ur.valueOf:en,dr=ur?ur.toString:en,kr=function(){function n(){}return function(s){if(!el(s))return{};if(Pu)return Pu(s);n.prototype=s;var a=new n;return n.prototype=en,a}}();a.templateSettings={escape:Ss,evaluate:Cs,interpolate:Ps,variable:"",imports:{_:a}},a.prototype=t.prototype,a.prototype.constructor=a,e.prototype=kr(t.prototype),e.prototype.constructor=e,w.prototype=kr(t.prototype),w.prototype.constructor=w,an.prototype.clear=Hs,an.prototype.delete=Zs,an.prototype.get=na,an.prototype.has=sa,an.prototype.set=aa,ta.prototype.clear=ea,ta.prototype.delete=oa,ta.prototype.get=pa,ta.prototype.has=ca,ta.prototype.set=la,ia.prototype.clear=ua,ia.prototype.delete=ra,ia.prototype.get=da,ia.prototype.has=ka,ia.prototype.set=ha,ma.prototype.add=ma.prototype.push=ga,ma.prototype.has=fa,wa.prototype.clear=_a,wa.prototype.delete=Sa,wa.prototype.get=Ca,wa.prototype.has=Pa,wa.prototype.set=Ma;var hr=Je(kt),br=Je(ht,!0),vr=Ue(),mr=Ue(!0),gr=tr?function(n,s){return tr.set(n,s),n}:Ti,fr=Nu?function(n,s){return Nu(n,"toString",{configurable:!0,enumerable:!1,value:Pi(s),writable:!0})}:Ti,wr=ae,yr=Au||function(n){return Ra.clearTimeout(n)},xr=nr&&1/G(new nr([,-0]))[1]==Rn?function(n){return new nr(n)}:Li,jr=tr?function(n){return tr.get(n)}:Li,qr=Wu?function(n){return null==n?[]:(n=cu(n),d(Wu(n),function(s){return Eu.call(n,s)}))}:Wi,_r=Wu?function(n){for(var s=[];n;)v(s,qr(n)),n=Cu(n);return s}:Wi,Sr=gt;(Qu&&Sr(new Qu(new ArrayBuffer(1)))!=is||Xu&&Sr(new Xu)!=Yn||Zu&&"[object Promise]"!=Sr(Zu.resolve())||nr&&Sr(new nr)!=as||sr&&Sr(new sr)!=ps)&&(Sr=function(n){var s=gt(n),a=s==Zn?n.constructor:en,t=a?np(a):"";if(t)switch(t){case or:return is;case pr:return Yn;case cr:return"[object Promise]";case lr:return as;case ir:return ps}return s});var Cr=hu?sl:Hi,Pr=Qo(gr),Er=Ou||function(n,s){return Ra.setTimeout(n,s)},Tr=Qo(fr),Mr=function(n){var s=Mc(n,function(n){return a.size===un&&a.clear(),n}),a=s.cache;return s}(function(n){var s=[];return Ms.test(n)&&s.push(""),n.replace(Ds,function(n,a,t,e){s.push(t?e.replace(Bs,"$1"):a||n)}),s}),Dr=ae(function(n,s){return Vc(n)?ct(n,dt(s,1,Vc,!0)):[]}),Rr=ae(function(n,s){var a=yp(s);return Vc(a)&&(a=en),Vc(n)?ct(n,dt(s,1,Vc,!0),xo(a,2)):[]}),Nr=ae(function(n,s){var a=yp(s);return Vc(a)&&(a=en),Vc(n)?ct(n,dt(s,1,Vc,!0),en,a):[]}),Ar=ae(function(n){var s=b(n,ye);return s.length&&s[0]===n[0]?jt(s):[]}),Lr=ae(function(n){var s=yp(n),a=b(n,ye);return s===yp(a)?s=en:a.pop(),a.length&&a[0]===n[0]?jt(a,xo(s,2)):[]}),Or=ae(function(n){var s=yp(n),a=b(n,ye);return s="function"==typeof s?s:en,s&&a.pop(),a.length&&a[0]===n[0]?jt(a,en,s):[]}),Ir=ae(qp),zr=mo(function(n,s){var a=null==n?0:n.length,t=st(n,s);return Xt(n,b(s,function(n){return Ao(n,a)?+n:n}).sort(Re)),t}),Wr=ae(function(n){return he(dt(n,1,Vc,!0))}),Hr=ae(function(n){var s=yp(n);return Vc(s)&&(s=en),he(dt(n,1,Vc,!0),xo(s,2))}),Br=ae(function(n){var s=yp(n);return s="function"==typeof s?s:en,he(dt(n,1,Vc,!0),en,s)}),Jr=ae(function(n,s){return Vc(n)?ct(n,s):[]}),Ur=ae(function(n){return fe(d(n,Vc))}),Fr=ae(function(n){var s=yp(n);return Vc(s)&&(s=en),fe(d(n,Vc),xo(s,2))}),$r=ae(function(n){var s=yp(n);return s="function"==typeof s?s:en,fe(d(n,Vc),en,s)}),Vr=ae($p),Kr=ae(function(n){var s=n.length,a=s>1?n[s-1]:en;return a="function"==typeof a?(n.pop(),a):en,Vp(n,a)}),Gr=mo(function(n){var s=n.length,a=s?n[0]:0,t=this.__wrapped__,o=function(s){return st(s,n)};return!(s>1||this.__actions__.length)&&t instanceof w&&Ao(a)?(t=t.slice(a,+a+(s?1:0)),t.__actions__.push({func:Xp,args:[o],thisArg:en}),new e(t,this.__chain__).thru(function(n){return s&&!n.length&&n.push(en),n})):this.thru(o)}),Yr=He(function(n,s,a){vu.call(n,a)?++n[a]:nt(n,a,1)}),Qr=Ye(rp),Xr=Ye(dp),Zr=He(function(n,s,a){vu.call(n,a)?n[a].push(s):nt(n,a,[s])}),nd=ae(function(n,s,a){var t=-1,e="function"==typeof s,o=$c(n)?au(n.length):[];return hr(n,function(n){o[++t]=e?c(s,n,a):_t(n,s,a)}),o}),sd=He(function(n,s,a){nt(n,a,s)}),ad=He(function(n,s,a){n[a?0:1].push(s)},function(){return[[],[]]}),td=ae(function(n,s){if(null==n)return[];var a=s.length;return a>1&&Lo(n,s[0],s[1])?s=[]:a>2&&Lo(s[0],s[1],s[2])&&(s=[s[0]]),Vt(n,dt(s,1),[])}),ed=Lu||function(){return Ra.Date.now()},od=ae(function(n,s,a){var t=mn;if(a.length){var e=K(a,yo(od));t|=xn}return io(n,t,s,a,e)}),pd=ae(function(n,s,a){var t=mn|gn;if(a.length){var e=K(a,yo(pd));t|=xn}return io(s,t,n,a,e)}),cd=ae(function(n,s){return pt(n,1,s)}),ld=ae(function(n,s,a){return pt(n,ql(s)||0,a)});Mc.Cache=ia;var id=wr(function(n,s){s=1==s.length&&vd(s[0])?b(s[0],A(xo())):b(dt(s,1),A(xo()));var a=s.length;return ae(function(t){for(var e=-1,o=$u(t.length,a);++e<o;)t[e]=s[e].call(this,t[e]);return c(n,this,t)})}),ud=ae(function(n,s){var a=K(s,yo(ud));return io(n,xn,en,s,a)}),rd=ae(function(n,s){var a=K(s,yo(rd));return io(n,jn,en,s,a)}),dd=mo(function(n,s){return io(n,_n,en,en,en,s)}),kd=oo(ft),hd=oo(function(n,s){return n>=s}),bd=St(function(){return arguments}())?St:function(n){return ol(n)&&vu.call(n,"callee")&&!Eu.call(n,"callee")},vd=au.isArray,md=za?A(za):Ct,gd=Hu||Hi,fd=Wa?A(Wa):Pt,wd=Ha?A(Ha):Mt,yd=Ba?A(Ba):Nt,xd=Ja?A(Ja):At,jd=Ua?A(Ua):Lt,qd=oo(Wt),_d=oo(function(n,s){return n<=s}),Sd=Be(function(n,s){if(Ho(s)||$c(s))return void Ie(s,Wl(s),n);for(var a in s)vu.call(s,a)&&Fa(n,a,s[a])}),Cd=Be(function(n,s){Ie(s,Hl(s),n)}),Pd=Be(function(n,s,a,t){Ie(s,Hl(s),n,t)}),Ed=Be(function(n,s,a,t){Ie(s,Wl(s),n,t)}),Td=mo(st),Md=ae(function(n){return n.push(en,uo),c(Pd,en,n)}),Dd=ae(function(n){return n.push(en,ro),c(Od,en,n)}),Rd=Ze(function(n,s,a){n[s]=a},Pi(Ti)),Nd=Ze(function(n,s,a){vu.call(n,s)?n[s].push(a):n[s]=[a]},xo),Ad=ae(_t),Ld=Be(function(n,s,a){Ut(n,s,a)}),Od=Be(function(n,s,a,t){Ut(n,s,a,t)}),Id=mo(function(n,s){var a={};if(null==n)return a;var t=!1;s=b(s,function(s){return s=je(s,n),t||(t=s.length>1),s}),Ie(n,fo(n),a),t&&(a=tt(a,dn|kn|hn,ko));for(var e=s.length;e--;)be(a,s[e]);return a}),zd=mo(function(n,s){return null==n?{}:Kt(n,s)}),Wd=lo(Wl),Hd=lo(Hl),Bd=Ve(function(n,s,a){return s=s.toLowerCase(),n+(a?ei(s):s)}),Jd=Ve(function(n,s,a){return n+(a?"-":"")+s.toLowerCase()}),Ud=Ve(function(n,s,a){return n+(a?" ":"")+s.toLowerCase()}),Fd=$e("toLowerCase"),$d=Ve(function(n,s,a){return n+(a?"_":"")+s.toLowerCase()}),Vd=Ve(function(n,s,a){return n+(a?" ":"")+Gd(s)}),Kd=Ve(function(n,s,a){return n+(a?" ":"")+s.toUpperCase()}),Gd=$e("toUpperCase"),Yd=ae(function(n,s){try{return c(n,en,s)}catch(n){return Zc(n)?n:new eu(n)}}),Qd=mo(function(n,s){return i(s,function(s){s=Zo(s),nt(n,s,od(n[s],n))}),n}),Xd=Qe(),Zd=Qe(!0),nk=ae(function(n,s){return function(a){return _t(a,n,s)}}),sk=ae(function(n,s){return function(a){return _t(n,a,s)}}),ak=so(b),tk=so(r),ek=so(f),ok=eo(),pk=eo(!0),ck=no(function(n,s){return n+s},0),lk=co("ceil"),ik=no(function(n,s){return n/s},1),uk=co("floor"),rk=no(function(n,s){return n*s},1),dk=co("round"),kk=no(function(n,s){return n-s},0);return a.after=qc,a.ary=_c,a.assign=Sd,a.assignIn=Cd,a.assignInWith=Pd,a.assignWith=Ed,a.at=Td,a.before=Sc,a.bind=od,a.bindAll=Qd,a.bindKey=pd,a.castArray=zc,a.chain=Yp,a.chunk=tp,a.compact=ep,a.concat=op,a.cond=Si,a.conforms=Ci,a.constant=Pi,a.countBy=Yr,a.create=Pl,a.curry=Cc,a.curryRight=Pc,a.debounce=Ec,a.defaults=Md,a.defaultsDeep=Dd,a.defer=cd,a.delay=ld,a.difference=Dr,a.differenceBy=Rr,a.differenceWith=Nr,a.drop=pp,a.dropRight=cp,a.dropRightWhile=lp,a.dropWhile=ip,a.fill=up,a.filter=cc,a.flatMap=lc,a.flatMapDeep=ic,a.flatMapDepth=uc,a.flatten=kp,a.flattenDeep=hp,a.flattenDepth=bp,a.flip=Tc,a.flow=Xd,a.flowRight=Zd,a.fromPairs=vp,a.functions=Al,a.functionsIn=Ll,a.groupBy=Zr,a.initial=fp,a.intersection=Ar,a.intersectionBy=Lr,a.intersectionWith=Or,a.invert=Rd,a.invertBy=Nd,a.invokeMap=nd,a.iteratee=Mi,a.keyBy=sd,a.keys=Wl,a.keysIn=Hl,a.map=hc,a.mapKeys=Bl,a.mapValues=Jl,a.matches=Di,a.matchesProperty=Ri,a.memoize=Mc,a.merge=Ld,a.mergeWith=Od,a.method=nk,a.methodOf=sk,a.mixin=Ni,a.negate=Dc,a.nthArg=Oi,a.omit=Id,a.omitBy=Ul,a.once=Rc,a.orderBy=bc,a.over=ak,a.overArgs=id,a.overEvery=tk,a.overSome=ek,a.partial=ud,a.partialRight=rd,a.partition=ad,a.pick=zd,a.pickBy=Fl,a.property=Ii,a.propertyOf=zi,a.pull=Ir,a.pullAll=qp,a.pullAllBy=_p,a.pullAllWith=Sp,a.pullAt=zr,a.range=ok,a.rangeRight=pk,a.rearg=dd,a.reject=gc,a.remove=Cp,a.rest=Nc,a.reverse=Pp,a.sampleSize=wc,a.set=Vl,a.setWith=Kl,a.shuffle=yc,a.slice=Ep,a.sortBy=td,a.sortedUniq=Lp,a.sortedUniqBy=Op,a.split=bi,a.spread=Ac,a.tail=Ip,a.take=zp,a.takeRight=Wp,a.takeRightWhile=Hp,a.takeWhile=Bp,a.tap=Qp,a.throttle=Lc,a.thru=Xp,a.toArray=wl,a.toPairs=Wd,a.toPairsIn=Hd,a.toPath=$i,a.toPlainObject=_l,a.transform=Gl,a.unary=Oc,a.union=Wr,a.unionBy=Hr,a.unionWith=Br,a.uniq=Jp,a.uniqBy=Up,a.uniqWith=Fp,a.unset=Yl,a.unzip=$p,a.unzipWith=Vp,a.update=Ql,a.updateWith=Xl,a.values=Zl,a.valuesIn=ni,a.without=Jr,a.words=_i,a.wrap=Ic,a.xor=Ur,a.xorBy=Fr,a.xorWith=$r,a.zip=Vr,a.zipObject=Kp,a.zipObjectDeep=Gp,a.zipWith=Kr,a.entries=Wd,a.entriesIn=Hd,a.extend=Cd,a.extendWith=Pd,Ni(a,a),a.add=ck,a.attempt=Yd,a.camelCase=Bd,a.capitalize=ei,a.ceil=lk,a.clamp=si,a.clone=Wc,a.cloneDeep=Bc,a.cloneDeepWith=Jc,a.cloneWith=Hc,a.conformsTo=Uc,a.deburr=oi,a.defaultTo=Ei,a.divide=ik,a.endsWith=pi,a.eq=Fc,a.escape=ci,a.escapeRegExp=li,a.every=pc,a.find=Qr,a.findIndex=rp,a.findKey=El,a.findLast=Xr,a.findLastIndex=dp,a.findLastKey=Tl,a.floor=uk,a.forEach=rc,a.forEachRight=dc,a.forIn=Ml,a.forInRight=Dl,a.forOwn=Rl,a.forOwnRight=Nl,a.get=Ol,a.gt=kd,a.gte=hd,a.has=Il,a.hasIn=zl,a.head=mp,a.identity=Ti,a.includes=kc,a.indexOf=gp,a.inRange=ai,a.invoke=Ad,a.isArguments=bd,a.isArray=vd,a.isArrayBuffer=md,a.isArrayLike=$c,a.isArrayLikeObject=Vc,a.isBoolean=Kc,a.isBuffer=gd,a.isDate=fd,a.isElement=Gc,a.isEmpty=Yc,a.isEqual=Qc,a.isEqualWith=Xc,a.isError=Zc,a.isFinite=nl,a.isFunction=sl,a.isInteger=al,a.isLength=tl,a.isMap=wd,a.isMatch=pl,a.isMatchWith=cl,a.isNaN=ll,a.isNative=il,a.isNil=rl,a.isNull=ul,a.isNumber=dl,a.isObject=el,a.isObjectLike=ol,a.isPlainObject=kl,a.isRegExp=yd,a.isSafeInteger=hl,a.isSet=xd,a.isString=bl,a.isSymbol=vl,a.isTypedArray=jd,a.isUndefined=ml,a.isWeakMap=gl,a.isWeakSet=fl,a.join=wp,a.kebabCase=Jd,a.last=yp,a.lastIndexOf=xp,a.lowerCase=Ud,a.lowerFirst=Fd,a.lt=qd,a.lte=_d,a.max=Ki,a.maxBy=Gi,a.mean=Yi,a.meanBy=Qi,a.min=Xi,a.minBy=Zi,a.stubArray=Wi,a.stubFalse=Hi,a.stubObject=Bi,a.stubString=Ji,a.stubTrue=Ui,a.multiply=rk,a.nth=jp,a.noConflict=Ai,a.noop=Li,a.now=ed,a.pad=ii,a.padEnd=ui,a.padStart=ri,a.parseInt=di,a.random=ti,a.reduce=vc,a.reduceRight=mc,a.repeat=ki,a.replace=hi,a.result=$l,a.round=dk,a.runInContext=n,a.sample=fc,a.size=xc,a.snakeCase=$d,a.some=jc,a.sortedIndex=Tp,a.sortedIndexBy=Mp,a.sortedIndexOf=Dp,a.sortedLastIndex=Rp,a.sortedLastIndexBy=Np,a.sortedLastIndexOf=Ap,a.startCase=Vd,a.startsWith=vi,a.subtract=kk,a.sum=nu,a.sumBy=su,a.template=mi,a.times=Fi,a.toFinite=yl,a.toInteger=xl,a.toLength=jl,a.toLower=gi,a.toNumber=ql,a.toSafeInteger=Sl,a.toString=Cl,a.toUpper=fi,a.trim=wi,a.trimEnd=yi,a.trimStart=xi,a.truncate=ji,a.unescape=qi,a.uniqueId=Vi,a.upperCase=Kd,a.upperFirst=Gd,a.each=rc,a.eachRight=dc,a.first=mp,Ni(a,function(){var n={};return kt(a,function(s,t){vu.call(a.prototype,t)||(n[t]=s)}),n}(),{chain:!1}),a.VERSION="4.17.4",i(["bind","bindKey","curry","curryRight","partial","partialRight"],function(n){a[n].placeholder=a}),i(["drop","take"],function(n,s){w.prototype[n]=function(a){a=a===en?1:Fu(xl(a),0);var t=this.__filtered__&&!s?new w(this):this.clone();return t.__filtered__?t.__takeCount__=$u(a,t.__takeCount__):t.__views__.push({size:$u(a,On),type:n+(t.__dir__<0?"Right":"")}),t},w.prototype[n+"Right"]=function(s){return this.reverse()[n](s).reverse()}}),i(["filter","map","takeWhile"],function(n,s){var a=s+1,t=a==Mn||3==a;w.prototype[n]=function(n){var s=this.clone();return s.__iteratees__.push({iteratee:xo(n,3),type:a}),s.__filtered__=s.__filtered__||t,s}}),i(["head","last"],function(n,s){var a="take"+(s?"Right":"");w.prototype[n]=function(){return this[a](1).value()[0]}}),i(["initial","tail"],function(n,s){var a="drop"+(s?"":"Right");w.prototype[n]=function(){return this.__filtered__?new w(this):this[a](1)}}),w.prototype.compact=function(){return this.filter(Ti)},w.prototype.find=function(n){return this.filter(n).head()},w.prototype.findLast=function(n){return this.reverse().find(n)},w.prototype.invokeMap=ae(function(n,s){return"function"==typeof n?new w(this):this.map(function(a){return _t(a,n,s)})}),w.prototype.reject=function(n){return this.filter(Dc(xo(n)))},w.prototype.slice=function(n,s){n=xl(n);var a=this;return a.__filtered__&&(n>0||s<0)?new w(a):(n<0?a=a.takeRight(-n):n&&(a=a.drop(n)),s!==en&&(s=xl(s),a=s<0?a.dropRight(-s):a.take(s-n)),a)},w.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},w.prototype.toArray=function(){return this.take(On)},kt(w.prototype,function(n,s){var t=/^(?:filter|find|map|reject)|While$/.test(s),o=/^(?:head|last)$/.test(s),p=a[o?"take"+("last"==s?"Right":""):s],c=o||/^find/.test(s);p&&(a.prototype[s]=function(){var s=this.__wrapped__,l=o?[1]:arguments,i=s instanceof w,u=l[0],r=i||vd(s),d=function(n){var s=p.apply(a,v([n],l));return o&&k?s[0]:s};r&&t&&"function"==typeof u&&1!=u.length&&(i=r=!1);var k=this.__chain__,h=!!this.__actions__.length,b=c&&!k,m=i&&!h;if(!c&&r){s=m?s:new w(this);var g=n.apply(s,l);return g.__actions__.push({func:Xp,args:[d],thisArg:en}),new e(g,k)}return b&&m?n.apply(this,l):(g=this.thru(d),b?o?g.value()[0]:g.value():g)})}),i(["pop","push","shift","sort","splice","unshift"],function(n){var s=ru[n],t=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",e=/^(?:pop|shift)$/.test(n);a.prototype[n]=function(){var n=arguments;if(e&&!this.__chain__){var a=this.value();return s.apply(vd(a)?a:[],n)}return this[t](function(a){return s.apply(vd(a)?a:[],n)})}}),kt(w.prototype,function(n,s){var t=a[s];if(t){var e=t.name+"";(er[e]||(er[e]=[])).push({name:s,func:t})}}),er[Xe(en,gn).name]=[{name:"wrapper",func:en}],w.prototype.clone=E,w.prototype.reverse=Q,w.prototype.value=sn,a.prototype.at=Gr,a.prototype.chain=Zp,a.prototype.commit=nc,a.prototype.next=sc,a.prototype.plant=tc,a.prototype.reverse=ec,a.prototype.toJSON=a.prototype.valueOf=a.prototype.value=oc,a.prototype.first=a.prototype.head,Du&&(a.prototype[Du]=ac),a}();Ra._=Ga,(e=function(){return Ga}.call(s,a,s,t))!==en&&(t.exports=e)}).call(this)}).call(s,a(10),a(46)(n))},function(n,s){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,s,a){"use strict";function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function e(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function o(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var p=function(){function n(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(s,a,t){return a&&n(s.prototype,a),t&&n(s,t),s}}(),c=a(0),l=function(n){return n&&n.__esModule?n:{default:n}}(c),i=function(n){function s(){var n,a,o,p;t(this,s);for(var c=arguments.length,l=Array(c),i=0;i<c;i++)l[i]=arguments[i];return a=o=e(this,(n=s.__proto__||Object.getPrototypeOf(s)).call.apply(n,[this].concat(l))),o.state={offset:0},p=a,e(o,p)}return o(s,n),p(s,[{key:"render",value:function(){var n=this.state.offset;return l.default.createElement("span",{className:"gitter"},l.default.createElement("div",{className:"gitter__button js-gitter-toggle-chat-button",style:{marginBottom:n}},l.default.createElement("i",{className:"gitter__icon icon-gitter"})))}},{key:"componentDidMount",value:function(){setTimeout(this._recalculate.bind(this),250),document.addEventListener("scroll",this._recalculate.bind(this))}},{key:"componentWillUnmount",value:function(){document.removeEventListener("scroll",this._recalculate.bind(this))}},{key:"_recalculate",value:function(n){var s=window,a=s.scrollY,t=s.innerHeight,e=document.body.scrollHeight,o=e-a-t,p=document.querySelector("footer").offsetHeight;this.setState({offset:o<p?p-o:0})}}]),s}(l.default.Component);s.default=i},,function(n,s,a){var t=a(0),e=a(0),o=a(12);o.default&&(o=o.default);var p=a(19);p.default&&(p=p.default);var c=a(41);c.default&&(c=c.default);var l=a(42);l.default&&(l=l.default);var i=a(47);i.default&&(i=i.default),e.render(t.createElement(o,{}),document.getElementById("src/components/NotificationBar/NotificationBar.jsx")),e.render(t.createElement(p,{pageUrl:"/concepts/manifest/"}),document.getElementById("src/components/Navigation/Navigation.jsx")),e.render(t.createElement(c,{sections:[{title:"Home",url:"/",pages:[{file:{attributes:{title:"参与翻译的全体成员",contributors:["Aladdin-ADD","AlenQi","JayceZhang9602","LeoEatle","QC-L","ShiHaoLin","SimonLeeee","WoolYang","akira-cn","beiciye","billie66","biqing","chen-Aaron","coco-hu","dear-lizhihua","dickeylth","dingyiming","ellyliang","fa93hws","funkyfun","guyunxiang","hijiangtao","hikerpig","huangtubiao","itchina110","jason-ivy","kagawagao","lcxfs1991","lgh06","lizhonghui","lmymoonsky","lukastong","mc-zone","neal1991","nervouself","nick-nick","panlinying","ppppfly","rqzheng2015","scq000","shisaq","starkwang","superpig","tao1991123","tuzhu008","weishijun14","xgz123","xiayuxiaoyan","xie-qianyue","yuanlinssdut","zgayjjf","zhuangdanyang","zikeng","zjafei"],group:"-",anchors:[],related:[]},body:'<p>特此致敬<code>参与翻译的全体成员</code>！</p>\n<p>在他人休息的节假日，在自我忙碌的工作日，大家一起贡献出自己宝贵的时间和精力，为了 Web 前端的美好未来无私付出！</p>\n<p>真诚的向你们表示感谢！</p>\n<p>以下人员以 github 字母排序，如有遗漏请<a href="https://github.com/webpack-china/webpack.js.org/issues/180">告知我们</a>。</p>\n',title:"参与翻译的全体成员"},title:"参与翻译的全体成员",url:"/about/"},{file:{attributes:{title:"对比",sort:1,contributors:["bebraw","chrisVillanueva","pksjce","simon04","tashian"],related:[{title:"JSPM vs. webpack",url:"https://ilikekillnerds.com/2015/07/jspm-vs-webpack/"},{title:"webpack vs. Browserify vs. SystemJS",url:"https://engineering.velocityapp.com/webpack-vs-browersify-vs-systemjs-for-spas-95b349a41fa0"}],group:"-",anchors:[{title:"打包 vs. 加载",id:"-vs-"}]},body:'<p>webpack 不仅仅作为模块打包器存在。如果你要在使用 webpack 或下面任意的打包器之间进行选择，这里列出了 webpack 特性，以及和其他竞品之间的功能对比。</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">特性</div><div class="table-th">webpack/webpack</div><div class="table-th">jrburke/requirejs</div><div class="table-th">substack/node-browserify</div><div class="table-th">jspm/jspm-cli</div><div class="table-th">rollup/rollup</div><div class="table-th">brunch/brunch</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        附加模块按需加载\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/systemjs/systemjs/blob/master/docs/system-api.md#systemimportmodulename--normalizedparentname---promisemodule">System.import</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        AMD <code>define</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/jaredhanson/deamdify">deamdify</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/piuccio/rollup-plugin-amd">rollup-plugin-amd</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        AMD <code>require</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        AMD <code>require</code> 按需加载\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        手动配置\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        CommonJS <code>exports</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        只包含在 <code>define</code> 中\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/rollup/rollup-plugin-commonjs">commonjs-plugin</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        CommonJS <code>require</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        只包含在 <code>define</code> 中\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/rollup/rollup-plugin-commonjs">commonjs-plugin</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        CommonJS <code>require.resolve</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        require 中拼接 <code>require(&quot;./fi&quot; + &quot;le&quot;)</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no♦\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        调试支持\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>SourceUrl, SourceMaps</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        不需要\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        SourceMaps\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        <strong>SourceUrl, SourceMaps</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <strong>SourceUrl, SourceMaps</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        SourceMaps\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        依赖\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        19MB / 127 个程序包\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        11MB / 118 个程序包\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <strong>1.2MB / 1 个程序包</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        26MB / 131 个程序包\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        ?MB / 3 个程序包\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        ES2015 <code>import</code>/<code>export</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong> (webpack 2)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes, 通过 <a href="https://github.com/gcollazo/es6-module-transpiler-brunch">es6 模块转换器</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        require (guided) 中的表达式 <code>require(&quot;./templates/&quot; + template)</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes (包括所有匹配的文件)</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no♦\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        require (free) 中的表达式 <code>require(moduleName)</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        手动配置\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no♦\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        生成单独包\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        yes♦\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        间接的 require <code>var r = require; r(&quot;./file&quot;)</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no♦\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        分别加载每个文件\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        损坏的路径名\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        部分\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        不需要（路径名称不在包中）\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        压缩\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        uglify\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        uglify, closure compiler\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/hughsk/uglifyify">uglifyify</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/TrySound/rollup-plugin-uglify">uglify-plugin</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/brunch/uglify-js-brunch">UglifyJS-brunch</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        用 common bundle 构建多页\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        手动配置\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        手动配置\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        使用包算法\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        多个 bundle\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        手动配置\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        手动配置\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        Node.js 内置 libs <code>require(&quot;path&quot;)</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/rollup/rollup-plugin-node-resolve">node-resolve-plugin</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        Node.js 其他\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        process, __dir/filename, global\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        process, __dir/filename, global\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        process, __dir/filename, global for cjs\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        global (<a href="https://github.com/rollup/rollup-plugin-commonjs">commonjs-plugin</a>)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        插件\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        预处理\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>loaders, <a href="https://github.com/webpack/transform-loader">transforms</a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        loaders\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        transforms\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        plugin translate\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        plugin transforms\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        compilers, optimizers\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        浏览器替换\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <code>web_modules</code>, <code>.web.js</code>, package.json field, alias config option\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        alias option\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        package.json field, alias option\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        package.json, alias option\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        可 require 文件\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        文件系统\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        <strong>web</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        文件系统\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        通过插件\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        文件系统或通过插件\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        文件系统\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        执行时(runtime)开销\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>243B + 20B 每个模块 + 4B 每个依赖</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        14.7kB + 0B 每个模块 + (3B + X) 每个依赖\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        415B + 25B 每个模块 + (6B + 2X) 每个依赖\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        5.5kB for 自执行 bundle, 38kB 全部 loader 和 polyfill, 0 普通模块, 293B CJS, 139B ES2015 System.register before gzip\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <strong>none for ES2015 modules</strong>（可能有其他格式）\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        特性\n    </div>\n    <div class="table-td-content">\n        开发文件监听(watch)模式\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        不需要\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/substack/watchify">watchify</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        开发不需要\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/rollup/rollup-watch">rollup-watch</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>♦ 在生产模式（在开发模式中相反）</p>\n<p>X是路径字符串的长度</p>\n<h2 class="header"><a class="anchor" href="#-vs-" id="-vs-"></a><span class="text">打包 vs. 加载</span><a class="icon-link" href="#-vs-"></a></h2>\n<p>注意<em>加载</em>和<em>打包</em>模块之间的一些关键区别很重要。可以在 <a href="https://github.com/jspm/jspm-cli">JSPM</a> 引擎下找到像 <a href="https://github.com/systemjs/systemjs">SystemJS</a> 的工具，用于在浏览器通过运行时(runtime)来加载和转译模块。这和 webpack 有着显著不同，在加载到浏览器之前，模块就已经被转译（通过 &quot;loaders&quot;）并打包在一起。</p>\n<p>每种方法都有其优势和劣势。运行时(runtime)加载和转译模块，为大型网站增加了大量开销，并且应用程序会由许多模块组成。因此，SystemJS 对于需要少量模块的小型项目更有意义。但是，随着 <a href="https://http2.github.io/">HTTP/2</a> 改善文件从服务器到客户端的传输速度，这可能会发生一些变化。请注意，HTTP/2 不会修改<em>转译</em>模块的任何内容，在客户端下载完成后，还是需要很长时间去进行转译。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/comparison/">https://webpack.js.org/guides/comparison/</a></p>\n</blockquote>\n',title:"对比"},title:"对比",url:"/comparison/"},{file:{attributes:{title:"品牌指南",sort:2,contributors:["jhnns","rouzbeh84","skipjack"],group:"-",anchors:[{title:"The Name",id:"the-name"},{title:"Logo",id:"logo"},{title:"Icon only",id:"icon-only"},{title:"Font",id:"font"},{title:"Color Palette",id:"color-palette"},{title:"License",id:"license"}],related:[]},body:'<p>Here you can find <strong>webpack</strong> project brand guidelines, assets, and license. See our official <a href="https://github.com/webpack/media">media repository</a> for more information and to find the <a href="https://github.com/webpack/media/blob/master/LICENSE">license</a> that governs this work. Click any of the images to download them.</p>\n<h2 class="header"><a class="anchor" href="#the-name" id="the-name"></a><span class="text">The Name</span><a class="icon-link" href="#the-name"></a></h2>\n<p>webpack should <strong>always</strong> be written in lower-case letters, even at the beginning of a sentence.</p>\n<h2 class="header"><a class="anchor" href="#logo" id="logo"></a><span class="text">Logo</span><a class="icon-link" href="#logo"></a></h2>\n<p>The webpack logo should be placed on a white background with enough space around it like this:</p>\n<p><img src="https://github.com/webpack/media/blob/master/logo/logo-on-white-bg.png?raw=true" alt="webpack logo default with proper spacing on light background" /></p>\n<p><a href="https://github.com/webpack/media/blob/master/logo/logo-on-white-bg.svg">svg</a> | <a href="https://github.com/webpack/media/blob/master/logo/logo-on-white-bg.png">png</a> | <a href="https://github.com/webpack/media/blob/master/logo/logo-on-white-bg.jpg">jpg</a></p>\n<p>Just double the size of the inner dark blue cube to get an idea how much space the logo should have.</p>\n<p>For dark backgrounds, you can use the negative version of the logo:</p>\n<div style="display: block; background: #111;"><p><img src="https://github.com/webpack/media/blob/master/logo/logo-on-dark-bg.png?raw=true" alt="webpack logo default with proper spacing on light background" /></p>\n<p></div></p>\n<p><a href="https://github.com/webpack/media/blob/master/logo/logo-on-dark-bg.svg">svg</a> | <a href="https://github.com/webpack/media/blob/master/logo/logo-on-dark-bg.png">png</a> | <a href="https://github.com/webpack/media/blob/master/logo/logo-on-dark-bg.jpg">jpg</a></p>\n<blockquote class="tip"><div class="tip-content"> Please use the <strong>icon + text</strong> whenever possible. </div></blockquote><h2 class="header"><a class="anchor" href="#icon-only" id="icon-only"></a><span class="text">Icon only</span><a class="icon-link" href="#icon-only"></a></h2>\n<p><strong>The icon is designed to be used in layout-constrained areas. As previously stated, please prefer icon + text.</strong></p>\n<p><img src="https://github.com/webpack/media/blob/master/logo/icon.png?raw=true" width="250" alt="icon example"></p>\n<p><a href="https://github.com/webpack/media/blob/master/logo/icon.svg">svg</a> | <a href="https://github.com/webpack/media/blob/master/logo/icon.png">png</a> | <a href="https://github.com/webpack/media/blob/master/logo/icon.jpg">jpg</a></p>\n<p>Square-sized icon for bigger areas (like avatars or profile pictures):</p>\n<p><img src="https://github.com/webpack/media/blob/master/logo/icon-square-big.png?raw=true" width="250" alt="icon square big example"></p>\n<p><a href="https://github.com/webpack/media/blob/master/logo/icon-square-big.svg">svg</a> | <a href="https://github.com/webpack/media/blob/master/logo/icon-square-big.png">png</a> | <a href="https://github.com/webpack/media/blob/master/logo/icon-square-big.jpg">jpg</a></p>\n<p>Square-sized icon for smaller areas (like favicons):</p>\n<p><img src="https://github.com/webpack/media/blob/master/logo/icon-square-small.png?raw=true" width="50" alt="icon square small example"></p>\n<p><a href="https://github.com/webpack/media/blob/master/logo/icon-square-small.svg">svg</a> | <a href="https://github.com/webpack/media/blob/master/logo/icon-square-small.png">png</a> | <a href="https://github.com/webpack/media/blob/master/logo/icon-square-small.jpg">jpg</a></p>\n<blockquote class="tip"><div class="tip-content"> For those of you following our guidelines and have gotten this far, we&#39;ve made a special smaller size image used especially for custom emoji (like in a slack or gitter channel ;)) </div></blockquote><p><img src="/assets/icon-square-small-slack.png" width="50" alt="icon square small example"></p>\n<h2 class="header"><a class="anchor" href="#font" id="font"></a><span class="text">Font</span><a class="icon-link" href="#font"></a></h2>\n<p>We use the beautiful <a href="http://geomanist.com/">Geomanist Medium</a> font from the extremely talented folks at the <a href="http://atipofoundry.com/">Atipo Foundry</a> who provide the entire font family at a &#39;pay what you want&#39; model.</p>\n<h2 class="header"><a class="anchor" href="#color-palette" id="color-palette"></a><span class="text">Color Palette</span><a class="icon-link" href="#color-palette"></a></h2>\n<p>The following colors are used throughout the site in various combinations and on our fancy clothing line launched with the help of <a href="http://opencollective.com">Open Collective</a> and <a href="https://medium.com/u/840563ee2a56">Threadless</a> over at the <a href="https://webpack.threadless.com/collections/the-final-release-collection/">official webpack store</a>!</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Color Name</div><div class="table-th">HEX Code</div><div class="table-th">RGB Code</div><div class="table-th">Sample</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Malibu:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#8dd6f9</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 141, 214, 249</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #8dd6f9;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Denim:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#1d78c1</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 29, 120, 193</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #1d78c1;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Fiord:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#465E69</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 70, 94, 105</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #465E69;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Outer Space:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#2B3A42</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 43, 58, 66</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #2B3A42;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        White:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#ffffff</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 255, 255, 255</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #ffffff;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Concrete:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#f2f2f2</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 242, 242, 242</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #f2f2f2;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Alto:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#dedede</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 222, 222, 222</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #dedede;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Dusty Gray:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#999999</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 153, 153, 153</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #999999;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Dove Gray:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#666666</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 102, 102, 102</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #666666;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Emperor:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#535353</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 83, 83, 83</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #535353;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Mine Shaft:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#333333</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 51, 51, 51</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #333333;">&nbsp;</div>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>In addition, you can grab the following file types directly from these links:</p>\n<p><a href="https://raw.githubusercontent.com/webpack/media/master/design/webpack-palette.psd">psd</a> | <a href="https://raw.githubusercontent.com/webpack/media/master/design/webpack-palette.png">png</a>\n | <a href="https://raw.githubusercontent.com/webpack/media/master/design/webpack-palette.ai">ai</a> | <a href="https://raw.githubusercontent.com/webpack/media/master/design/webpack-palette.svg">svg</a></p>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">License</span><a class="icon-link" href="#license"></a></h2>\n<p>The logo and the brand name are <strong>not MIT licensed</strong>. Please check <a href="https://github.com/webpack/media/blob/master/LICENSE">our LICENSE</a> for usage guidelines.</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/branding/">https://webpack.js.org/branding/</a></p>\n</blockquote>\n',title:"品牌指南"},title:"品牌指南",url:"/branding/"},{file:{attributes:{title:"概念术语",sort:3,contributors:["bebraw","rouzbeh84","skipjack"],group:"-",anchors:[{title:"A",id:"a"},{title:"B",id:"b"},{title:"C",id:"c"},{title:"D",id:"d"},{title:"E",id:"e"},{title:"F",id:"f"},{title:"G",id:"g"},{title:"H",id:"h"},{title:"I",id:"i"},{title:"J",id:"j"},{title:"K",id:"k"},{title:"L",id:"l"},{title:"M",id:"m"},{title:"N",id:"n"},{title:"O",id:"o"},{title:"P",id:"p"},{title:"Q",id:"q"},{title:"R",id:"r"},{title:"S",id:"s"},{title:"T",id:"t"},{title:"U",id:"u"},{title:"V",id:"v"},{title:"W",id:"w"},{title:"X",id:"x"},{title:"Y",id:"y"},{title:"Z",id:"z"}],related:[]},body:'<p>该索引列出了在整个 Webpack 生态系统中共同使用的术语。</p>\n<h2 class="header"><a class="anchor" href="#a" id="a"></a><span class="text">A</span><a class="icon-link" href="#a"></a></h2>\n<ul>\n<li><a href="/guides/asset-management/"><strong>资源(Asset)</strong></a>: 这是一个普遍的术语，用于图片、字体、媒体，还有一些其他类型的文件，常用在网站和其他应用程序。这些文件通常最终在<a href="/glossary#o">输出(output )</a> 中成为单个文件，但也可以通过一些东西内联，像 <a href="/loaders/style-loader">style-loader</a> 或者 <a href="/loaders/url-loader">url-loader</a> .</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#b" id="b"></a><span class="text">B</span><a class="icon-link" href="#b"></a></h2>\n<ul>\n<li><a href="/guides/getting-started/#creating-a-bundle"><strong>Bundle</strong></a>: 由多个不同的模块生成，bundles 包含了早已经过加载和编译的最终源文件版本。</li>\n<li><a href="/guides/code-splitting"><strong>Bundle 分离(Bundle Splitting)</strong></a>: 这个流程提供一个优化 build 的方法，允许 webpack 为应用程序生成多个 bundle。最终效果是，当其他某些 bundle 的改动时，彼此独立的另一些 bundle 都可以不受到影响，减少需要重新发布的代码量，因此由客户端重新下载并利用浏览器缓存。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#c" id="c"></a><span class="text">C</span><a class="icon-link" href="#c"></a></h2>\n<ul>\n<li><strong>Chunk</strong>: 这是 webpack 特定的术语被用在内部来管理 building 过程。bundle 由 chunk 组成，其中有几种类型（例如，入口 chunk(entry chunk) 和子 chunk(child chunk)）。通常 chunk 会直接对应所输出的 bundle，但是有一些配置并不会产生一对一的关系。</li>\n<li><a href="/guides/code-splitting/"><strong>代码分离(Code Splitting)</strong></a>: 指将代码分离到每个 bundles/chunks 里面，你可以按需加载，而不是加载一个包含全部的 bundle。</li>\n<li><a href="/concepts/configuration/"><strong>配置(Configuration)</strong></a>: webpack 的配置文件是一个普通的 JavaScript 文件，它导出为一个对象。然后由 webpack 根据这个对象定义的属性进行处理。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#d" id="d"></a><span class="text">D</span><a class="icon-link" href="#d"></a></h2>\n<ul>\n<li><a href="/concepts/dependency-graph"><strong>依赖关系图(Dependency Graph)</strong></a>: 有时候一个文件依赖于其他文件，webpack 将其视为<em>依赖关系</em>(<em>dependency</em>)。从一个或多个入口点开始，webpack 递归构建一个依赖关系图，里面包含了你的应用程序需要的所有模块/资源(mudule/asset)。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#e" id="e"></a><span class="text">E</span><a class="icon-link" href="#e"></a></h2>\n<ul>\n<li><a href="/concepts/entry-points"><strong>入口点(Entry Point)</strong></a>: 入口点可以告诉 webpack 从哪里启动以及遵循依赖关系图，以此知道要打包什么东西。你可以考虑将待打包文件的根目录作为你应用程序的入口点。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#f" id="f"></a><span class="text">F</span><a class="icon-link" href="#f"></a></h2>\n<h2 class="header"><a class="anchor" href="#g" id="g"></a><span class="text">G</span><a class="icon-link" href="#g"></a></h2>\n<h2 class="header"><a class="anchor" href="#h" id="h"></a><span class="text">H</span><a class="icon-link" href="#h"></a></h2>\n<ul>\n<li><a href="/concepts/hot-module-replacement"><strong>热模块替换(Hot Module Replacement(HMR))</strong></a>: 一个修改、添加或删除模块(modules)的过程，而正在运行中的应用程序无需重载加载整个页面。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#i" id="i"></a><span class="text">I</span><a class="icon-link" href="#i"></a></h2>\n<h2 class="header"><a class="anchor" href="#j" id="j"></a><span class="text">J</span><a class="icon-link" href="#j"></a></h2>\n<h2 class="header"><a class="anchor" href="#k" id="k"></a><span class="text">K</span><a class="icon-link" href="#k"></a></h2>\n<h2 class="header"><a class="anchor" href="#l" id="l"></a><span class="text">L</span><a class="icon-link" href="#l"></a></h2>\n<ul>\n<li><a href="/concepts/loaders"><strong>Loaders</strong></a>: loader 允许你在 <code>require()</code> 或“加载”的文件之前，先预处理文件。就像“任务执行器(task-runner)”</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#m" id="m"></a><span class="text">M</span><a class="icon-link" href="#m"></a></h2>\n<ul>\n<li><a href="/concepts/modules"><strong>模块(Module)</strong></a>: 提供比完整程序接触面(surface area)更小的离散功能块。精心编写的模块提供了可靠的抽象和封装界限，使得应用程序中每个模块都具有条理清楚的设计和明确的目的。</li>\n<li><a href="/concepts/module-resolution/"><strong>模块解析(Module Resolution)</strong></a>: 一个模块可以作为另一个模块的依赖模块，resolver 是一个库( library )用于帮助找到模块的绝对路径... 模块将在 <code>resolve.modules</code> 中指定的所有目录内搜索。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#n" id="n"></a><span class="text">N</span><a class="icon-link" href="#n"></a></h2>\n<h2 class="header"><a class="anchor" href="#o" id="o"></a><span class="text">O</span><a class="icon-link" href="#o"></a></h2>\n<ul>\n<li><a href="/concepts/output"><strong>输出(Output)</strong></a>: 此选项指定编译后的文件，输出到硬盘的何处。<blockquote>\n<p><em>注意, 虽然可以有多个入口点, 但规定只能配置一个输出(output)。</em></p>\n</blockquote>\n</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#p" id="p"></a><span class="text">P</span><a class="icon-link" href="#p"></a></h2>\n<ul>\n<li><a href="/concepts/plugins"><strong>插件(Plugin)</strong></a>: 一个含有 <code>apply</code> 属性的 JavaScript 对象。该 <code>apply</code> 属性会在 webpack 编译时被调用，并能在整个编译生命周期访问。这些插件包通常以某种方式扩展编译功能。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#q" id="q"></a><span class="text">Q</span><a class="icon-link" href="#q"></a></h2>\n<h2 class="header"><a class="anchor" href="#r" id="r"></a><span class="text">R</span><a class="icon-link" href="#r"></a></h2>\n<h2 class="header"><a class="anchor" href="#s" id="s"></a><span class="text">S</span><a class="icon-link" href="#s"></a></h2>\n<h2 class="header"><a class="anchor" href="#t" id="t"></a><span class="text">T</span><a class="icon-link" href="#t"></a></h2>\n<ul>\n<li><a href="/configuration/target/"><strong>目标(Target)</strong></a>: <a href="/configuration/target/">这里列出</a> 了用户配置的部署目标，针对特定的环境（如浏览器，NodeJS或Electron）进行编译。</li>\n<li><a href="/guides/tree-shaking/"><strong>Tree Shaking</strong></a>: 移除未使用/多余的代码，或者更准确地说，只导入引用的代码。编译器(compiler)（例如 webpack）将通过分析各种 <code>import</code> 语句和引入代码的使用情况，来确定哪些部分的依赖关系被实际使用，删除不是“树”的部分，以实现此功能。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#u" id="u"></a><span class="text">U</span><a class="icon-link" href="#u"></a></h2>\n<h2 class="header"><a class="anchor" href="#v" id="v"></a><span class="text">V</span><a class="icon-link" href="#v"></a></h2>\n<ul>\n<li><a href="/concepts/entry-points/#separate-app-and-vendor-entries"><strong>第三方库入口点(Vendor Entry Point)</strong></a>:  从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的，允许你使用 CommonsChunkPlugin 从「应用程序 bundle」中提取 vendor 引用(vendor reference) 到 vendor bundle。可以帮助你在 webpack 中实现被称为<a href="/guides/caching/">长效缓存</a>的通用模式。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#w" id="w"></a><span class="text">W</span><a class="icon-link" href="#w"></a></h2>\n<ul>\n<li><a href="/"><strong>webpack</strong></a>: 一个可高度配置的现代 JavaScript 应用程序<a href="/concepts/modules">模块</a>(<a href="/concepts/modules">module</a>)打包器。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#x" id="x"></a><span class="text">X</span><a class="icon-link" href="#x"></a></h2>\n<h2 class="header"><a class="anchor" href="#y" id="y"></a><span class="text">Y</span><a class="icon-link" href="#y"></a></h2>\n<h2 class="header"><a class="anchor" href="#z" id="z"></a><span class="text">Z</span><a class="icon-link" href="#z"></a></h2>\n',title:"概念术语"},title:"概念术语",url:"/glossary/"},{file:{attributes:{title:"遵循协议",sort:4,group:"-",anchors:[{title:"webpack",id:"webpack"},{title:"webpack logo and icon",id:"webpack-logo-and-icon"},{title:"webpack documentation",id:"webpack-documentation"},{title:"webpack code samples",id:"webpack-code-samples"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#webpack" id="webpack"></a><span class="text">webpack</span><a class="icon-link" href="#webpack"></a></h2>\n<p>webpack is <a href="https://github.com/webpack/webpack/blob/master/LICENSE">MIT licensed</a>.</p>\n<h2 class="header"><a class="anchor" href="#webpack-logo-and-icon" id="webpack-logo-and-icon"></a><span class="text">webpack logo and icon</span><a class="icon-link" href="#webpack-logo-and-icon"></a></h2>\n<p>The webpack logo and icon are under a different license which can be\nfound <a href="https://github.com/webpack/media">here</a>.</p>\n<h2 class="header"><a class="anchor" href="#webpack-documentation" id="webpack-documentation"></a><span class="text">webpack documentation</span><a class="icon-link" href="#webpack-documentation"></a></h2>\n<p>The content on <a href="https://webpack.js.org/">https://webpack.js.org/</a> is available under <a href="https://creativecommons.org/licenses/by/4.0/">Creative Commons BY 4.0</a> license meaning attribution is required should you use the content elsewhere.</p>\n<h2 class="header"><a class="anchor" href="#webpack-code-samples" id="webpack-code-samples"></a><span class="text">webpack code samples</span><a class="icon-link" href="#webpack-code-samples"></a></h2>\n<p>The code samples use <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0 1.0 Universal (CC0 1.0) (Public Domain)</a> and you are free to use them as you like.</p>\n',title:"遵循协议"},title:"遵循协议",url:"/license/"}]},{title:"概念",url:"concepts",pages:[{file:{attributes:{title:"入口起点(Entry Points)",sort:2,contributors:["TheLarkInn","chrisVillanueva"],group:"-",anchors:[{title:"单个入口（简写）语法",id:"-"},{title:"对象语法",id:"-"},{title:"常见场景",id:"-"},{title:"分离 应用程序(app) 和 第三方库(vendor) 入口",id:"-app-vendor-"},{title:"多页面应用程序",id:"-"}],related:[]},body:'<p>正如我们在<a href="/guides/getting-started/#using-a-configuration">起步</a>中提到的，在 webpack 配置中有多种方式定义 <code>entry</code> 属性。除了解释为什么它可能非常有用，我们还将向你展示<strong>如何去</strong>配置 <code>entry</code> 属性。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">单个入口（简写）语法</span><a class="icon-link" href="#-"></a></h2>\n<p>用法：<code>entry: string|Array&lt;string&gt;</code></p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span>\n</code></pre>\n<p><code>entry</code> 属性的单个入口语法，是下面的简写：</p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    main<span class="token punctuation">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> <strong>当你向 <code>entry</code> 传入一个数组时会发生什么？</strong>向 <code>entry</code> 属性传入「文件路径(file path)数组」将创建<strong>“多个主入口(multi-main entry)”</strong>。在你想要多个依赖文件一起注入，并且将它们的依赖导向(graph)到一个“chunk”时，传入数组的方式就很有用。 </div></blockquote><p>当你正在寻找为「只有一个入口起点的应用程序或工具（即 library）」快速设置 webpack 配置的时候，这会是个很不错的选择。然而，使用此语法在扩展配置时有失灵活性。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">对象语法</span><a class="icon-link" href="#-"></a></h2>\n<p>用法：<code>entry: {[entryChunkName: string]: string|Array&lt;string&gt;}</code></p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    app<span class="token punctuation">:</span> <span class="token string">\'./src/app.js\'</span><span class="token punctuation">,</span>\n    vendors<span class="token punctuation">:</span> <span class="token string">\'./src/vendors.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>对象语法会比较繁琐。然而，这是应用程序中定义入口的最可扩展的方式。</p>\n<blockquote class="tip"><div class="tip-content"> <strong>“可扩展的 webpack 配置”</strong>是指，可重用并且可以与其他配置组合使用。这是一种流行的技术，用于将关注点(concern)从环境(environment)、构建目标(build target)、运行时(runtime)中分离。然后使用专门的工具（如 <a href="https://github.com/survivejs/webpack-merge">webpack-merge</a>）将它们合并。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">常见场景</span><a class="icon-link" href="#-"></a></h2>\n<p>以下列出一些入口配置和它们的实际用例：</p>\n<h4 class="header"><a class="anchor" href="#-app-vendor-" id="-app-vendor-"></a><span class="text">分离 应用程序(app) 和 第三方库(vendor) 入口</span><a class="icon-link" href="#-app-vendor-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    app<span class="token punctuation">:</span> <span class="token string">\'./src/app.js\'</span><span class="token punctuation">,</span>\n    vendors<span class="token punctuation">:</span> <span class="token string">\'./src/vendors.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>这是什么？</strong>从表面上看，这告诉我们 webpack 从 <code>app.js</code> 和 <code>vendors.js</code> 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。</p>\n<p><strong>为什么？</strong>此设置允许你使用 <code>CommonsChunkPlugin</code> 从「应用程序 bundle」中提取 vendor 引用(vendor reference) 到 vendor bundle，并把引用 vendor 的部分替换为 <code>__webpack_require__()</code> 调用。如果应用程序 bundle 中没有 vendor 代码，那么你可以在 webpack 中实现被称为<a href="/guides/caching">长效缓存</a>的通用模式。</p>\n<blockquote class="todo"><div class="tip-content"> 为了支持提供更佳 vendor 分离能力的 DllPlugin，考虑移除该场景。 </div></blockquote><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">多页面应用程序</span><a class="icon-link" href="#-"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    pageOne<span class="token punctuation">:</span> <span class="token string">\'./src/pageOne/index.js\'</span><span class="token punctuation">,</span>\n    pageTwo<span class="token punctuation">:</span> <span class="token string">\'./src/pageTwo/index.js\'</span><span class="token punctuation">,</span>\n    pageThree<span class="token punctuation">:</span> <span class="token string">\'./src/pageThree/index.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>这是什么？</strong>我们告诉 webpack 需要 3 个独立分离的依赖图（如上面的示例）。</p>\n<p><strong>为什么？</strong>在多页应用中，（译注：每当页面跳转时）服务器将为你获取一个新的 HTML 文档。页面重新加载新文档，并且资源被重新下载。然而，这给了我们特殊的机会去做很多事：</p>\n<ul>\n<li>使用 <code>CommonsChunkPlugin</code> 为每个页面间的应用程序共享代码创建 bundle。由于入口起点增多，多页应用能够复用入口起点之间的大量代码/模块，从而可以极大地从这些技术中受益。</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> 根据经验：每个 HTML 文档只使用一个入口起点。 </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/concepts/entry-points/">https://webpack.js.org/concepts/entry-points/</a></p>\n</blockquote>\n',title:"入口起点(Entry Points)"},title:"入口起点(Entry Points)",url:"/concepts/entry-points/"},{file:{attributes:{title:"输出(Output)",sort:3,contributors:["TheLarkInn","chyipin","rouzbeh84"],group:"-",anchors:[{title:"用法(Usage)",id:"-usage-"},{title:"多个入口起点",id:"-"},{title:"高级进阶",id:"-"}],related:[]},body:'<p>配置 <code>output</code> 选项可以控制 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个<code>入口</code>起点，但只指定一个<code>输出</code>配置。</p>\n<h2 class="header"><a class="anchor" href="#-usage-" id="-usage-"></a><span class="text">用法(Usage)</span><a class="icon-link" href="#-usage-"></a></h2>\n<p>在 webpack 中配置 <code>output</code> 属性的最低要求是，将它的值设置为一个对象，包括以下两点：</p>\n<ul>\n<li><code>filename</code> 用于输出文件的文件名。</li>\n<li>目标输出目录 <code>path</code> 的绝对路径。</li>\n</ul>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> <span class="token string">\'/home/proj/public/assets\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span>\n</code></pre>\n<p>此配置将一个单独的 <code>bundle.js</code> 文件输出到 <code>/home/proj/public/assets</code> 目录中。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">多个入口起点</span><a class="icon-link" href="#-"></a></h2>\n<p>如果配置创建了多个单独的 &quot;chunk&quot;（例如，使用多个入口起点或使用像 CommonsChunkPlugin 这样的插件），则应该使用<a href="/configuration/output#output-filename">占位符(substitutions)</a>来确保每个文件具有唯一的名称。</p>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    app<span class="token punctuation">:</span> <span class="token string">\'./src/app.js\'</span><span class="token punctuation">,</span>\n    search<span class="token punctuation">:</span> <span class="token string">\'./src/search.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'[name].js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">\'/dist\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 写入到硬盘：./dist/app.js, ./dist/search.js</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">高级进阶</span><a class="icon-link" href="#-"></a></h2>\n<p>以下是使用 CDN 和资源 hash 的复杂示例：</p>\n<p><strong>config.js</strong></p>\n<pre><code class="lang-javascript">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  path<span class="token punctuation">:</span> <span class="token string">"/home/proj/cdn/assets/[hash]"</span><span class="token punctuation">,</span>\n  publicPath<span class="token punctuation">:</span> <span class="token string">"http://cdn.example.com/assets/[hash]/"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>在编译时不知道最终输出文件的 <code>publicPath</code> 的情况下，<code>publicPath</code> 可以留空，并且在入口起点文件运行时动态设置。如果你在编译时不知道 <code>publicPath</code>，你可以先忽略它，并且在入口起点设置 <code>__webpack_public_path__</code>。</p>\n<pre><code class="lang-javascript">__webpack_public_path__ <span class="token operator">=</span> myRuntimePublicPath\n\n<span class="token comment">// 剩余的应用程序入口</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/concepts/output/">https://webpack.js.org/concepts/output/</a></p>\n</blockquote>\n',title:"输出(Output)"},title:"输出(Output)",url:"/concepts/output/"},{file:{attributes:{title:"Loader",sort:4,contributors:["SpaceK33z","TheLarkInn","ev1stensberg","gangachris","jhnns","manekinekko","simon04"],group:"-",anchors:[{title:"示例",id:"-"},{title:"使用 Loader",id:"-loader"},{title:"配置[Configuration]",id:"-configuration-"},{title:"内联",id:"-"},{title:"CLI",id:"cli"},{title:"Loader 特性",id:"loader-"},{title:"解析 Loader",id:"-loader"}],related:[]},body:'<p>loader 用于对模块的源代码进行转换。loader 可以使你在 <code>import</code> 或&quot;加载&quot;模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 <code>import</code> CSS文件！</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p>例如，你可以使用 loader 告诉 webpack 加载 CSS 文件，或者将 TypeScript 转为 JavaScript。为此，首先安装相对应的 loader：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev css-loader\nnpm <span class="token function">install</span> --save-dev ts-loader\n</code></pre>\n<p>然后指示 webpack 对每个 <code>.css</code> 使用 <a href="/loaders/css-loader"><code>css-loader</code></a>，以及对所有 <code>.ts</code> 文件使用 <a href="https://github.com/TypeStrong/ts-loader"><code>ts-loader</code></a>：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\\.ts$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-loader" id="-loader"></a><span class="text">使用 Loader</span><a class="icon-link" href="#-loader"></a></h2>\n<p>在你的应用程序中，有三种使用 loader 的方式：</p>\n<ul>\n<li><a href="#configuration">配置</a>（推荐）：在 <strong>webpack.config.js</strong> 文件中指定 loader。</li>\n<li><a href="#inline">内联</a>：在每个 <code>import</code> 语句中显式指定 loader。</li>\n<li><a href="#cli">CLI</a>：在 shell 命令中指定它们。</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#-configuration-" id="-configuration-"></a><span class="text">配置[Configuration]</span><a class="icon-link" href="#-configuration-"></a></h3>\n<p><a href="/configuration/module/#module-rules"><code>module.rules</code></a> 允许你在 webpack 配置中指定多个 loader。\n这是展示 loader 的一种简明方式，并且有助于使代码变得简洁。同时让你对各个 loader 有个全局概览：</p>\n<pre><code class="lang-js">  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <a class="code-link" href="/loaders/style-loader">\'style-loader\'</a> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <a class="code-link" href="/loaders/css-loader">\'css-loader\'</a><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              modules<span class="token punctuation">:</span> <span class="token boolean">true</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">内联</span><a class="icon-link" href="#-"></a></h3>\n<p>可以在 <code>import</code> 语句或任何<a href="/api/module-methods">等效于 &quot;import&quot; 的方式</a>中指定 loader。使用 <code>!</code> 将资源中的 loader 分开。分开的每个部分都相对于当前目录解析。</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">\'style-loader!css-loader?modules!./styles.css\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p>通过前置所有规则及使用 <code>!</code>，可以对应覆盖到配置中的任意 loader。</p>\n<p>选项可以传递查询参数，例如 <code>?key=value&amp;foo=bar</code>，或者一个 JSON 对象，例如 <code>?{&quot;key&quot;:&quot;value&quot;,&quot;foo&quot;:&quot;bar&quot;}</code>。</p>\n<blockquote class="tip"><div class="tip-content"> 尽可能使用 <code>module.rules</code>，因为这样可以减少源码中的代码量，并且可以在出错时，更快地调试和定位 loader 中的问题。 </div></blockquote><h3 class="header"><a class="anchor" href="#cli" id="cli"></a><span class="text">CLI</span><a class="icon-link" href="#cli"></a></h3>\n<p>你也可以通过 CLI 使用 loader：</p>\n<pre><code class="lang-sh">webpack --module-bind jade-loader --module-bind <span class="token string">\'css=style-loader!css-loader\'</span>\n</code></pre>\n<p>这会对 <code>.jade</code> 文件使用 <code>jade-loader</code>，对 <code>.css</code> 文件使用 <a href="/loaders/style-loader"><code>style-loader</code></a> 和 <a href="/loaders/css-loader"><code>css-loader</code></a>。</p>\n<h2 class="header"><a class="anchor" href="#loader-" id="loader-"></a><span class="text">Loader 特性</span><a class="icon-link" href="#loader-"></a></h2>\n<ul>\n<li>loader 支持链式传递。能够对资源使用流水线(pipeline)。一组链式的 loader 将按照相反的顺序执行。loader 链中的第一个 loader 返回值给下一个 loader。在最后一个 loader，返回 webpack 所预期的 JavaScript。</li>\n<li>loader 可以是同步的，也可以是异步的。</li>\n<li>loader 运行在 Node.js 中，并且能够执行任何可能的操作。</li>\n<li>loader 接收查询参数。用于对 loader 传递配置。</li>\n<li>loader 也能够使用 <code>options</code> 对象进行配置。</li>\n<li>除了使用 <code>package.json</code> 常见的 <code>main</code> 属性，还可以将普通的 npm 模块导出为 loader，做法是在 <code>package.json</code> 里定义一个 <code>loader</code> 字段。</li>\n<li>插件(plugin)可以为 loader 带来更多特性。</li>\n<li>loader 能够产生额外的任意文件。</li>\n</ul>\n<p>loader 通过（loader）预处理函数，为 JavaScript 生态系统提供了更多能力。\n用户现在可以更加灵活地引入细粒度逻辑，例如压缩、打包、语言翻译和<a href="/loaders">其他更多</a>。</p>\n<h2 class="header"><a class="anchor" href="#-loader" id="-loader"></a><span class="text">解析 Loader</span><a class="icon-link" href="#-loader"></a></h2>\n<p>loader 遵循标准的<a href="/concepts/module-resolution/">模块解析</a>。多数情况下，loader 将从<a href="/concepts/module-resolution/#module-paths">模块路径</a>（通常将模块路径认为是 <code>npm install</code>, <code>node_modules</code>）解析。</p>\n<p>loader 模块需要导出为一个函数，并且使用 Node.js 兼容的 JavaScript 编写。通常使用 npm 进行管理，但是也可以将自定义 loader 作为应用程序中的文件。按照约定，loader 通常被命名为 <code>xxx-loader</code>（例如 <code>json-loader</code>）。有关详细信息，请查看<a href="/development/how-to-write-a-loader">如何编写 loader？</a>。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/concepts/loaders/">https://webpack.js.org/concepts/loaders/</a></p>\n</blockquote>\n',title:"Loader"},title:"Loader",url:"/concepts/loaders/"},{file:{attributes:{title:"插件(Plugins)",sort:5,contributors:["TheLarkInn","jhnns","johnstew","rouzbeh84"],group:"-",anchors:[{title:"剖析",id:"-"},{title:"用法",id:"-"},{title:"配置",id:"-"},{title:"Node API",id:"node-api"}],related:[]},body:'<p>插件是 wepback 的<a href="https://github.com/webpack/tapable">支柱</a>功能。webpack 自身也是构建于，你在 webpack 配置中用到的<strong>相同的插件系统</strong>之上！</p>\n<p>插件目的在于解决 <a href="/concepts/loaders">loader</a> 无法实现的<strong>其他事</strong>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">剖析</span><a class="icon-link" href="#-"></a></h2>\n<p>webpack <strong>插件</strong>是一个具有 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code>apply</code></a> 属性的 JavaScript 对象。<code>apply</code> 属性会被 webpack compiler 调用，并且 compiler 对象可在<strong>整个</strong>编译生命周期访问。</p>\n<p><strong>ConsoleLogOnBuildWebpackPlugin.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">ConsoleLogOnBuildWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nConsoleLogOnBuildWebpackPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'run\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"webpack 构建过程开始！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 作为一个聪明的 JavaScript 开发者，你可能还记得 <code>Function.prototype.apply</code> 方法。通过这个方法你可以把任意函数作为插件传递（<code>this</code> 将指向 <code>compiler</code>）。你可以在配置中使用这样的方式来内联自定义插件。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>由于<strong>插件</strong>可以携带参数/选项，你必须在 webpack 配置中，向 <code>plugins</code> 属性传入 <code>new</code> 实例。</p>\n<p>根据你的 webpack 用法，这里有多种方式使用插件。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">配置</span><a class="icon-link" href="#-"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过 npm 安装</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//访问内置的插件</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'my-first-webpack.bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.(js|jsx)$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token string">\'./src/index.html\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#node-api" id="node-api"></a><span class="text">Node API</span><a class="icon-link" href="#node-api"></a></h3>\n<blockquote class="todo"><div class="tip-content"> 即便使用 Node API，用户也应该在配置中传入 <code>plugins</code> 属性。<code>compiler.apply</code> 并不是推荐的使用方式。 </div></blockquote><p><strong>some-node-script.js</strong></p>\n<pre><code class="lang-javascript">  <span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//访问 webpack 运行时(runtime)</span>\n  <span class="token keyword">const</span> configuration <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProgressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 你知道吗：以上看到的示例和 <a href="https://github.com/webpack/webpack/blob/e7087ffeda7fa37dfe2ca70b5593c6e899629a2c/bin/webpack.js#L290-L292">webpack 自身运行时(runtime)</a> 极其类似。<a href="https://github.com/webpack/webpack">wepback 源码</a>中隐藏有大量使用示例，你可以用在自己的配置和脚本中。 </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/concepts/plugins/">https://webpack.js.org/concepts/plugins/</a></p>\n</blockquote>\n',title:"插件(Plugins)"},title:"插件(Plugins)",url:"/concepts/plugins/"},{file:{attributes:{title:"配置(Configuration)",sort:6,contributors:["TheLarkInn","simon04"],group:"-",anchors:[{title:"最简单的配置",id:"-"},{title:"多个 Target",id:"-target"},{title:"使用其他配置语言",id:"-"}],related:[]},body:'<p>你可能已经注意到，很少有 webpack 配置看起来很完全相同。这是因为 <strong>webpack 的配置文件，是导出一个对象的 JavaScript 文件。</strong>此对象，由 webpack 根据对象定义的属性进行解析。</p>\n<p>因为 webpack 配置是标准的 Node.js CommonJS 模块，你<strong>可以做到以下事情</strong>：</p>\n<ul>\n<li>通过 <code>require(...)</code> 导入其他文件</li>\n<li>通过 <code>require(...)</code> 使用 npm 的工具函数</li>\n<li>使用 JavaScript 控制流表达式，例如 <code>?:</code> 操作符</li>\n<li>对常用值使用常量或变量</li>\n<li>编写并执行函数来生成部分配置</li>\n</ul>\n<p>请在合适的时机使用这些特性。</p>\n<p>虽然技术上可行，<strong>但应避免以下做法</strong>：</p>\n<ul>\n<li>在使用 webpack 命令行接口(CLI)（应该编写自己的命令行接口(CLI)，或<a href="/configuration/configuration-types/">使用 <code>--env</code></a>）时，访问命令行接口(CLI)参数</li>\n<li>导出不确定的值（调用 webpack 两次应该产生同样的输出文件）</li>\n<li>编写很长的配置（应该将配置拆分为多个文件）</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> 你需要从这份文档中收获最大的点，就是你的 webpack 配置，可以有很多种的格式和风格。但为了你和你的团队能够易于理解和维护，你们要始终采取同一种用法、格式和风格。 </div></blockquote><p>接下来的例子展示了 webpack 配置对象(webpack configuration object)如何即具有表现力，又具有可配置性，这是因为<em>配置对象即是代码</em>：</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">最简单的配置</span><a class="icon-link" href="#-"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./foo.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'foo.bundle.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-target" id="-target"></a><span class="text">多个 Target</span><a class="icon-link" href="#-target"></a></h2>\n<p>查看：<a href="/configuration/configuration-types/#exporting-multiple-configurations">导出多个配置</a></p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">使用其他配置语言</span><a class="icon-link" href="#-"></a></h2>\n<p>webpack 接受以多种编程和数据语言编写的配置文件。</p>\n<p>查看：<a href="/configuration/configuration-languages/">配置语言</a></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/concepts/configuration/">https://webpack.js.org/concepts/configuration/</a></p>\n</blockquote>\n',title:"配置(Configuration)"},title:"配置(Configuration)",url:"/concepts/configuration/"},{file:{attributes:{title:"模块(Modules)",sort:7,contributors:["TheLarkInn","rouzbeh84","simon04"],group:"-",anchors:[{title:"什么是 webpack 模块",id:"-webpack-"},{title:"支持的模块类型",id:"-"}],related:[]},body:'<p>在<a href="https://en.wikipedia.org/wiki/Modular_programming">模块化编程</a>中，开发者将程序分解成离散功能块(discrete chunks of functionality)，并称之为<em>模块</em>。</p>\n<p>每个模块具有比完整程序更小的接触面，使得校验、调试、测试轻而易举。\n精心编写的<em>模块</em>提供了可靠的抽象和封装界限，使得应用程序中每个模块都具有条理清楚的设计和明确的目的。</p>\n<p>Node.js 从最一开始就支持模块化编程。然而，在 web，<em>模块化</em>的支持正缓慢到来。在 web 存在多种支持 JavaScript 模块化的工具，这些工具各有优势和限制。webpack 基于从这些系统获得的经验教训，并将<em>模块</em>的概念应用于项目中的任何文件。</p>\n<h2 class="header"><a class="anchor" href="#-webpack-" id="-webpack-"></a><span class="text">什么是 webpack 模块</span><a class="icon-link" href="#-webpack-"></a></h2>\n<p>对比 <a href="https://nodejs.org/api/modules.html">Node.js 模块</a>，webpack <em>模块</em>能够以各种方式表达它们的依赖关系，几个例子如下：</p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">ES2015 <code>import</code></a> 语句</li>\n<li><a href="http://www.commonjs.org/specs/modules/1.0/">CommonJS</a> <code>require()</code> 语句</li>\n<li><a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md">AMD</a> <code>define</code> 和 <code>require</code> 语句</li>\n<li>css/sass/less 文件中的 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import"><code>@import</code> 语句</a>。</li>\n<li>样式(<code>url(...)</code>)或 HTML 文件(<code>&lt;img src=...&gt;</code>)中的图片链接(image url)</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> webpack 1 需要特定的 loader 来转换 ES 2015 <code>import</code>，然而通过 webpack 2 可以开箱即用。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">支持的模块类型</span><a class="icon-link" href="#-"></a></h2>\n<p>webpack 通过 <em>loader</em> 可以支持各种语言和预处理器编写模块。<em>loader</em> 描述了 webpack <strong>如何</strong>处理 非 JavaScript(non-JavaScript) <em>模块</em>，并且在<em>bundle</em>中引入这些<em>依赖</em>。\nwebpack 社区已经为各种流行语言和语言处理器构建了 <em>loader</em>，包括：</p>\n<ul>\n<li><a href="http://coffeescript.org">CoffeeScript</a></li>\n<li><a href="https://www.typescriptlang.org">TypeScript</a></li>\n<li><a href="https://babeljs.io">ESNext (Babel)</a></li>\n<li><a href="http://sass-lang.com">Sass</a></li>\n<li><a href="http://lesscss.org">Less</a></li>\n<li><a href="http://stylus-lang.com">Stylus</a></li>\n</ul>\n<p>总的来说，webpack 提供了可定制的、强大和丰富的 API，允许<strong>任何技术栈</strong>使用 webpack，保持了在你的开发、测试和生成流程中<strong>无侵入性(non-opinionated)</strong>。</p>\n<p>有关完整列表，请参考 <a href="/loaders"><strong>loader 列表</strong></a> 或 <a href="/api/loaders"><strong>自己编写</strong></a>。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/concepts/modules/">https://webpack.js.org/concepts/modules/</a></p>\n</blockquote>\n',title:"模块(Modules)"},title:"模块(Modules)",url:"/concepts/modules/"},{file:{attributes:{title:"模块解析(Module Resolution)",sort:8,contributors:["pastelsky","pksjce"],group:"-",anchors:[{title:"webpack 中的解析规则",id:"webpack-"},{title:"绝对路径",id:"-"},{title:"相对路径",id:"-"},{title:"模块路径",id:"-"},{title:"解析 Loader(Resolving Loaders)",id:"-loader-resolving-loaders-"},{title:"缓存",id:"-"}],related:[]},body:'<p>resolver 是一个库(library)，用于帮助找到模块的绝对路径。一个模块可以作为另一个模块的依赖模块，然后被后者引用，如下：</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">\'path/to/module\'</span>\n<span class="token comment">// 或者</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path/to/module\'</span><span class="token punctuation">)</span>\n</code></pre>\n<p>所依赖的模块可以是来自应用程序代码或第三方的库(library)。resolver 帮助 webpack 找到 bundle 中需要引入的模块代码，这些代码在包含在每个 <code>require</code>/<code>import</code> 语句中。\n当打包模块时，<code>webpack</code> 使用 <a href="https://github.com/webpack/enhanced-resolve">enhanced-resolve</a> 来解析文件路径</p>\n<h2 class="header"><a class="anchor" href="#webpack-" id="webpack-"></a><span class="text">webpack 中的解析规则</span><a class="icon-link" href="#webpack-"></a></h2>\n<p>使用 <code>enhanced-resolve</code>，webpack 能够解析三种文件路径：</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">绝对路径</span><a class="icon-link" href="#-"></a></h3>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token string">"/home/me/file"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token string">"C:\\\\Users\\\\me\\\\file"</span><span class="token punctuation">;</span>\n</code></pre>\n<p>由于我们已经取得文件的绝对路径，因此不需要进一步再做解析。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">相对路径</span><a class="icon-link" href="#-"></a></h3>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token string">"../src/file1"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">"./file2"</span><span class="token punctuation">;</span>\n</code></pre>\n<p>在这种情况下，使用 <code>import</code> 或 <code>require</code> 的资源文件(resource file)所在的目录被认为是上下文目录(context directory)。在 <code>import/require</code> 中给定的相对路径，会添加此上下文路径(context path)，以产生模块的绝对路径(absolute path)。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">模块路径</span><a class="icon-link" href="#-"></a></h3>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token string">"module"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">"module/lib/file"</span><span class="token punctuation">;</span>\n</code></pre>\n<p>模块将在 <a href="/configuration/resolve/#resolve-modules"><code>resolve.modules</code></a> 中指定的所有目录内搜索。\n你可以替换初始模块路径，此替换路径通过使用 <a href="/configuration/resolve/#resolve-alias"><code>resolve.alias</code></a> 配置选项来创建一个别名。</p>\n<p>一旦根据上述规则解析路径后，解析器(resolver)将检查路径是否指向文件或目录。如果路径指向一个文件：</p>\n<ul>\n<li>如果路径具有文件扩展名，则被直接将文件打包。</li>\n<li>否则，将使用 [<code>resolve.extensions</code>] 选项作为文件扩展名来解析，此选项告诉解析器在解析中能够接受哪些扩展名（例如 <code>.js</code>, <code>.jsx</code>）。</li>\n</ul>\n<p>如果路径指向一个文件夹，则采取以下步骤找到具有正确扩展名的正确文件：</p>\n<ul>\n<li>如果文件夹中包含 <code>package.json</code> 文件，则按照顺序查找 <a href="/configuration/resolve/#resolve-mainfields"><code>resolve.mainFields</code></a> 配置选项中指定的字段。并且 <code>package.json</code> 中的第一个这样的字段确定文件路径。</li>\n<li>如果 <code>package.json</code> 文件不存在或者 <code>package.json</code> 文件中的 main 字段没有返回一个有效路径，则按照顺序查找 <a href="/configuration/resolve/#resolve-mainfiles"><code>resolve.mainFiles</code></a> 配置选项中指定的文件名，看是否能在 import/require 目录下匹配到一个存在的文件名。</li>\n<li>文件扩展名通过 <code>resolve.extensions</code> 选项采用类似的方法进行解析。</li>\n</ul>\n<p>webpack 根据构建目标(build target)为这些选项提供了合理的<a href="/configuration/resolve">默认</a>配置。</p>\n<h2 class="header"><a class="anchor" href="#-loader-resolving-loaders-" id="-loader-resolving-loaders-"></a><span class="text">解析 Loader(Resolving Loaders)</span><a class="icon-link" href="#-loader-resolving-loaders-"></a></h2>\n<p>Loader 解析遵循与文件解析器指定的规则相同的规则。但是 <a href="/configuration/resolve/#resolveloader"><code>resolveLoader</code></a> 配置选项可以用来为 Loader 提供独立的解析规则。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">缓存</span><a class="icon-link" href="#-"></a></h2>\n<p>每个文件系统访问都被缓存，以便更快触发对同一文件的多个并行或串行请求。在<a href="/configuration/watch/#watch">观察模式</a>下，只有修改过的文件会从缓存中摘出。如果关闭观察模式，在每次编译前清理缓存。</p>\n<p>有关上述配置的更多信息，请查看<a href="/configuration/resolve">解析 API</a>学习。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/concepts/module-resolution/">https://webpack.js.org/concepts/module-resolution/</a></p>\n</blockquote>\n',title:"模块解析(Module Resolution)"},title:"模块解析(Module Resolution)",url:"/concepts/module-resolution/"},{file:{attributes:{title:"依赖图(Dependency Graph)",sort:9,contributors:["TheLarkInn"],group:"-",anchors:[],related:[]},body:'<p>任何时候，一个文件依赖于另一个文件，webpack 就把此视为文件之间有<em>依赖关系</em>。这使得 webpack 可以接收非代码资源(non-code asset)（例如图像或 web 字体），并且可以把它们作为<em>依赖</em>提供给你的应用程序。</p>\n<p>webpack 从命令行或配置文件中定义的一个模块列表开始，处理你的应用程序。\n从这些<em>入口起点</em>开始，webpack 递归地构建一个<em>依赖图</em>，这个依赖图包含着应用程序所需的每个模块，然后将所有这些模块打包为少量的 <em>bundle</em> - 通常只有一个 - 可由浏览器加载。</p>\n<blockquote class="tip"><div class="tip-content"> 对于 <em>HTTP/1.1</em> 客户端，由 webpack 打包你的应用程序会尤其强大，因为在浏览器发起一个新请求时，它能够减少应用程序必须等待的时间。对于 <em>HTTP/2</em>，你还可以使用代码拆分(Code Splitting)以及通过 webpack 打包来实现<a href="https://medium.com/webpack/webpack-http-2-7083ec3f3ce6#.7y5d3hz59">最佳优化</a>。 </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/concepts/dependency-graph/">https://webpack.js.org/concepts/dependency-graph/</a></p>\n</blockquote>\n',title:"依赖图(Dependency Graph)"},title:"依赖图(Dependency Graph)",url:"/concepts/dependency-graph/"},{file:{attributes:{title:"构建目标(Targets)",sort:10,contributors:["TheLarkInn","johnstew","rouzbeh84","srilman"],group:"-",anchors:[{title:"用法",id:"-"},{title:"多个 Target",id:"-target"},{title:"资源",id:"-"}],related:[]},body:'<p>因为服务器和浏览器代码都可以用 JavaScript 编写，所以 webpack 提供了多种<em>构建目标(target)</em>，你可以在你的 webpack <a href="/configuration">配置</a>中设置。</p>\n<blockquote class="warning"><div class="tip-content"> webpack 的 <code>target</code> 属性不要和 <code>output.libraryTarget</code> 属性混淆。有关 <code>output</code> 属性的更多信息，请查看<a href="/concepts/output">我们的指南</a>。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>要设置 <code>target</code> 属性，只需要在你的 webpack 配置中设置 target 的值。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">:</span> <span class="token string">\'node\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>在上面例子中，使用 <code>node</code> webpack 会编译为用于「类 Node.js」环境（使用 Node.js 的 <code>require</code> ，而不是使用任意内置模块（如 <code>fs</code> 或 <code>path</code>）来加载 chunk）。</p>\n<p>每个<em>target</em>都有各种部署(deployment)/环境(environment)特定的附加项，以支持满足其需求。查看<a href="/configuration/target">target 的可用值</a>。</p>\n<blockquote class="todo"><div class="tip-content"> Further expansion for other popular target values </div></blockquote><h2 class="header"><a class="anchor" href="#-target" id="-target"></a><span class="text">多个 Target</span><a class="icon-link" href="#-target"></a></h2>\n<p>尽管 webpack 不支持向 <code>target</code> 传入多个字符串，你可以通过打包两份分离的配置来创建同构的库：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> serverConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">:</span> <span class="token string">\'node\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'lib.node.js\'</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//…</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> clientConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">:</span> <span class="token string">\'web\'</span><span class="token punctuation">,</span> <span class="token comment">// &lt;=== 默认是 \'web\'，可省略</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'lib.js\'</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//…</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span> serverConfig<span class="token punctuation">,</span> clientConfig <span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre>\n<p>上面的例子将在你的 <code>dist</code> 文件夹下创建 <code>lib.js</code> 和 <code>lib.node.js</code> 文件。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">资源</span><a class="icon-link" href="#-"></a></h2>\n<p>从上面的选项可以看出有多个不同的部署<em>目标</em>可供选择。下面是一个示例列表，以及你可以参考的资源。</p>\n<ul>\n<li><strong><a href="https://github.com/TheLarkInn/compare-webpack-target-bundles">compare-webpack-target-bundles</a></strong>：有关「测试和查看」不同的 webpack <em>target</em> 的大量资源。也有大量 bug 报告。</li>\n<li><strong><a href="https://github.com/chentsulin/electron-react-boilerplate">Boilerplate of Electron-React Application</a></strong>：一个 electron 主进程和渲染进程构建过程的很好的例子。</li>\n</ul>\n<blockquote class="todo"><div class="tip-content"> Need to find up to date examples of these webpack targets being used in live code or boilerplates. </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/concepts/targets/">https://webpack.js.org/concepts/targets/</a></p>\n</blockquote>\n',title:"构建目标(Targets)"},title:"构建目标(Targets)",url:"/concepts/targets/"},{file:{attributes:{title:"Manifest",sort:10,contributors:["skipjack"],related:[{title:"分离 Manifest",url:"https://survivejs.com/webpack/optimizing/separating-manifest/"},{title:"使用 webpack 提供可预测的长效缓存",url:"https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31"},{title:"缓存",url:"/guides/caching"}],group:"-",anchors:[{title:"Runtime",id:"runtime"},{title:"Manifest",id:"manifest"},{title:"问题",id:"-"}]},body:'<p>在使用 webpack 构建的典型应用程序或站点中，有三种主要的代码类型：</p>\n<ol>\n<li>你或你的团队编写的源码。</li>\n<li>你的源码会依赖的任何第三方的 library 或 &quot;vendor&quot; 代码。</li>\n<li>webpack 的 runtime 和 <em>manifest</em>，管理所有模块的交互。</li>\n</ol>\n<p>本文将重点介绍这三个部分中的最后部分，runtime 和 manifest。</p>\n<h2 class="header"><a class="anchor" href="#runtime" id="runtime"></a><span class="text">Runtime</span><a class="icon-link" href="#runtime"></a></h2>\n<p>如上所述，我们这里只简略地介绍一下。runtime，以及伴随的 manifest 数据，主要是指：在浏览器运行时，webpack 用来连接模块化的应用程序的所有代码。runtime 包含：在模块交互时，连接模块所需的加载和解析逻辑。包括浏览器中的已加载模块的连接，以及懒加载模块的执行逻辑。</p>\n<h2 class="header"><a class="anchor" href="#manifest" id="manifest"></a><span class="text">Manifest</span><a class="icon-link" href="#manifest"></a></h2>\n<p>那么，一旦你的应用程序中，形如 <code>index.html</code> 文件、一些 bundle 和各种资源加载到浏览器中，会发生什么？你精心安排的 <code>/src</code> 目录的文件结构现在已经不存在，所以 webpack 如何管理所有模块之间的交互呢？这就是 manifest 数据用途的由来……</p>\n<p>当编译器(compiler)开始执行、解析和映射应用程序时，它会保留所有模块的详细要点。这个数据集合称为 &quot;Manifest&quot;，当完成打包并发送到浏览器时，会在运行时通过 Manifest 来解析和加载模块。无论你选择哪种<a href="/api/module-methods">模块语法</a>，那些 <code>import</code> 或 <code>require</code> 语句现在都已经转换为 <code>__webpack_require__</code> 方法，此方法指向模块标识符(module identifier)。通过使用 manifest 中的数据，runtime 将能够查询模块标识符，检索出背后对应的模块。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">问题</span><a class="icon-link" href="#-"></a></h2>\n<p>所以，现在你应该对 webpack 在幕后工作有一点了解。“但是，这对我有什么影响呢？”，你可能会问。答案是大多数情况下没有。runtime 做自己该做的，使用 manifest 来执行其操作，然后，一旦你的应用程序加载到浏览器中，所有内容将展现出魔幻般运行。然而，如果你决定通过使用浏览器缓存来改善项目的性能，理解这一过程将突然变得尤为重要。</p>\n<p>通过使用 bundle 计算出内容散列(content hash)作为文件名称，这样在内容或文件修改时，浏览器中将通过新的内容散列指向新的文件，从而使缓存无效。一旦你开始这样做，你会立即注意到一些有趣的行为。即使表面上某些内容没有修改，计算出的哈希还是会改变。这是因为，runtime 和 manifest 的注入在每次构建都会发生变化。</p>\n<p>查看<em>管理构建文件</em>指南的 <a href="/guides/output-management#the-manifest">manifest 部分</a>，了解如何提取 manifest，并阅读下面的指南，以了解更多长效缓存错综复杂之处。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/concepts/manifest/">https://webpack.js.org/concepts/manifest/</a></p>\n</blockquote>\n',title:"Manifest"},title:"Manifest",url:"/concepts/manifest/"},{file:{attributes:{title:"模块热替换(Hot Module Replacement)",sort:11,contributors:["GRardB","SpaceK33z","rouzbeh84","skipjack","sokra"],group:"-",anchors:[{title:"这一切是如何运行的？",id:"-"},{title:"在应用程序中",id:"-"},{title:"在编译器中",id:"-"},{title:"在模块中",id:"-"},{title:"在 HMR Runtime 中",id:"-hmr-runtime-"},{title:"入门",id:"-"}],related:[]},body:'<p>模块热替换(HMR - Hot Module Replacement)功能会在应用程序运行过程中替换、添加或删除<a href="/concepts/modules/">模块</a>，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：</p>\n<ul>\n<li>保留在完全重新加载页面时丢失的应用程序状态。</li>\n<li>只更新变更内容，以节省宝贵的开发时间。</li>\n<li>调整样式更加快速 - 几乎相当于在浏览器调试器中更改样式。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">这一切是如何运行的？</span><a class="icon-link" href="#-"></a></h2>\n<p>让我们从一些不同的角度观察，以了解 HMR 的工作原理……</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">在应用程序中</span><a class="icon-link" href="#-"></a></h3>\n<p>通过以下步骤，可以做到在应用程序中置换(swap in and out)模块：</p>\n<ol>\n<li>应用程序代码要求 HMR runtime 检查更新。</li>\n<li>HMR runtime（异步）下载更新，然后通知应用程序代码。</li>\n<li>应用程序代码要求 HMR runtime 应用更新。</li>\n<li>HMR runtime（异步）应用更新。</li>\n</ol>\n<p>你可以设置 HMR，以使此进程自动触发更新，或者你可以选择要求在用户交互时进行更新。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">在编译器中</span><a class="icon-link" href="#-"></a></h3>\n<p>除了普通资源，编译器(compiler)需要发出 &quot;update&quot;，以允许更新之前的版本到新的版本。&quot;update&quot; 由两部分组成：</p>\n<ol>\n<li>更新后的 <a href="/concepts/manifest">manifest</a>(JSON)</li>\n<li>一个或多个更新后的 chunk (JavaScript)</li>\n</ol>\n<p>manifest 包括新的编译 hash 和所有的待更新 chunk 目录。每个更新 chunk 都含有对应于此 chunk 的全部更新模块（或一个 flag 用于表明此模块要被移除）的代码。</p>\n<p>编译器确保模块 ID 和 chunk ID 在这些构建之间保持一致。通常将这些 ID 存储在内存中（例如，使用 <a href="/configuration/dev-server/">webpack-dev-server</a> 时），但是也可能将它们存储在一个 JSON 文件中。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">在模块中</span><a class="icon-link" href="#-"></a></h3>\n<p>HMR 是可选功能，只会影响包含 HMR 代码的模块。举个例子，通过 <a href="https://github.com/webpack/style-loader"><code>style-loader</code></a> 为 style 样式追加补丁。\n为了运行追加补丁，<code>style-loader</code> 实现了 HMR 接口；当它通过 HMR 接收到更新，它会使用新的样式替换旧的样式。</p>\n<p>类似的，当在一个模块中实现了 HMR 接口，你可以描述出当模块被更新后发生了什么。然而在多数情况下，不需要强制在每个模块中写入 HMR 代码。如果一个模块没有 HMR 处理函数，更新就会冒泡。这意味着一个简单的处理函数能够对整个模块树(complete module tree)进行更新。如果在这个模块树中，一个单独的模块被更新，那么整组依赖模块都会被重新加载。</p>\n<p>有关 <code>module.hot</code> 接口的详细信息，请查看 <a href="/api/hot-module-replacement">HMR API 页面</a>。</p>\n<h3 class="header"><a class="anchor" href="#-hmr-runtime-" id="-hmr-runtime-"></a><span class="text">在 HMR Runtime 中</span><a class="icon-link" href="#-hmr-runtime-"></a></h3>\n<p>这些事情比较有技术性……如果你对其内部不感兴趣，可以随时跳到 <a href="/api/hot-module-replacement">HMR API 页面</a>或 <a href="/guides/hot-module-replacement">HMR 指南</a>。</p>\n<p>对于模块系统的 runtime，附加的代码被发送到 <code>parents</code> 和 <code>children</code> 跟踪模块。在管理方面，runtime 支持两个方法 <code>check</code> 和 <code>apply</code>。</p>\n<p><code>check</code> 发送 HTTP 请求来更新 manifest。如果请求失败，说明没有可用更新。如果请求成功，待更新 chunk 会和当前加载过的 chunk 进行比较。对每个加载过的 chunk，会下载相对应的待更新 chunk。当所有待更新 chunk 完成下载，就会准备切换到 <code>ready</code> 状态。</p>\n<p><code>apply</code> 方法将所有被更新模块标记为无效。对于每个无效模块，都需要在模块中有一个更新处理函数，或者在它的父级模块们中有更新处理函数。否则，无效标记冒泡，并也使父级无效。每个冒泡继续直到到达应用程序入口起点，或者到达带有更新处理函数的模块（以最先到达为准）。如果它从入口起点开始冒泡，则此过程失败。</p>\n<p>之后，所有无效模块都被（通过 dispose 处理函数）处理和解除加载。然后更新当前 hash，并且调用所有 &quot;accept&quot; 处理函数。runtime 切换回<code>闲置</code>状态，一切照常继续。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">入门</span><a class="icon-link" href="#-"></a></h2>\n<p>在开发过程中，可以将 HMR 作为 LiveReload 的替代。<a href="/configuration/dev-server/">webpack-dev-server</a> 支持 <code>hot</code> 模式，在试图重新加载整个页面之前，热模式会尝试使用 HMR 来更新。更多细节请查看<a href="/guides/hot-module-replacement">模块热更新指南</a>。</p>\n<p>与许多其他功能一样，webpack 的强大之处在于它的可定制化。取决于特定项目需求，会有<em>许多种</em>配置 HMR 的方式。然而，对于多数实现来说，<code>webpack-dev-server</code> 能够配合良好，可以让你快速入门 HMR。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/concepts/hot-module-replacement/">https://webpack.js.org/concepts/hot-module-replacement/</a></p>\n</blockquote>\n',title:"模块热替换(Hot Module Replacement)"},title:"模块热替换(Hot Module Replacement)",url:"/concepts/hot-module-replacement/"}]},{title:"配置",url:"configuration",pages:[{file:{attributes:{title:"使用不同语言进行配置(Configuration Languages)",sort:2,contributors:["peterblazejewicz","simon04","skipjack","sokra","tarang9211","youta1119"],group:"-",anchors:[{title:"TypeScript",id:"typescript"},{title:"CoffeeScript",id:"coffeescript"},{title:"Babel and JSX",id:"babel-and-jsx"}],related:[]},body:'<p>webpack 接受以多种编程和数据语言编写的配置文件。支持的文件扩展名列表，可以在 <a href="https://github.com/js-cli/js-interpret">node-interpret</a> 包中找到。使用 <a href="https://github.com/js-cli/js-interpret">node-interpret</a>，webpack 可以处理许多不同类型的配置文件。</p>\n<h2 class="header"><a class="anchor" href="#typescript" id="typescript"></a><span class="text">TypeScript</span><a class="icon-link" href="#typescript"></a></h2>\n<p>为了用 <a href="http://www.typescriptlang.org/">TypeScript</a> 书写 webpack 的配置文件，必须先安装相关依赖：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev typescript ts-node @types/node @types/webpack\n</code></pre>\n<p>之后就可以使用 TypeScript 书写 webpack 的配置文件了：</p>\n<p><strong>webpack.config.ts</strong></p>\n<pre><code class="lang-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> as webpack from <span class="token string">\'webpack\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> as path from <span class="token string">\'path\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config<span class="token punctuation">:</span> webpack<span class="token punctuation">.</span>Configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./foo.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'foo.bundle.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span>\n</code></pre>\n<p>Not that you&#39;ll also need to check your <code>tsconfig.json</code> file. If the module in <code>compilerOptions</code> in <code>tsconfig.json</code> is <code>commonjs</code>, the setting is complete, else webpack will fail with an error. This occurs because <code>ts-node</code> does not support any module syntax other than <code>commonjs</code>.</p>\n<p>There are two solutions to this issue:</p>\n<ul>\n<li>Modify <code>tsconfig.json</code>.</li>\n<li>Install <code>tsconfig-paths</code>.</li>\n</ul>\n<p>The <strong>first option</strong> is to open your <code>tsconfig.json</code> file and look for <code>compilerOptions</code>. Set <code>target</code> to <code>&quot;ES5&quot;</code> and <code>module</code> to <code>&quot;CommonJS&quot;</code> (or completely remove the <code>module</code> option).</p>\n<p>The <strong>second option</strong> is to install the <code>tsconfig-paths</code> package:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev tsconfig-paths\n</code></pre>\n<p>And create a separate TypeScript configuration specifically for your webpack configs:</p>\n<p><strong>tsconfig-for-webpack-config.json</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>\n    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> <code>ts-node</code> can resolve a <code>tsconfig.json</code> file using the environment variable provided by <code>tsconfig-path</code>. </div></blockquote><p>Then set the environment variable <code>process.env.TS_NODE_PROJECT</code> provided by <code>tsconfig-path</code> like so:</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"TS_NODE_PROJECT=\\"</span>tsconfig-for-webpack-config.json\\<span class="token string">" webpack"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#coffeescript" id="coffeescript"></a><span class="text">CoffeeScript</span><a class="icon-link" href="#coffeescript"></a></h2>\n<p>类似的，为了使用 <a href="http://coffeescript.org/">CoffeeScript</a> 来书写配置文件, 同样需要安装相关的依赖：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev coffee-script\n</code></pre>\n<p>之后就可以使用 Coffeecript 书写配置文件了：</p>\n<p><strong>webpack.config.coffee</strong></p>\n<pre><code class="lang-javascript">HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span>\nwebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span>\npath <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n\nconfig <span class="token operator">=</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span>\n  output<span class="token punctuation">:</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'my-first-webpack.bundle.js\'</span>\n  module<span class="token punctuation">:</span> rules<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.(js|jsx)$/</span>\n    use<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span>\n  <span class="token punctuation">}</span> <span class="token punctuation">]</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin<span class="token punctuation">)</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span>template<span class="token punctuation">:</span> <span class="token string">\'./src/index.html\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config\n</code></pre>\n<h2 class="header"><a class="anchor" href="#babel-and-jsx" id="babel-and-jsx"></a><span class="text">Babel and JSX</span><a class="icon-link" href="#babel-and-jsx"></a></h2>\n<p>在以下的例子中，使用了 JSX（React 形式的 javascript）以及 Babel 来创建 JSON 形式的 webpack 配置文件：</p>\n<blockquote>\n<p>感谢 <a href="https://twitter.com/_developit/status/769583291666169862">Jason Miller</a></p>\n</blockquote>\n<p>首先安装依赖：</p>\n<pre><code class="lang-js">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev babel<span class="token operator">-</span>register jsxobj babel<span class="token operator">-</span>preset<span class="token operator">-</span>es2015\n</code></pre>\n<p><strong>.babelrc</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"es2015"</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>webpack.config.babel.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> jsxobj <span class="token keyword">from</span> <span class="token string">\'jsxobj\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// example of an imported plugin</span>\n<span class="token keyword">const</span> CustomPlugin <span class="token operator">=</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>config<span class="token punctuation">,</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'custom-plugin\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>webpack target<span class="token operator">=</span><span class="token string">"web"</span> watch<span class="token operator">></span>\n    <span class="token operator">&lt;</span>entry path<span class="token operator">=</span><span class="token string">"src/index.js"</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>resolve<span class="token operator">></span>\n      <span class="token operator">&lt;</span>alias <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>\n        react<span class="token punctuation">:</span> <span class="token string">\'preact-compat\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'react-dom\'</span><span class="token punctuation">:</span> <span class="token string">\'preact-compat\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>resolve<span class="token operator">></span>\n    <span class="token operator">&lt;</span>plugins<span class="token operator">></span>\n      <span class="token operator">&lt;</span>uglify<span class="token operator">-</span>js opts<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n        compression<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        mangle<span class="token punctuation">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>CustomPlugin foo<span class="token operator">=</span><span class="token string">"bar"</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>webpack<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 如果你在其他地方也使用了 Babel 并且把<code>模块(modules)</code>设置为了 <code>false</code>，那么你要么同时维护两份单独的 <code>.babelrc</code> 文件，要么使用 <code>conts jsxobj = requrie(&#39;jsxobj&#39;);</code> 并且使用 <code>moduel.exports</code> 而不是新版本的 <code>import</code> 和 <code>export</code> 语法。这是因为尽管 Node.js 已经支持了许多 ES6 的新特性，然而还无法支持 ES6 模块语法。 </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/configuration-languages/">https://webpack.js.org/configuration/configuration-languages/</a></p>\n</blockquote>\n',title:"使用不同语言进行配置(Configuration Languages)"},title:"使用不同语言进行配置(Configuration Languages)",url:"/configuration/configuration-languages/"},{file:{attributes:{title:"多种配置类型(Configuration Types)",sort:3,contributors:["kbariotis","simon04","skipjack","sokra"],group:"-",anchors:[{title:"导出为一个函数",id:"-"},{title:"导出一个 Promise",id:"-promise"},{title:"导出多个配置对象",id:"-"}],related:[]},body:'<p>除了导出单个配置对象，还有一些方式满足其他需求。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">导出为一个函数</span><a class="icon-link" href="#-"></a></h2>\n<p>最终，你会发现需要在<a href="/guides/development">开发</a>和<a href="/guides/production">生产构建</a>之间，消除 <code>webpack.config.js</code> 的差异。（至少）有两种选项：</p>\n<p>作为导出一个配置对象的替代，还有一种可选的导出方式是，从 webpack 配置文件中导出一个函数。该函数在调用时，可传入两个参数：</p>\n<ul>\n<li>环境对象(environment)作为第一个参数。有关语法示例，请查看<a href="/api/cli#environment-options">CLI 文档的环境选项</a>。\n一个选项 map 对象（<code>argv</code>）作为第二个参数。这个对象描述了传递给 webpack 的选项，并且具有 <a href="/api/cli/#output-options"><code>output-filename</code></a> 和 <a href="/api/cli/#optimize-options"><code>optimize-minimize</code></a> 等 key。</li>\n</ul>\n<pre><code class="lang-diff"><span class="token deleted">-module.exports = {</span>\n<span class="token inserted">+module.exports = function(env, argv) {</span>\n<span class="token inserted">+  return {</span>\n<span class="token inserted">+    devtool: env.production ? \'source-maps\' : \'eval\',</span>\n     plugins: [\n       new webpack.optimize.UglifyJsPlugin({\n<span class="token inserted">+        compress: argv[\'optimize-minimize\'] // 只有传入 -p 或 --optimize-minimize</span>\n       })\n     ]\n<span class="token inserted">+  };</span>\n};\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-promise" id="-promise"></a><span class="text">导出一个 Promise</span><a class="icon-link" href="#-promise"></a></h2>\n<p>webpack 将运行由配置文件导出的函数，并且等待 Promise 返回。便于需要异步地加载所需的配置变量。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        entry<span class="token punctuation">:</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">,</span>\n        <span class="token comment">/* ... */</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">导出多个配置对象</span><a class="icon-link" href="#-"></a></h2>\n<p>作为导出一个配置对象/配置函数的替代，你可能需要导出多个配置对象（从 webpack 3.1.0 开始支持导出多个函数）。当运行 webpack 时，所有的配置对象都会构建。例如，导出多个配置对象，对于针对多个<a href="/configuration/output#output-librarytarget">构建目标</a>（例如 AMD 和 CommonJS）<a href="/guides/author-libraries">打包一个 library</a> 非常有用。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'./dist-amd.js\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token punctuation">:</span> <span class="token string">\'amd\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'./dist-commonjs.js\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token punctuation">:</span> <span class="token string">\'commonjs\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/configuration-types/">https://webpack.js.org/configuration/configuration-types/</a></p>\n</blockquote>\n',title:"多种配置类型(Configuration Types)"},title:"多种配置类型(Configuration Types)",url:"/configuration/configuration-types/"},{file:{attributes:{title:"入口和上下文(Entry and Context)",sort:4,contributors:["skipjack","sokra","tarang9211"],group:"-",anchors:[{title:"context",id:"context"},{title:"entry",id:"entry"},{title:"命名",id:"-"},{title:"动态入口",id:"-"}],related:[]},body:'<p>entry 对象是用于 webpack 查找启动并构建 bundle。其上下文是入口文件所处的目录的绝对路径的字符串。</p>\n<h2 class="header"><a class="anchor" href="#context" id="context"></a><span class="text"><code>context</code></span><a class="icon-link" href="#context"></a></h2>\n<p><code>string</code></p>\n<p>基础目录，<strong>绝对路径</strong>，用于从配置中解析入口起点(entry point)和 loader</p>\n<pre><code class="lang-js">context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span>\n</code></pre>\n<p>默认使用当前目录，但是推荐在配置中传递一个值。这使得你的配置独立于 CWD(current working directory - 当前执行路径)。</p>\n<hr>\n<h2 class="header"><a class="anchor" href="#entry" id="entry"></a><span class="text"><code>entry</code></span><a class="icon-link" href="#entry"></a></h2>\n<p><code>string | [string] | object { &lt;key&gt;: string | [string] } | (function: () =&gt; string | [string] | object { &lt;key&gt;: string | [string] })</code></p>\n<p>起点或是应用程序的起点入口。从这个起点开始，应用程序启动执行。如果传递一个数组，那么数组的每一项都会执行。</p>\n<p>动态加载的模块<strong>不是</strong>入口起点。</p>\n<p>简单规则：每个 HTML 页面都有一个入口起点。单页应用(SPA)：一个入口起点，多页应用(MPA)：多个入口起点。</p>\n<pre><code class="lang-js">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  home<span class="token punctuation">:</span> <span class="token string">"./home.js"</span><span class="token punctuation">,</span>\n  about<span class="token punctuation">:</span> <span class="token string">"./about.js"</span><span class="token punctuation">,</span>\n  contact<span class="token punctuation">:</span> <span class="token string">"./contact.js"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">命名</span><a class="icon-link" href="#-"></a></h3>\n<p>如果传入一个字符串或字符串数组，chunk 会被命名为 <code>main</code>。如果传入一个对象，则每个键(key)会是 chunk 的名称，该值描述了 chunk 的入口起点。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">动态入口</span><a class="icon-link" href="#-"></a></h3>\n<pre><code class="lang-js">entry<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">\'./demo\'</span>\n</code></pre>\n<p>或</p>\n<pre><code class="lang-js">entry<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'./demo\'</span><span class="token punctuation">,</span> <span class="token string">\'./demo2\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>当结合 <a href="/configuration/output#output-library"><code>output.library</code></a> 选项时：如果传入数组，则只导出最后一项。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/entry-context/">https://webpack.js.org/configuration/entry-context/</a></p>\n</blockquote>\n',title:"入口和上下文(Entry and Context)"},title:"入口和上下文(Entry and Context)",url:"/configuration/entry-context/"},{file:{attributes:{title:"输出(Output)",sort:5,contributors:["dhurlburtusa","fvgs","irth","mattce","skipjack","sokra","tomasAlabes"],group:"-",anchors:[{title:"output.auxiliaryComment",id:"output-auxiliarycomment"},{title:"output.chunkFilename",id:"output-chunkfilename"},{title:"output.chunkLoadTimeout",id:"output-chunkloadtimeout"},{title:"output.crossOriginLoading",id:"output-crossoriginloading"},{title:"output.devtoolFallbackModuleFilenameTemplate",id:"output-devtoolfallbackmodulefilenametemplate"},{title:"output.devtoolLineToLine",id:"output-devtoollinetoline"},{title:"output.devtoolModuleFilenameTemplate",id:"output-devtoolmodulefilenametemplate"},{title:"output.filename",id:"output-filename"},{title:"output.hashDigest",id:"output-hashdigest"},{title:"output.hashDigestLength",id:"output-hashdigestlength"},{title:"output.hashFunction",id:"output-hashfunction"},{title:"output.hashSalt",id:"output-hashsalt"},{title:"output.hotUpdateChunkFilename",id:"output-hotupdatechunkfilename"},{title:"output.hotUpdateFunction",id:"output-hotupdatefunction"},{title:"output.hotUpdateMainFilename",id:"output-hotupdatemainfilename"},{title:"output.jsonpFunction",id:"output-jsonpfunction"},{title:"output.library",id:"output-library"},{title:"output.libraryExport",id:"output-libraryexport"},{title:"output.libraryTarget",id:"output-librarytarget"},{title:"暴露为一个变量",id:"-"},{title:"通过在对象上赋值暴露",id:"-"},{title:"模块定义系统",id:"-"},{title:"其他 Targets",id:"-targets"},{title:"output.path",id:"output-path"},{title:"output.pathinfo",id:"output-pathinfo"},{title:"output.publicPath",id:"output-publicpath"},{title:"output.sourceMapFilename",id:"output-sourcemapfilename"},{title:"output.sourcePrefix",id:"output-sourceprefix"},{title:"output.strictModuleExceptionHandling",id:"output-strictmoduleexceptionhandling"},{title:"output.umdNamedDefine",id:"output-umdnameddefine"}],related:[]},body:'<p><code>output</code> 位于对象最顶级键(key)，包括了一组选项，指示 webpack 如何去输出、以及在哪里输出你的「bundle、asset 和其他你所打包或使用 webpack 载入的任何内容」。</p>\n<h2 class="header"><a class="anchor" href="#output-auxiliarycomment" id="output-auxiliarycomment"></a><span class="text"><code>output.auxiliaryComment</code></span><a class="icon-link" href="#output-auxiliarycomment"></a></h2>\n<p><code>string</code> <code>object</code></p>\n<p>在和 <a href="#output-library"><code>output.library</code></a> 和 <a href="#output-librarytarget"><code>output.libraryTarget</code></a> 一起使用时，此选项允许用户向导出容器(export wrapper)中插入注释。要为 <code>libraryTarget</code> 每种类型都插入相同的注释，将 <code>auxiliaryComment</code> 设置为一个字符串：</p>\n<pre><code class="lang-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  library<span class="token punctuation">:</span> <span class="token string">"someLibName"</span><span class="token punctuation">,</span>\n  libraryTarget<span class="token punctuation">:</span> <span class="token string">"umd"</span><span class="token punctuation">,</span>\n  filename<span class="token punctuation">:</span> <span class="token string">"someLibName.js"</span><span class="token punctuation">,</span>\n  auxiliaryComment<span class="token punctuation">:</span> <span class="token string">"Test Comment"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>将会生成如下：</p>\n<pre><code class="lang-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lodash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"lodash"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    exports<span class="token punctuation">[</span><span class="token string">"someLibName"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lodash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">else</span>\n    root<span class="token punctuation">[</span><span class="token string">"someLibName"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span><span class="token string">"_"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>__WEBPACK_EXTERNAL_MODULE_1__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>对于 <code>libraryTarget</code> 每种类型的注释进行更细粒度地控制，请传入一个对象：</p>\n<pre><code class="lang-js">auxiliaryComment<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  root<span class="token punctuation">:</span> <span class="token string">"Root Comment"</span><span class="token punctuation">,</span>\n  commonjs<span class="token punctuation">:</span> <span class="token string">"CommonJS Comment"</span><span class="token punctuation">,</span>\n  commonjs2<span class="token punctuation">:</span> <span class="token string">"CommonJS2 Comment"</span><span class="token punctuation">,</span>\n  amd<span class="token punctuation">:</span> <span class="token string">"AMD Comment"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#output-chunkfilename" id="output-chunkfilename"></a><span class="text"><code>output.chunkFilename</code></span><a class="icon-link" href="#output-chunkfilename"></a></h2>\n<p><code>string</code></p>\n<p>此选项决定了非入口(non-entry) chunk 文件的名称。有关可取的值的详细信息，请查看 <a href="#output-filename"><code>output.filename</code></a> 选项。</p>\n<p>注意，这些文件名需要在 runtime 根据 chunk 发送的请求去生成。因此，需要在 webpack runtime 输出 bundle 值时，将 chunk id 的值对应映射到占位符(如 <code>[name]</code> 和 <code>[chunkhash]</code>)。这会增加文件大小，并且在任何 chunk 的占位符值修改后，都会使 bundle 失效。</p>\n<p>默认使用 <code>[id].js</code> 或从 <a href="#output-filename"><code>output.filename</code></a> 中推断出的值（<code>[name]</code> 会被预先替换为 <code>[id]</code> 或 <code>[id].</code>）。</p>\n<h2 class="header"><a class="anchor" href="#output-chunkloadtimeout" id="output-chunkloadtimeout"></a><span class="text"><code>output.chunkLoadTimeout</code></span><a class="icon-link" href="#output-chunkloadtimeout"></a></h2>\n<p><code>integer</code></p>\n<p>chunk 请求到期之前的毫秒数，默认为 120 000。从 webpack 2.6.0 开始支持此选项。</p>\n<h2 class="header"><a class="anchor" href="#output-crossoriginloading" id="output-crossoriginloading"></a><span class="text"><code>output.crossOriginLoading</code></span><a class="icon-link" href="#output-crossoriginloading"></a></h2>\n<p><code>boolean</code> <code>string</code></p>\n<p>只用于 <a href="/configuration/target"><code>target</code></a> 是 web，使用了通过 script 标签的 JSONP 来按需加载 chunk。</p>\n<p>启用 <a href="https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-crossorigin">cross-origin 属性</a> 加载 chunk。以下是可接收的值……</p>\n<p><code>crossOriginLoading: false</code> - 禁用跨域加载（默认）</p>\n<p><code>crossOriginLoading: &quot;anonymous&quot;</code> - <strong>不带凭据(credential)</strong>启用跨域加载</p>\n<p><code>crossOriginLoading: &quot;use-credentials&quot;</code> - <strong>带凭据(credential)</strong>启用跨域加载 <strong>with credentials</strong></p>\n<h2 class="header"><a class="anchor" href="#output-devtoolfallbackmodulefilenametemplate" id="output-devtoolfallbackmodulefilenametemplate"></a><span class="text"><code>output.devtoolFallbackModuleFilenameTemplate</code></span><a class="icon-link" href="#output-devtoolfallbackmodulefilenametemplate"></a></h2>\n<p><code>string | function(info)</code></p>\n<p>当上面的模板字符串或函数产生重复时使用的备用内容。</p>\n<p>查看 <a href="#output-devtoolmodulefilenametemplate"><code>output.devtoolModuleFilenameTemplate</code></a>。</p>\n<h2 class="header"><a class="anchor" href="#output-devtoollinetoline" id="output-devtoollinetoline"></a><span class="text"><code>output.devtoolLineToLine</code></span><a class="icon-link" href="#output-devtoollinetoline"></a></h2>\n<p><code>boolean | object</code></p>\n<blockquote>\n<p>避免使用此选项，因为它们已废弃，并将很快删除。 it is <strong>deprecated</strong> and will soon be removed.</p>\n</blockquote>\n<p>对所有或某些模块启用「行到行映射(line to line mapping)」。这将生成基本的源映射(source map)，即生成资源(generated source)的每一行，映射到原始资源(original source)的同一行。这是一个性能优化点，并且应该只需要输入行(input line)和生成行(generated line)相匹配时才使用。</p>\n<p>传入 boolean 值，对所有模块启用或禁用此功能（默认 <code>false</code>）。对象可有 <code>test</code>, <code>include</code>, <code>exclude</code> 三种属性。例如，对某个特定目录中所有 javascript 文件启用此功能：</p>\n<pre><code class="lang-js">devtoolLineToLine<span class="token punctuation">:</span> <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token string">\'src/utilities\'</span> <span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#output-devtoolmodulefilenametemplate" id="output-devtoolmodulefilenametemplate"></a><span class="text"><code>output.devtoolModuleFilenameTemplate</code></span><a class="icon-link" href="#output-devtoolmodulefilenametemplate"></a></h2>\n<p><code>string | function(info)</code></p>\n<p>此选项仅在 「<a href="/configuration/devtool"><code>devtool</code></a> 使用了需要模块名称的选项」时使用。</p>\n<p>自定义每个 source map 的 <code>sources</code> 数组中使用的名称。可以通过传递模板字符串(template string)或者函数来完成。例如，当使用 <code>devtool: &#39;eval&#39;</code>，默认值是：</p>\n<pre><code class="lang-js">devtoolModuleFilenameTemplate<span class="token punctuation">:</span> "webpack<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment">//[resource-path]?[loaders]"</span>\n</code></pre>\n<p>模板字符串(template string)中做以下替换（通过 webpack 内部的 <a href="https://github.com/webpack/webpack/blob/master/lib/ModuleFilenameHelpers.js"><code>ModuleFilenameHelpers</code></a>）：</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">模板</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [absolute-resource-path]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        绝对路径文件名\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [all-loaders]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        自动和显式的 loader，并且参数取决于第一个 loader 名称\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [hash]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        模块标识符的 hash\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [id]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        模块标识符\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [loaders]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        显式的 loader，并且参数取决于第一个 loader 名称\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [resource]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        用于解析文件的路径和用于第一个 loader 的任意查询参数\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [resource-path]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        不带任何查询参数，用于解析文件的路径\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>当使用一个函数，同样的选项要通过 <code>info</code> 参数并使用驼峰式(camel-cased)：</p>\n<pre><code class="lang-js">devtoolModuleFilenameTemplate<span class="token punctuation">:</span> info <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> `webpack<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment">//${info.resourcePath}?${info.loaders}`</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>如果多个模块产生相同的名称，使用 <a href="#output-devtoolfallbackmodulefilenametemplate"><code>output.devtoolFallbackModuleFilenameTemplate</code></a> 来代替这些模块。</p>\n<h2 class="header"><a class="anchor" href="#output-filename" id="output-filename"></a><span class="text"><code>output.filename</code></span><a class="icon-link" href="#output-filename"></a></h2>\n<p><code>string</code></p>\n<p>此选项决定了每个输出 bundle 的名称。这些 bundle 将写入到 <a href="#output-path"><code>output.path</code></a> 选项指定的目录下。</p>\n<p>对于单个<a href="/configuration/entry-context#entry"><code>入口</code></a>起点，filename 会是一个静态名称。</p>\n<pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>\n</code></pre>\n<p>然而，当通过多个入口起点(entry point)、代码拆分(code splitting)或各种插件(plugin)创建多个 bundle，应该使用以下一种替换方式，来赋予每个 bundle 一个唯一的名称……</p>\n<p>使用入口名称：</p>\n<pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"[name].bundle.js"</span>\n</code></pre>\n<p>使用内部 chunk id</p>\n<pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"[id].bundle.js"</span>\n</code></pre>\n<p>使用每次构建过程中，唯一的 hash 生成</p>\n<pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"[name].[hash].bundle.js"</span>\n</code></pre>\n<p>使用基于每个 chunk 内容的 hash：</p>\n<pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"[chunkhash].bundle.js"</span>\n</code></pre>\n<p>请确保已阅读过<a href="/guides/caching">指南 - 缓存</a>的详细信息。这里涉及更多步骤，不仅仅是设置此选项。</p>\n<p>注意此选项被称为文件名，但是你还是可以使用像 <code>&quot;js/[name]/bundle.js&quot;</code> 这样的文件夹结构。</p>\n<p>注意，此选项不会影响那些「按需加载 chunk」的输出文件。对于这些文件，请使用 <a href="#output-chunkfilename"><code>output.chunkFilename</code></a> 选项来控制输出。同样也不影响通过 loader 创建的文件，对于这些文件，请查看 loader 选项来输出控制。</p>\n<p>可以使用以下替换模板字符串（通过 webpack 内部的[<code>TemplatedPathPlugin</code>]<a href="https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js"><code>TemplatedPathPlugin</code></a>）：</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">模板</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [hash]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        模块标识符(module identifier)的 hash\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [chunkhash]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        chunk 内容的 hash\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [name]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        模块名称\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [id]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        模块标识符(module identifier)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [query]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        模块的 query，例如，文件名 <code>?</code> 后面的字符串\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p><code>[hash]</code> 和 <code>[chunkhash]</code> 的长度可以使用 <code>[hash:16]</code>（默认为20）来指定。或者，通过指定<a href="#output-hashdigestlength"><code>output.hashDigestLength</code></a> 在全局配置长度。</p>\n<blockquote class="tip"><div class="tip-content"> 在使用 <a href="/plugins/extract-text-webpack-plugin"><code>ExtractTextWebpackPlugin</code></a> 时，可以用 <code>[contenthash]</code> 来获取提取文件的 hash（既不是 <code>[hash]</code> 也不是 <code>[chunkhash]</code>）。 </div></blockquote><h2 class="header"><a class="anchor" href="#output-hashdigest" id="output-hashdigest"></a><span class="text"><code>output.hashDigest</code></span><a class="icon-link" href="#output-hashdigest"></a></h2>\n<p>在生成 hash 时使用的编码方式，默认为 <code>&#39;hex&#39;</code>。支持 Node.js <a href="https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding"><code>hash.digest</code></a> 的所有编码。</p>\n<h2 class="header"><a class="anchor" href="#output-hashdigestlength" id="output-hashdigestlength"></a><span class="text"><code>output.hashDigestLength</code></span><a class="icon-link" href="#output-hashdigestlength"></a></h2>\n<p>散列摘要的前缀长度，默认为 <code>20</code>。</p>\n<h2 class="header"><a class="anchor" href="#output-hashfunction" id="output-hashfunction"></a><span class="text"><code>output.hashFunction</code></span><a class="icon-link" href="#output-hashfunction"></a></h2>\n<p>散列算法，默认为 <code>&#39;md5&#39;</code>。支持 Node.JS <a href="https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm"><code>crypto.createHash</code></a> 的所有功能。</p>\n<h2 class="header"><a class="anchor" href="#output-hashsalt" id="output-hashsalt"></a><span class="text"><code>output.hashSalt</code></span><a class="icon-link" href="#output-hashsalt"></a></h2>\n<p>一个可选的加盐值，通过 Node.JS <a href="https://nodejs.org/api/crypto.html#crypto_hash_update_data_input_encoding"><code>hash.update</code></a> 来更新哈希。</p>\n<h2 class="header"><a class="anchor" href="#output-hotupdatechunkfilename" id="output-hotupdatechunkfilename"></a><span class="text"><code>output.hotUpdateChunkFilename</code></span><a class="icon-link" href="#output-hotupdatechunkfilename"></a></h2>\n<p><code>string</code></p>\n<p>自定义热更新 chunk 的文件名。可选的值的详细信息，请查看 <a href="#output-filename"><code>output.filename</code></a> 选项。</p>\n<p>占位符只能是 <code>[id]</code> 和 <code>[hash]</code>，默认值是：</p>\n<pre><code class="lang-js">hotUpdateChunkFilename<span class="token punctuation">:</span> <span class="token string">"[id].[hash].hot-update.js"</span>\n</code></pre>\n<p>这里没有必要修改它。</p>\n<h2 class="header"><a class="anchor" href="#output-hotupdatefunction" id="output-hotupdatefunction"></a><span class="text"><code>output.hotUpdateFunction</code></span><a class="icon-link" href="#output-hotupdatefunction"></a></h2>\n<p><code>function</code></p>\n<p>只在 <a href="/configuration/target"><code>target</code></a> 是 web 时使用，用于加载热更新(hot update)的 JSONP 函数。</p>\n<p>JSONP 函数用于异步加载(async load)热更新(hot-update) chunk。</p>\n<p>详细请查看 <a href="#output-jsonpfunction"><code>output.jsonpFunction</code></a>。</p>\n<h2 class="header"><a class="anchor" href="#output-hotupdatemainfilename" id="output-hotupdatemainfilename"></a><span class="text"><code>output.hotUpdateMainFilename</code></span><a class="icon-link" href="#output-hotupdatemainfilename"></a></h2>\n<p><code>string</code></p>\n<p>自定义热更新的主文件名(main filename)。可选的值的详细信息，请查看 <a href="#output-filename"><code>output.filename</code></a> 选项</p>\n<p>占位符只能是 <code>[hash]</code>，默认值是：</p>\n<pre><code class="lang-js">hotUpdateMainFilename<span class="token punctuation">:</span> <span class="token string">"[hash].hot-update.json"</span>\n</code></pre>\n<p>这里没有必要修改它。</p>\n<h2 class="header"><a class="anchor" href="#output-jsonpfunction" id="output-jsonpfunction"></a><span class="text"><code>output.jsonpFunction</code></span><a class="icon-link" href="#output-jsonpfunction"></a></h2>\n<p><code>string</code></p>\n<p>只在 <a href="/configuration/target"><code>target</code></a> 是 web 时使用，用于按需加载(load on-demand) chunk 的 JSONP 函数。</p>\n<p>JSONP 函数用于异步加载(async load) chunk，或者拼接多个初始 chunk(CommonsChunkPlugin, AggressiveSplittingPlugin)。</p>\n<p>如果在同一网页中使用了多个（来自不同编译过程(compilation)的）webpack runtime，则需要修改此选项。</p>\n<p>如果使用了 <a href="#output-library"><code>output.library</code></a> 选项，library 名称时自动追加的。</p>\n<h2 class="header"><a class="anchor" href="#output-library" id="output-library"></a><span class="text"><code>output.library</code></span><a class="icon-link" href="#output-library"></a></h2>\n<p><code>string</code></p>\n<p><code>string</code> 或 <code>object</code>（从 webpack 3.1.0 开始；用于 <code>libraryTarget: &quot;umd&quot;</code>）</p>\n<p><code>output.library</code> 的值的作用，取决于<a href="#output-librarytarget"><code>output.libraryTarget</code></a> 选项的值；完整的详细信息请查阅该章节。注意，<code>output.libraryTarget</code> 的默认选项是 <code>var</code>，所以如果使用以下配置选项：</p>\n<pre><code class="lang-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  library<span class="token punctuation">:</span> <span class="token string">"MyLibrary"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>如果生成的输出文件，是在 HTML 页面中作为一个 script 标签引入，则变量 <code>MyLibrary</code> 将与入口文件的返回值绑定。</p>\n<blockquote class="warning"><div class="tip-content"> 注意，如果将<code>数组</code>作为 <code>entry</code>，那么只会暴露数组中的最后一个模块。如果将<code>对象</code>作为 <code>entry</code>，还可以使用<code>数组</code>语法暴露（具体查看<a href="https://github.com/webpack/webpack/tree/master/examples/multi-part-library">这个示例</a> for details)）。 </div></blockquote><blockquote class="tip"><div class="tip-content"> 有关 <code>output.library</code> 以及 <code>output.libraryTarget</code> 详细信息，请查看<a href="/guides/author-libraries">创建 library 指南</a>。 </div></blockquote><h2 class="header"><a class="anchor" href="#output-libraryexport" id="output-libraryexport"></a><span class="text"><code>output.libraryExport</code></span><a class="icon-link" href="#output-libraryexport"></a></h2>\n<p><code>string</code> or <code>string[]</code> (since webpack 3.0.0)</p>\n<blockquote>\n<p>Default: <code>_entry_return_</code></p>\n</blockquote>\n<p>Configure which module or modules will be exposed via the <code>libraryTarget</code>. The default <code>_entry_return_</code> value is the namespace or default module returned by your entry file. The examples below demonstrate the effect of this config when using <code>libraryTarget: &quot;var&quot;</code>, but any target may be used.</p>\n<p>The following configurations are supported:</p>\n<p><code>libraryExport: &quot;default&quot;</code> - The <strong>default export of your entry point</strong> will be assigned to the library target:</p>\n<pre><code class="lang-js"><span class="token comment">// if your entry has a default export of `MyDefaultModule`</span>\n<span class="token keyword">var</span> MyDefaultModule <span class="token operator">=</span> _entry_return_<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>libraryExport: &quot;MyModule&quot;</code> - The <strong>specified module</strong> will be assigned to the library target:</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> MyModule <span class="token operator">=</span> _entry_return_<span class="token punctuation">.</span>MyModule<span class="token punctuation">;</span>\n</code></pre>\n<p><code>libraryExport: [&quot;MyModule&quot;, &quot;MySubModule&quot;]</code> - The array is interpreted as a <strong>path to a module</strong> to be assigned to the library target:</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> MySubModule <span class="token operator">=</span> _entry_return_<span class="token punctuation">.</span>MyModule<span class="token punctuation">.</span>MySubModule<span class="token punctuation">;</span>\n</code></pre>\n<p>With the <code>libraryExport</code> configurations specified above, the resulting libraries could be utilized as such:</p>\n<pre><code class="lang-js">MyDefaultModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMyModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMySubModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#output-librarytarget" id="output-librarytarget"></a><span class="text"><code>output.libraryTarget</code></span><a class="icon-link" href="#output-librarytarget"></a></h2>\n<p><code>string</code></p>\n<blockquote>\n<p>默认值： <code>&quot;var&quot;</code></p>\n</blockquote>\n<p>配置如何暴露 library。可以使用下面的选项中的任意一个。注意，此选项与分配给 <a href="#output-library"><code>output.library</code></a> 的值一同使用。对于下面的所有示例，都假定将 <code>output.library</code> 的值配置为 <code>MyLibrary</code>。</p>\n<blockquote class="tip"><div class="tip-content"> 注意，下面的示例代码中的 <code>_entry_return_</code> 是入口起点返回的值。在 bundle 本身中，它是从入口起点、由 webpack 生成的函数的输出结果。 </div></blockquote><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">暴露为一个变量</span><a class="icon-link" href="#-"></a></h3>\n<p>这些选项将入口起点的返回值（例如，入口起点的任何导出值），在 bundle 包所引入的位置，赋值给 output.library 提供的变量名。</p>\n<p><code>libraryTarget: &quot;var&quot;</code> - （默认值）当 library 加载完成，<strong>入口起点的返回值</strong>将分配给一个变量：</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> MyLibrary <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token comment">// 在一个单独的 script……</span>\nMyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 当使用此选项时，将 <code>output.library</code> 设置为空，会因为没有变量导致无法赋值。 </div></blockquote><p><code>libraryTarget: &quot;assign&quot;</code> - 这将产生一个隐含的全局变量，可能会潜在地重新分配到全局中已存在的值（谨慎使用）。.</p>\n<pre><code class="lang-js">MyLibrary <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n</code></pre>\n<p>注意，如果 <code>MyLibrary</code> 在作用域中未在前面代码进行定义，则你的 library 将被设置在全局作用域内。</p>\n<blockquote class="warning"><div class="tip-content"> 当使用此选项时，将 <code>output.library</code> 设置为空，将产生一个破损的输出 bundle。 </div></blockquote><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">通过在对象上赋值暴露</span><a class="icon-link" href="#-"></a></h3>\n<p>这些选项将入口起点的返回值（例如，入口起点的任何导出值）赋值给一个特定对象的属性（此名称由 <code>output.library</code> 定义）下。</p>\n<p>如果 <code>output.library</code> 未赋值为一个非空字符串，则默认行为是，将入口起点返回的所有属性都赋值给一个对象（此对象由 <code>output.libraryTarget</code> 特定），通过如下代码片段：</p>\n<pre><code class="lang-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>output<span class="token punctuation">.</span>libraryTarget<span class="token punctuation">}</span><span class="token punctuation">,</span> _entry_return_<span class="token punctuation">)</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 注意，不设置 <code>output.library</code> 将导致由入口起点返回的所有属性，都会被赋值给给定的对象；这里并不会检查现有的属性名是否存在。 </div></blockquote><p><code>libraryTarget: &quot;this&quot;</code> - <strong>入口起点的返回值</strong>将分配给 this 的一个属性（此名称由 <code>output.library</code> 定义）下，<code>this</code> 的含义取决于你：</p>\n<pre><code class="lang-js"><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">"MyLibrary"</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token comment">// 在一个单独的 script……</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>MyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果 this 是 window</span>\n</code></pre>\n<p><code>libraryTarget: &quot;window&quot;</code> - <strong>入口起点的返回值</strong>将使用 <code>output.library</code> 中定义的值，分配给 <code>window</code> 对象的这个属性下。</p>\n<pre><code class="lang-js">window<span class="token punctuation">[</span><span class="token string">"MyLibrary"</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span>MyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>libraryTarget: &quot;global&quot;</code> - <strong>入口起点的返回值</strong>将使用 <code>output.library</code> 中定义的值，分配给 <code>global</code> 对象的这个属性下。</p>\n<pre><code class="lang-js">global<span class="token punctuation">[</span><span class="token string">"MyLibrary"</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\nglobal<span class="token punctuation">.</span>MyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>libraryTarget: &quot;commonjs&quot;</code> - <strong>入口起点的返回值</strong>将使用 <code>output.library</code> 中定义的值，分配给 exports 对象。这个名称也意味着，模块用于 CommonJS 环境：</p>\n<pre><code class="lang-js">exports<span class="token punctuation">[</span><span class="token string">"MyLibrary"</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"MyLibrary"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">模块定义系统</span><a class="icon-link" href="#-"></a></h3>\n<p>这些选项将导致 bundle 带有更完整的模块头部，以确保与各种模块系统的兼容性。根据 <code>output.libraryTarget</code> 选项不同，<code>output.library</code> 选项将具有不同的含义。</p>\n<p><code>libraryTarget: &quot;commonjs2&quot;</code> - <strong>入口起点的返回值</strong>将分配给 <code>module.exports</code> 对象。这个名称也意味着模块用于 CommonJS 环境：</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"MyLibrary"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>注意，<code>output.library</code> 会被省略，因此对于此特定的 <code>output.libraryTarget</code>，无需再设置 <code>output.library</code> 。</p>\n<blockquote class="tip"><div class="tip-content"> 想要弄清楚 CommonJS 和 CommonJS2 之间的区别？虽然它们很相似，但二者之间存在一些微妙的差异，这通常与 webpack 上下文没有关联。（更多详细信息，请<a href="https://github.com/webpack/webpack/issues/1114">阅读此 issue</a>。） </div></blockquote><p><code>libraryTarget: &quot;amd&quot;</code> - 将你的 library 暴露为 AMD 模块。</p>\n<p>AMD 模块要求入口 chunk（例如使用 <code>&lt;script&gt;</code> 标签加载的第一个脚本）通过特定的属性定义，例如 <code>define</code> 和 <code>require</code>，它们通常由 RequireJS 或任何兼容的模块加载器提供（例如 almond）。否则，直接加载生成的 AMD bundle 将导致报错，如 <code>define is not defined</code>。</p>\n<p>所以，使用以下配置……</p>\n<pre><code class="lang-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  library<span class="token punctuation">:</span> <span class="token string">"MyLibrary"</span><span class="token punctuation">,</span>\n  libraryTarget<span class="token punctuation">:</span> <span class="token string">"amd"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>生成的 output 将会使用 &quot;MyLibrary&quot; 作为模块名定义，即</p>\n<pre><code class="lang-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"MyLibrary"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 此模块返回值，是入口 chunk 返回的值</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>可以在 script 标签中，将 bundle 作为一个模块整体引入，并且可以像这样调用 bundle：</p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>MyLibrary<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用 library 做一些事……</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>如果 <code>output.library</code> 未定义，将会生成以下内容。</p>\n<pre><code class="lang-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这个模块返回入口 chunk 返回的</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>如果直接加载 <code>&lt;script&gt;</code> 标签，此 bundle 无法按预期运行，或者根本无法正常运行（在 almond loader 中）。只能通过文件的实际路径，在 RequireJS 兼容的异步模块加载器中运行，因此在这种情况下，如果这些设置直接暴露在服务器上，那么 <code>output.path</code> 和 <code>output.filename</code> 对于这个特定的设置可能变得很重要。</p>\n<p><code>libraryTarget: &quot;umd&quot;</code> - 将你的 library 暴露为所有的模块定义下都可运行的方式。它将在 CommonJS, AMD 环境下运行，或将模块导出到 global 下的变量。了解更多请查看 <a href="https://github.com/umdjs/umd">UMD 仓库</a>。</p>\n<p>在这个例子中，你需要 <code>library</code> 属性来命名你的模块：</p>\n<pre><code class="lang-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  library<span class="token punctuation">:</span> <span class="token string">"MyLibrary"</span><span class="token punctuation">,</span>\n  libraryTarget<span class="token punctuation">:</span> <span class="token string">"umd"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>最终输出如下：</p>\n<pre><code class="lang-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    exports<span class="token punctuation">[</span><span class="token string">"MyLibrary"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    root<span class="token punctuation">[</span><span class="token string">"MyLibrary"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//这个模块会返回你的入口 chunk 所返回的</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>注意，省略 <code>library</code> 会导致将入口起点返回的所有属性，直接赋值给 root 对象，就像<a href="#exposing-the-library-via-object-assignment">对象分配章节</a>。例如：</p>\n<pre><code class="lang-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  libraryTarget<span class="token punctuation">:</span> <span class="token string">"umd"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>输出结果如下：</p>\n<pre><code class="lang-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">?</span> exports <span class="token punctuation">:</span> root<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//这个模块会返回你的入口 chunk 所返回的</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>从 webpack 3.1.0 开始，你可以将 <code>library</code> 指定为一个对象，用于给每个 target 起不同的名称：</p>\n<pre><code class="lang-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  library<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    root<span class="token punctuation">:</span> <span class="token string">"MyLibrary"</span><span class="token punctuation">,</span>\n    amd<span class="token punctuation">:</span> <span class="token string">"my-library"</span><span class="token punctuation">,</span>\n    commonjs<span class="token punctuation">:</span> <span class="token string">"my-common-library"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  libraryTarget<span class="token punctuation">:</span> <span class="token string">"umd"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>模块验证 library。</p>\n<h3 class="header"><a class="anchor" href="#-targets" id="-targets"></a><span class="text">其他 Targets</span><a class="icon-link" href="#-targets"></a></h3>\n<p><code>libraryTarget: &quot;jsonp&quot;</code> - 这将把入口起点的返回值，包裹到一个 jsonp 包装容器中</p>\n<pre><code class="lang-javascript"><span class="token function">MyLibrary</span><span class="token punctuation">(</span>_entry_return_<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>你的 library 的依赖将由 <a href="/configuration/externals/"><code>externals</code></a> 配置定义。</p>\n<h2 class="header"><a class="anchor" href="#output-path" id="output-path"></a><span class="text"><code>output.path</code></span><a class="icon-link" href="#output-path"></a></h2>\n<p><code>string</code></p>\n<p>output 目录对应一个<strong>绝对路径</strong>。</p>\n<pre><code class="lang-js">path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist/assets\'</span><span class="token punctuation">)</span>\n</code></pre>\n<p>注意，<code>[hash]</code> 在参数中被替换为编译过程(compilation)的 hash。详细信息请查看<a href="/guides/caching">指南 - 缓存</a>。</p>\n<h2 class="header"><a class="anchor" href="#output-pathinfo" id="output-pathinfo"></a><span class="text"><code>output.pathinfo</code></span><a class="icon-link" href="#output-pathinfo"></a></h2>\n<p><code>boolean</code></p>\n<p>告诉 webpack 在 bundle 中引入「所包含模块信息」的相关注释。此选项默认值是 <code>false</code>，并且<strong>不应该</strong>用于生产环境(production)，但是对阅读开发环境(development)中的生成代码(generated code)极其有用。</p>\n<pre><code class="lang-js">pathinfo<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>注意，这些注释也会被添加至经过 tree shaking 后生成的 bundle 中。</p>\n<h2 class="header"><a class="anchor" href="#output-publicpath" id="output-publicpath"></a><span class="text"><code>output.publicPath</code></span><a class="icon-link" href="#output-publicpath"></a></h2>\n<p><code>string</code></p>\n<p>对于按需加载(on-demand-load)或加载外部资源(external resources)（如图片、文件等）来说，output.publicPath 是很重要的选项。如果指定了一个错误的值，则在加载这些资源时会收到 404 错误。</p>\n<p>此选项指定在浏览器中所引用的「此输出目录对应的<strong>公开 URL</strong>」。相对 URL(relative URL) 会被相对于 HTML 页面（或 <code>&lt;base&gt;</code> 标签）解析。相对于服务的 URL(Server-relative URL)，相对于协议的 URL(protocol-relative URL) 或绝对 URL(absolute URL) 也可是可能用到的，或者有时必须用到，例如：当将资源托管到 CDN 时。</p>\n<p>该选项的值是以 runtime(运行时) 或 loader(载入时) 所创建的每个 URL 为前缀。因此，在多数情况下，<strong>此选项的值都会以<code>/</code>结束</strong>。</p>\n<p>默认值是一个空字符串 <code>&quot;&quot;</code>。</p>\n<p>简单规则如下：<a href="#output-path"><code>output.path</code></a> 中的 URL 以 HTML 页面为基准。</p>\n<pre><code class="lang-js">path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public/assets"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">"https://cdn.example.com/assets/"</span>\n</code></pre>\n<p>对于这个配置：</p>\n<pre><code class="lang-js">publicPath<span class="token punctuation">:</span> <span class="token string">"/assets/"</span><span class="token punctuation">,</span>\nchunkFilename<span class="token punctuation">:</span> <span class="token string">"[id].chunk.js"</span>\n</code></pre>\n<p>对于一个 chunk 请求，看起来像这样 <code>/assets/4.chunk.js</code>。</p>\n<p>对于一个输出 HTML 的 loader 可能会像这样输出：</p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/spinner.gif<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n</code></pre>\n<p>或者在加载 CSS 的一个图片时：</p>\n<pre><code class="lang-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(/assets/spinner.gif)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>webpack-dev-server 也会默认从 <code>publicPath</code> 为基准，使用它来决定在哪个目录下启用服务，来访问 webpack 输出的文件。</p>\n<p>注意，参数中的 <code>[hash]</code> 将会被替换为编译过程(compilation) 的 hash。详细信息请查看<a href="/guides/caching">指南 - 缓存</a>。</p>\n<p>示例：</p>\n<pre><code class="lang-js">publicPath<span class="token punctuation">:</span> <span class="token string">"https://cdn.example.com/assets/"</span><span class="token punctuation">,</span> <span class="token comment">// CDN（总是 HTTPS 协议）</span>\npublicPath<span class="token punctuation">:</span> "<span class="token comment">//cdn.example.com/assets/", // CDN (协议相同)</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">"/assets/"</span><span class="token punctuation">,</span> <span class="token comment">// 相对于服务(server-relative)</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">"assets/"</span><span class="token punctuation">,</span> <span class="token comment">// 相对于 HTML 页面</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">"../assets/"</span><span class="token punctuation">,</span> <span class="token comment">// 相对于 HTML 页面</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// 相对于 HTML 页面（目录相同）</span>\n</code></pre>\n<p>在编译时(compile time)无法知道输出文件的 <code>publicPath</code> 的情况下，可以留空，然后在入口文件(entry file)处使用<a href="http://stackoverflow.com/questions/12934929/what-are-free-variables">自由变量(free variable)</a> <code>__webpack_public_path__</code>，以便在运行时(runtime)进行动态设置。</p>\n<pre><code class="lang-js"> __webpack_public_path__ <span class="token operator">=</span> myRuntimePublicPath\n\n<span class="token comment">// 应用程序入口的其他部分</span>\n</code></pre>\n<p>有关 <code>__webpack_public_path__</code> 的更多信息，请查看<a href="https://github.com/webpack/webpack/issues/2776#issuecomment-233208623">此讨论</a>。</p>\n<h2 class="header"><a class="anchor" href="#output-sourcemapfilename" id="output-sourcemapfilename"></a><span class="text"><code>output.sourceMapFilename</code></span><a class="icon-link" href="#output-sourcemapfilename"></a></h2>\n<p><code>string</code></p>\n<p> 此选项会向硬盘写入一个输出文件，只在 <a href="/configuration/devtool"><code>devtool</code></a> 启用了 SourceMap 选项时才使用。</p>\n<p>配置 source map 的命名方式。默认使用 <code>&quot;[file].map&quot;</code>。</p>\n<p>可以使用 <a href="#output-filename">#output-filename</a> 中的 <code>[name]</code>, <code>[id]</code>, <code>[hash]</code> 和 <code>[chunkhash]</code> 替换符号。除此之外，还可以使用以下替换符号。<code>[file]</code> 占位符会被替换为原始文件的文件名。我们建议<strong>只使用 <code>[file]</code> 占位符</strong>，因为其他占位符在非 chunk 文件(non-chunk files)生成的 SourceMap 时不起作用。</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">模板</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [file]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        模块文件名称\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        模板\n    </div>\n    <div class="table-td-content">\n        [filebase]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        模块 <a href="https://nodejs.org/api/path.html#path_path_basename_path_ext">basename</a>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h2 class="header"><a class="anchor" href="#output-sourceprefix" id="output-sourceprefix"></a><span class="text"><code>output.sourcePrefix</code></span><a class="icon-link" href="#output-sourceprefix"></a></h2>\n<p><code>string</code></p>\n<p>修改输出 bundle 中每行的前缀。</p>\n<pre><code class="lang-js">sourcePrefix<span class="token punctuation">:</span> <span class="token string">"\\t"</span>\n</code></pre>\n<p>注意，默认情况下使用空字符串。使用一些缩进会看起来更美观，但是可能导致多行字符串中的问题。</p>\n<p>这里没有必要修改它。</p>\n<h2 class="header"><a class="anchor" href="#output-strictmoduleexceptionhandling" id="output-strictmoduleexceptionhandling"></a><span class="text"><code>output.strictModuleExceptionHandling</code></span><a class="icon-link" href="#output-strictmoduleexceptionhandling"></a></h2>\n<p><code>boolean</code></p>\n<p>如果一个模块是在 <code>require</code> 时抛出异常，告诉 webpack 从模块实例缓存(<code>require.cache</code>)中删除这个模块。</p>\n<p>出于性能原因，默认为 <code>false</code>。</p>\n<p>当设置为 <code>false</code> 时，该模块不会从缓存中删除，这将造成仅在第一次 <code>require</code> 调用时抛出异常（会导致与 node.js 不兼容）。</p>\n<p>例如，设想一下 <code>module.js</code>：</p>\n<pre><code class="lang-js"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>将 <code>strictModuleExceptionHandling</code> 设置为 <code>false</code>，只有第一个 <code>require</code> 抛出异常：</p>\n<pre><code class="lang-js"><span class="token comment">// with strictModuleExceptionHandling = false</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- 抛出</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- 不抛出</span>\n</code></pre>\n<p>相反，将 <code>strictModuleExceptionHandling</code> 设置为 <code>true</code>，这个模块所有的 <code>require</code> 都抛出异常：</p>\n<pre><code class="lang-js"><span class="token comment">// with strictModuleExceptionHandling = true</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- 抛出</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- 仍然抛出</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#output-umdnameddefine" id="output-umdnameddefine"></a><span class="text"><code>output.umdNamedDefine</code></span><a class="icon-link" href="#output-umdnameddefine"></a></h2>\n<p><code>boolean</code></p>\n<p>当使用了 <code>libraryTarget: &quot;umd&quot;</code>，设置：</p>\n<pre><code class="lang-js">umdNamedDefine<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>会对 UMD 的构建过程中的 AMD 模块进行命名。否则就使用匿名的 <code>define</code>。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/output/">https://webpack.js.org/configuration/output/</a></p>\n</blockquote>\n',title:"输出(Output)"},title:"输出(Output)",url:"/configuration/output/"},{file:{attributes:{title:"模块(Module)",sort:6,contributors:["dylanonelson","jhnns","jouni-kantola","skipjack","sokra"],group:"-",anchors:[{title:"module.noParse",id:"module-noparse"},{title:"module.rules",id:"module-rules"},{title:"Rule",id:"rule"},{title:"Rule 条件",id:"rule-"},{title:"Rule 结果",id:"rule-"},{title:"嵌套的 Rule",id:"-rule"},{title:"Rule.enforce",id:"rule-enforce"},{title:"Rule.exclude",id:"rule-exclude"},{title:"Rule.include",id:"rule-include"},{title:"Rule.issuer",id:"rule-issuer"},{title:"Rule.loader",id:"rule-loader"},{title:"Rule.loaders",id:"rule-loaders"},{title:"Rule.oneOf",id:"rule-oneof"},{title:"Rule.options / Rule.query",id:"rule-options-rule-query"},{title:"Rule.parser",id:"rule-parser"},{title:"Rule.resource",id:"rule-resource"},{title:"Rule.resourceQuery",id:"rule-resourcequery"},{title:"Rule.rules",id:"rule-rules"},{title:"Rule.test",id:"rule-test"},{title:"Rule.use",id:"rule-use"},{title:"条件",id:"-"},{title:"UseEntry",id:"useentry"},{title:"模块上下文",id:"-"}],related:[]},body:'<p>这些选项决定了如何处理项目中的<a href="/concepts/modules">不同类型的模块</a>。</p>\n<h2 class="header"><a class="anchor" href="#module-noparse" id="module-noparse"></a><span class="text"><code>module.noParse</code></span><a class="icon-link" href="#module-noparse"></a></h2>\n<p><code>RegExp | [RegExp]</code></p>\n<p><code>RegExp | [RegExp] | function</code>（从 webpack 3.0.0 开始）</p>\n<p>防止 webpack 解析那些任何与给定正则表达式相匹配的文件。忽略的文件中<strong>不应该含有</strong> <code>import</code>, <code>require</code>, <code>define</code> 的调用，或任何其他导入机制。忽略大型的 library 可以提高构建性能。</p>\n<pre><code class="lang-js">noParse<span class="token punctuation">:</span> <span class="token regex">/jquery|lodash/</span>\n\n<span class="token comment">// 从 webpack 3.0.0 开始</span>\nnoParse<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token regex">/jquery|lodash/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#module-rules" id="module-rules"></a><span class="text"><code>module.rules</code></span><a class="icon-link" href="#module-rules"></a></h2>\n<p><code>array</code></p>\n<p>创建模块时，匹配请求的<a href="#rule">规则</a>数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)。</p>\n<h2 class="header"><a class="anchor" href="#rule" id="rule"></a><span class="text">Rule</span><a class="icon-link" href="#rule"></a></h2>\n<p>每个规则可以分为三部分 - 条件(condition)，结果(result)和嵌套规则(nested rule)。</p>\n<h3 class="header"><a class="anchor" href="#rule-" id="rule-"></a><span class="text">Rule 条件</span><a class="icon-link" href="#rule-"></a></h3>\n<p>条件有两种输入值：</p>\n<ol>\n<li><p>resource：请求文件的绝对路径。它已经根据 <a href="/configuration/resolve"><code>resolve</code> 规则</a>解析。</p>\n</li>\n<li><p>issuer: 被请求资源(requested the resource)的模块文件的绝对路径。是导入时的位置。</p>\n</li>\n</ol>\n<p><strong>例如:</strong> 从 <code>app.js</code> <code>导入 &#39;./style.css&#39;</code>，resource 是 <code>/path/to/style.css</code>. issuer 是 <code>/path/to/app.js</code>。</p>\n<p>在规则中，属性 <a href="#rule-test"><code>test</code></a>, <a href="#rule-include"><code>include</code></a>, <a href="#rule-exclude"><code>exclude</code></a> 和 <a href="#rule-resource"><code>resource</code></a> 对 resource 匹配，并且属性 <a href="#rule-issuer"><code>issuer</code></a> 对 issuer 匹配。</p>\n<p>当使用多个条件时，所有条件都匹配。</p>\n<blockquote class="warning"><div class="tip-content"> 小心！resource 是文件的<em>解析</em>路径，这意味着符号链接的资源是真正的路径，<em>而不是</em>符号链接位置。在使用工具来符号链接包的时候（如 <code>npm link</code>）比较好记，像 <code>/node_modules/</code> 等常见条件可能会不小心错过符号链接的文件。 </div></blockquote><h3 class="header"><a class="anchor" href="#rule-" id="rule-"></a><span class="text">Rule 结果</span><a class="icon-link" href="#rule-"></a></h3>\n<p>规则结果只在规则条件匹配时使用。</p>\n<p>规则有两种输入值：</p>\n<ol>\n<li>应用的 loader：应用在 resource 上的 loader 数组。</li>\n<li>Parser 选项：用于为模块创建解析器的选项对象。</li>\n</ol>\n<p>这些属性会影响 loader：<a href="#rule-loader"><code>loader</code></a>, <a href="#rule-options-rule-query"><code>options</code></a>, <a href="#rule-use"><code>use</code></a>。</p>\n<p>也兼容这些属性：<a href="#rule-options-rule-query"><code>query</code></a>, <a href="#rule-loaders"><code>loaders</code></a>。</p>\n<p><a href="#rule-enforce"><code>enforce</code></a> 属性会影响 loader 种类。不论是普通的，前置的，后置的 loader。</p>\n<p><a href="#rule-parser"><code>parser</code></a> 属性会影响 parser 选项。</p>\n<h2 class="header"><a class="anchor" href="#-rule" id="-rule"></a><span class="text">嵌套的 Rule</span><a class="icon-link" href="#-rule"></a></h2>\n<p>可以使用属性 <a href="#rule-rules"><code>rules</code></a> 和 <a href="#rule-oneof"><code>oneOf</code></a> 指定嵌套规则。</p>\n<p>这些规则用于在规则条件(rule condition)匹配时进行取值。</p>\n<h2 class="header"><a class="anchor" href="#rule-enforce" id="rule-enforce"></a><span class="text"><code>Rule.enforce</code></span><a class="icon-link" href="#rule-enforce"></a></h2>\n<p>可能的值有：<code>&quot;pre&quot; | &quot;post&quot;</code></p>\n<p>指定 loader 种类。没有值表示是普通 loader。</p>\n<p>还有一个额外的种类&quot;行内 loader&quot;，loader 被应用在 import/require 行内。</p>\n<p>所有 loader 通过 <code>前置, 行内, 普通, 后置</code> 排序，并按此顺序使用。</p>\n<p>所有普通 loader 可以通过在请求中加上 <code>!</code> 前缀来忽略（覆盖）。</p>\n<p>所有普通和前置 loader 可以通过在请求中加上 <code>-!</code> 前缀来忽略（覆盖）。</p>\n<p>所有普通，后置和前置 loader 可以通过在请求中加上 <code>!!</code> 前缀来忽略（覆盖）。</p>\n<p>不应该使用行内 loader 和 <code>!</code> 前缀，因为它们是非标准的。它们可在由 loader 生成的代码中使用。</p>\n<h2 class="header"><a class="anchor" href="#rule-exclude" id="rule-exclude"></a><span class="text"><code>Rule.exclude</code></span><a class="icon-link" href="#rule-exclude"></a></h2>\n<p><code>Rule.exclude</code> 是 <code>Rule.resource.exclude</code> 的简写。如果你提供了 <code>Rule.exclude</code> 选项，就不能再提供 <code>Rule.resource</code>。详细请查看 <a href="#rule-resource"><code>Rule.resource</code></a> 和 <a href="#condition"><code>Condition.exclude</code></a>。</p>\n<h2 class="header"><a class="anchor" href="#rule-include" id="rule-include"></a><span class="text"><code>Rule.include</code></span><a class="icon-link" href="#rule-include"></a></h2>\n<p><code>Rule.include</code> 是 <code>Rule.resource.include</code> 的简写。如果你提供了 <code>Rule.include</code> 选项，就不能再提供 <code>Rule.resource</code>。详细请查看 <a href="#rule-resource"><code>Rule.resource</code></a> 和 <a href="#condition"><code>Condition.include</code></a>。</p>\n<h2 class="header"><a class="anchor" href="#rule-issuer" id="rule-issuer"></a><span class="text"><code>Rule.issuer</code></span><a class="icon-link" href="#rule-issuer"></a></h2>\n<p>一个<a href="#condition"><code>条件</code></a>，用来与被发布的 request 对应的模块项匹配。在以下示例中，a.js request 的<code>发布者(issuer)</code>是 index.js 文件的路径。</p>\n<p><strong>index.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> A <span class="token keyword">from</span> <span class="token string">\'./a.js\'</span>\n</code></pre>\n<p>这个选项可以用来将 loader 应用到一个特定模块或一组模块的依赖中。</p>\n<h2 class="header"><a class="anchor" href="#rule-loader" id="rule-loader"></a><span class="text"><code>Rule.loader</code></span><a class="icon-link" href="#rule-loader"></a></h2>\n<p><code>Rule.loader</code> 是 <code>Rule.use: [ { loader } ]</code> 的简写。详细请查看 <a href="#rule-use"><code>Rule.use</code></a> 和 <a href="#useentry"><code>UseEntry.loader</code></a>。</p>\n<h2 class="header"><a class="anchor" href="#rule-loaders" id="rule-loaders"></a><span class="text"><code>Rule.loaders</code></span><a class="icon-link" href="#rule-loaders"></a></h2>\n<blockquote class="warning"><div class="tip-content"> 由于需要支持 <code>Rule.use</code>，此选项<strong>已废弃</strong>。 </div></blockquote><p><code>Rule.loaders</code> 是 <code>Rule.use</code> 的别名。详细请查看 <a href="#rule-use"><code>Rule.use</code></a>。</p>\n<h2 class="header"><a class="anchor" href="#rule-oneof" id="rule-oneof"></a><span class="text"><code>Rule.oneOf</code></span><a class="icon-link" href="#rule-oneof"></a></h2>\n<p><a href="#rule"><code>规则</code></a>数组，当规则匹配时，只使用第一个匹配规则。</p>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/.css$/</span><span class="token punctuation">,</span>\n  oneOf<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      resourceQuery<span class="token punctuation">:</span> <span class="token regex">/inline/</span><span class="token punctuation">,</span> <span class="token comment">// foo.css?inline</span>\n      use<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      resourceQuery<span class="token punctuation">:</span> <span class="token regex">/external/</span><span class="token punctuation">,</span> <span class="token comment">// foo.css?external</span>\n      use<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#rule-options-rule-query" id="rule-options-rule-query"></a><span class="text"><code>Rule.options / Rule.query</code></span><a class="icon-link" href="#rule-options-rule-query"></a></h2>\n<p><code>Rule.options</code> 和 <code>Rule.query</code> 是 <code>Rule.use: [ { options } ]</code> 的简写。详细请查看 <a href="#rule-use"><code>Rule.use</code></a> 和 <a href="#useentry"><code>UseEntry.options</code></a>。</p>\n<blockquote class="warning"><div class="tip-content"> 由于需要支持 <code>Rule.options</code> 和 <code>UseEntry.options</code>，<code>Rule.use</code>，<code>Rule.query</code> 已废弃。 </div></blockquote><h2 class="header"><a class="anchor" href="#rule-parser" id="rule-parser"></a><span class="text"><code>Rule.parser</code></span><a class="icon-link" href="#rule-parser"></a></h2>\n<p>解析选项对象。所有应用的解析选项都将合并。</p>\n<p>解析器(parser)可以查阅这些选项，并相应地禁用或重新配置。大多数默认插件，会如下解释值：</p>\n<ul>\n<li>将选项设置为 <code>false</code>，将禁用解析器。</li>\n<li>将选项设置为 <code>true</code>，或不修改将其保留为 <code>undefined</code>，可以启用解析器。</li>\n</ul>\n<p>然而，一些解析器(parser)插件可能不光只接收一个布尔值。例如，内部的 <code>NodeStuffPlugin</code> 差距，可以接收一个对象，而不是 <code>true</code>，来为特定的规则添加额外的选项。</p>\n<p><strong>示例</strong>（默认的插件解析器选项）：</p>\n<pre><code class="lang-js">parser<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  amd<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 AMD</span>\n  commonjs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 CommonJS</span>\n  system<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 SystemJS</span>\n  harmony<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 ES2015 Harmony import/export</span>\n  requireInclude<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 require.include</span>\n  requireEnsure<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 require.ensure</span>\n  requireContext<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 require.context</span>\n  browserify<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用特殊处理的 browserify bundle</span>\n  requireJs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 requirejs.*</span>\n  node<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 __dirname, __filename, module, require.extensions, require.main 等。</span>\n  node<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token comment">// 在模块级别(module level)上重新配置 <a class="code-link" href="/configuration/node">node</a> 层(layer)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#rule-resource" id="rule-resource"></a><span class="text"><code>Rule.resource</code></span><a class="icon-link" href="#rule-resource"></a></h2>\n<p><a href="#condition"><code>条件</code></a>会匹配 resource。既可以提供 <code>Rule.resource</code> 选项，也可以使用快捷选项 <code>Rule.test</code>，<code>Rule.exclude</code> 和 <code>Rule.include</code>。在 <a href="#rule-conditions"><code>Rule</code> 条件</a> 中查看详细。</p>\n<h2 class="header"><a class="anchor" href="#rule-resourcequery" id="rule-resourcequery"></a><span class="text"><code>Rule.resourceQuery</code></span><a class="icon-link" href="#rule-resourcequery"></a></h2>\n<p>A <a href="#condition"><code>Condition</code></a> matched with the resource query. This option is used to test against the query section of a request string (i.e. from the question mark onwards). If you were to <code>import Foo from &#39;./foo.css?inline&#39;</code>, the following condition would match:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/.css$/</span><span class="token punctuation">,</span>\n  resourceQuery<span class="token punctuation">:</span> <span class="token regex">/inline/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#rule-rules" id="rule-rules"></a><span class="text"><code>Rule.rules</code></span><a class="icon-link" href="#rule-rules"></a></h2>\n<p><a href="#rule"><code>规则</code></a>数组，当规则匹配时使用。</p>\n<h2 class="header"><a class="anchor" href="#rule-test" id="rule-test"></a><span class="text"><code>Rule.test</code></span><a class="icon-link" href="#rule-test"></a></h2>\n<p><code>Rule.test</code> 是 <code>Rule.resource.test</code> 的简写。如果你提供了一个 <code>Rule.test</code> 选项，就不能再提供 <code>Rule.resource</code>。详细请查看 <a href="#rule-resource"><code>Rule.resource</code></a> 和 <a href="#condition"><code>Condition.test</code></a>。</p>\n<h2 class="header"><a class="anchor" href="#rule-use" id="rule-use"></a><span class="text"><code>Rule.use</code></span><a class="icon-link" href="#rule-use"></a></h2>\n<p>应用于模块的 <a href="#useentry">UseEntries</a> 列表。每个入口(entry)指定使用一个 loader。</p>\n<p>传递字符串（如：<code>use: [ &quot;style-loader&quot; ]</code>）是 loader 属性的简写方式（如：<code>use: [ { loader: &quot;style-loader &quot;} ]</code>）。</p>\n<p>Loaders can be chained by passing multiple loaders, which will be applied from right to left (last to first configured).</p>\n<pre><code class="lang-javascript">use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      importLoaders<span class="token punctuation">:</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'less-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      noIeCompat<span class="token punctuation">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>详细请查看 <a href="#useentry">UseEntry</a>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><code>条件</code></span><a class="icon-link" href="#-"></a></h2>\n<p>条件可以是这些之一：</p>\n<ul>\n<li>字符串：匹配输入必须以提供的字符串开始。是的。目录绝对路径或文件绝对路径。</li>\n<li>正则表达式：test 输入值。</li>\n<li>函数：调用输入的函数，必须返回一个真值(truthy value)以匹配。</li>\n<li>条件数组：至少一个匹配条件。</li>\n<li>对象：匹配所有属性。每个属性都有一个定义行为。</li>\n</ul>\n<p><code>{ test: Condition }</code>：匹配特定条件。一般是提供一个正则表达式或正则表达式的数组，但这不是强制的。</p>\n<p><code>{ include: Condition }</code>：匹配特定条件。一般是提供一个字符串或者字符串数组，但这不是强制的。</p>\n<p><code>{ exclude: Condition }</code>：排除特定条件。一般是提供一个字符串或字符串数组，但这不是强制的。</p>\n<p><code>{ and: [Condition] }</code>：必须匹配数组中的所有条件</p>\n<p><code>{ or: [Condition] }</code>：匹配数组中任何一个条件</p>\n<p><code>{ not: [Condition] }</code>：必须排除这个条件</p>\n<p><strong>示例:</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app/styles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"vendor/styles"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#useentry" id="useentry"></a><span class="text"><code>UseEntry</code></span><a class="icon-link" href="#useentry"></a></h2>\n<p><code>object</code></p>\n<p>必须有一个 <code>loader</code> 属性是字符串。它使用 loader 解析选项（<a href="/configuration/resolve#resolveloader">resolveLoader</a>），相对于配置中的 <a href="/configuration/entry-context#context"><code>context</code></a> 来解析。</p>\n<p>可以有一个 <code>options</code> 属性为字符串或对象。值可以传递到 loader 中，将其理解为 loader 选项。</p>\n<p>由于兼容性原因，也可能有 <code>query</code> 属性，它是 <code>options</code> 属性的别名。使用 <code>options</code> 属性替代。</p>\n<p><strong>Example:</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    modules<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>注意，webpack 需要生成资源和所有 loader 的独立模块标识，包括选项。它尝试对选项对象使用 <code>JSON.stringify</code>。这在 99.9% 的情况下是可以的，但是如果将相同的 loader 应用于相同资源的不同选项，并且选项具有一些带字符的值，则可能不是唯一的。</p>\n<p>如果选项对象不被字符化（例如循环 JSON），它也会中断。因此，你可以在选项对象使用 <code>ident</code> 属性，作为唯一标识符。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">模块上下文</span><a class="icon-link" href="#-"></a></h2>\n<blockquote>\n<p>Avoid using these options as they are <strong>deprecated</strong> and will soon be removed.\n避免使用这些选项，因为它们<strong>已废弃</strong>，并将很快删除。</p>\n</blockquote>\n<p>这些选项描述了当遇到动态依赖时，创建上下文的默认设置。</p>\n<p>例如，<code>未知的(unknown)</code> 动态依赖：<code>require</code>。</p>\n<p>例如，<code>表达式(expr)</code> 动态依赖：<code>require(expr)</code>。</p>\n<p>例如，<code>包裹的(wrapped)</code> 动态依赖：<code>require(&quot;./templates/&quot; + expr)</code>。</p>\n<p>以下是其<a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js">默认值</a>的可用选项</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  exprContextCritical<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  exprContextRecursive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  exprContextRegExp<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  exprContextRequest<span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>\n  unknownContextCritical<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  unknownContextRecursive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  unknownContextRegExp<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  unknownContextRequest<span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>\n  wrappedContextCritical<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  wrappedContextRecursive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  wrappedContextRegExp<span class="token punctuation">:</span> <span class="token regex">/.*/</span><span class="token punctuation">,</span>\n  strictExportPresence<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment">// since webpack 2.3.0</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 你可以使用 <code>ContextReplacementPlugin</code> 来修改这些单个依赖的值。这也会删除警告。 </div></blockquote><p>几个用例：</p>\n<ul>\n<li>动态依赖的警告：<code>wrappedContextCritical: true</code>。</li>\n<li><code>require(expr)</code> 应该包含整个目录：<code>exprContextRegExp: /^\\.\\//</code></li>\n<li><code>require(&quot;./templates/&quot; + expr)</code> 不应该包含默认子目录：<code>wrappedContextRecursive: false</code></li>\n<li><code>strictExportPresence</code> makes missing exports an error instead of warning</li>\n</ul>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/module/">https://webpack.js.org/configuration/module/</a></p>\n</blockquote>\n',title:"模块(Module)"},title:"模块(Module)",url:"/configuration/module/"},{file:{attributes:{title:"解析(Resolve)",sort:7,contributors:["SpaceK33z","pksjce","sebastiandeutsch","skipjack","sokra","tbroadley"],group:"-",anchors:[{title:"resolve",id:"resolve"},{title:"resolve.alias",id:"resolve-alias"},{title:"resolve.aliasFields",id:"resolve-aliasfields"},{title:"resolve.cacheWithContext",id:"resolve-cachewithcontext"},{title:"resolve.descriptionFiles",id:"resolve-descriptionfiles"},{title:"resolve.enforceExtension",id:"resolve-enforceextension"},{title:"resolve.enforceModuleExtension",id:"resolve-enforcemoduleextension"},{title:"resolve.extensions",id:"resolve-extensions"},{title:"resolve.mainFields",id:"resolve-mainfields"},{title:"resolve.mainFiles",id:"resolve-mainfiles"},{title:"resolve.modules",id:"resolve-modules"},{title:"resolve.unsafeCache",id:"resolve-unsafecache"},{title:"resolve.plugins",id:"resolve-plugins"},{title:"resolve.symlinks",id:"resolve-symlinks"},{title:"resolve.cachePredicate",id:"resolve-cachepredicate"},{title:"resolveLoader",id:"resolveloader"},{title:"resolveLoader.moduleExtensions",id:"resolveloader-moduleextensions"}],related:[]},body:'<p>这些选项能设置模块如何被解析。webpack 提供合理的默认值，但是还是可能会修改一些解析的细节。关于 resolver 具体如何工作的更多解释说明，请查看<a href="/concepts/module-resolution">模块解析方式</a>。</p>\n<h2 class="header"><a class="anchor" href="#resolve" id="resolve"></a><span class="text"><code>resolve</code></span><a class="icon-link" href="#resolve"></a></h2>\n<p><code>object</code></p>\n<p>配置模块如何解析。例如，当在 ES2015 中调用 <code>import &quot;lodash&quot;</code>，<code>resolve</code> 选项能够对 webpack 查找 <code>&quot;lodash&quot;</code> 的方式去做修改（查看<a href="#resolve-modules"><code>模块</code></a>）。</p>\n<h3 class="header"><a class="anchor" href="#resolve-alias" id="resolve-alias"></a><span class="text"><code>resolve.alias</code></span><a class="icon-link" href="#resolve-alias"></a></h3>\n<p><code>object</code></p>\n<p>创建 <code>import</code> 或 <code>require</code> 的别名，来确保模块引入变得更简单。例如，一些位于 <code>src/</code> 文件夹下的常用模块：</p>\n<pre><code class="lang-js">alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  Utilities<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/utilities/\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  Templates<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/templates/\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>现在，替换「在导入时使用相对路径」这种方式，就像这样：</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Utility <span class="token keyword">from</span> <span class="token string">\'../../utilities/utility\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p>你可以这样使用别名：</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Utility <span class="token keyword">from</span> <span class="token string">\'Utilities/utility\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p>也可以在给定对象的键后的末尾添加 <code>$</code>，以表示精准匹配：</p>\n<pre><code class="lang-js">alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  xyz$<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'path/to/file.js\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这将产生以下结果：</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Test1 <span class="token keyword">from</span> <span class="token string">\'xyz\'</span><span class="token punctuation">;</span> <span class="token comment">// 精确匹配，所以 path/to/file.js 被解析和导入</span>\n<span class="token keyword">import</span> Test2 <span class="token keyword">from</span> <span class="token string">\'xyz/file.js\'</span><span class="token punctuation">;</span> <span class="token comment">// 精确匹配，触发普通解析</span>\n</code></pre>\n<p>下面的表格展示了一些其他情况：</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th"><code>别名：</code></div><div class="table-th"><code>import &quot;xyz&quot;</code></div><div class="table-th"><code>import &quot;xyz/file.js&quot;</code></div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;/abs/path/to/file.js&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abs/path/to/file.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        error\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz$: &quot;/abs/path/to/file.js&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abs/path/to/file.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;./dir/file.js&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/dir/file.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        error\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz$: &quot;./dir/file.js&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/dir/file.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;/some/dir&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/some/dir/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/some/dir/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz$: &quot;/some/dir&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/some/dir/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;./dir&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/dir/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/dir/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;modu&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/modu/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/modu/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz$: &quot;modu&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/modu/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;modu/some/file.js&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/modu/some/file.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        error\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;modu/dir&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/modu/dir/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/dir/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;xyz/dir&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/dir/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/dir/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>别名：</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz$: &quot;xyz/dir&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/dir/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/file.js</code>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>如果在 <code>package.json</code> 中定义，<code>index.js</code> 可能会被解析为另一个文件。</p>\n<p><code>/abc/node_modules</code> 也可能在 <code>/node_modules</code> 中解析。</p>\n<h3 class="header"><a class="anchor" href="#resolve-aliasfields" id="resolve-aliasfields"></a><span class="text"><code>resolve.aliasFields</code></span><a class="icon-link" href="#resolve-aliasfields"></a></h3>\n<p><code>string</code></p>\n<p>指定一个字段，例如 <code>browser</code>，根据<a href="https://github.com/defunctzombie/package-browser-field-spec">此规范</a>进行解析。默认：</p>\n<pre><code class="lang-js">aliasFields<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"browser"</span><span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#resolve-cachewithcontext" id="resolve-cachewithcontext"></a><span class="text"><code>resolve.cacheWithContext</code></span><a class="icon-link" href="#resolve-cachewithcontext"></a></h3>\n<p><code>boolean</code> (since webpack 3.1.0)</p>\n<p>If unsafe cache is enabled, includes <code>request.context</code> in the cache key. This option is taken into account by the <a href="https://github.com/webpack/enhanced-resolve/"><code>enhanced-resolve</code></a> module. Since webpack 3.1.0 context in resolve caching is ignored when resolve or resolveLoader plugins are provided. This addresses a performance regression.</p>\n<h3 class="header"><a class="anchor" href="#resolve-descriptionfiles" id="resolve-descriptionfiles"></a><span class="text"><code>resolve.descriptionFiles</code></span><a class="icon-link" href="#resolve-descriptionfiles"></a></h3>\n<p><code>array</code></p>\n<p>用于描述的 JSON 文件。默认：</p>\n<pre><code class="lang-js">descriptionFiles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"package.json"</span><span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#resolve-enforceextension" id="resolve-enforceextension"></a><span class="text"><code>resolve.enforceExtension</code></span><a class="icon-link" href="#resolve-enforceextension"></a></h3>\n<p><code>boolean</code></p>\n<p>如果是 <code>true</code>，将不允许无扩展名(extension-less)文件。默认如果 <code>./foo</code> 有 <code>.js</code> 扩展，<code>require(&#39;./foo&#39;)</code> 可以正常运行。但如果启用此选项，只有 <code>require(&#39;./foo.js&#39;)</code> 能够正常工作。默认：</p>\n<pre><code class="lang-js">enforceExtension<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#resolve-enforcemoduleextension" id="resolve-enforcemoduleextension"></a><span class="text"><code>resolve.enforceModuleExtension</code></span><a class="icon-link" href="#resolve-enforcemoduleextension"></a></h3>\n<p><code>boolean</code></p>\n<p>对模块是否需要使用的扩展（例如 loader）。默认：</p>\n<pre><code class="lang-js">enforceModuleExtension<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#resolve-extensions" id="resolve-extensions"></a><span class="text"><code>resolve.extensions</code></span><a class="icon-link" href="#resolve-extensions"></a></h3>\n<p><code>array</code></p>\n<p>自动解析确定的扩展。默认值为：</p>\n<pre><code class="lang-js">extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">]</span>\n</code></pre>\n<p>能够使用户在引入模块时不带扩展：</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> File <span class="token keyword">from</span> <span class="token string">\'../path/to/file\'</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 使用此选项，会<strong>覆盖默认数组</strong>，这就意味着 webpack 将不再尝试使用默认扩展来解析模块。对于使用其扩展导入的模块，例如，<code>import SomeFile from &quot;./somefile.ext&quot;</code>，要想正确的解析，一个包含“*”的字符串必须包含在数组中。 </div></blockquote><h3 class="header"><a class="anchor" href="#resolve-mainfields" id="resolve-mainfields"></a><span class="text"><code>resolve.mainFields</code></span><a class="icon-link" href="#resolve-mainfields"></a></h3>\n<p><code>array</code></p>\n<p>当从 npm 包中导入模块时（例如，<code>import * as D3 from &quot;d3&quot;</code>），此选项将决定在 <code>package.json</code> 中使用哪个字段导入模块。根据 webpack 配置中指定的 <a href="/concepts/targets"><code>target</code></a> 不同，默认值也会有所不同。</p>\n<p>当 <code>target</code> 属性设置为 <code>webworker</code>, <code>web</code> 或者没有指定，默认值为：</p>\n<pre><code class="lang-js">mainFields<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"browser"</span><span class="token punctuation">,</span> <span class="token string">"module"</span><span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">]</span>\n</code></pre>\n<p>对于其他任意的 target（包括 <code>node</code>），默认值为：</p>\n<pre><code class="lang-js">mainFields<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"module"</span><span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">]</span>\n</code></pre>\n<p>例如，<a href="https://d3js.org/">D3</a> 的 <code>package.json</code> 含有这些字段：</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  main<span class="token punctuation">:</span> <span class="token string">\'build/d3.Node.js\'</span><span class="token punctuation">,</span>\n  browser<span class="token punctuation">:</span> <span class="token string">\'build/d3.js\'</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token string">\'index\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这意味着当我们 <code>import * as D3 from &quot;d3&quot;</code>，实际从 <code>browser</code> 属性解析文件。在这里 <code>browser</code> 属性是最优先选择的，因为它是 <code>mainFields</code> 的第一项。同时，由 webpack 打包的 Node.js 应用程序默认会从 <code>module</code> 字段中解析文件。</p>\n<h3 class="header"><a class="anchor" href="#resolve-mainfiles" id="resolve-mainfiles"></a><span class="text"><code>resolve.mainFiles</code></span><a class="icon-link" href="#resolve-mainfiles"></a></h3>\n<p><code>array</code></p>\n<p>解析目录时要使用的文件名。默认：</p>\n<pre><code class="lang-js">mainFiles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"index"</span><span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#resolve-modules" id="resolve-modules"></a><span class="text"><code>resolve.modules</code></span><a class="icon-link" href="#resolve-modules"></a></h3>\n<p><code>array</code></p>\n<p>告诉 webpack 解析模块时应该搜索的目录。</p>\n<p>绝对路径和相对路径都能使用，但是要知道它们之间有一点差异。</p>\n<p>通过查看当前目录以及祖先路径（即 <code>./node_modules</code>, <code>../node_modules</code> 等等），相对路径将类似于 Node 查找 &#39;node_modules&#39; 的方式进行查找。</p>\n<p>使用绝对路径，将只在给定目录中搜索。</p>\n<p><code>resolve.modules</code> defaults to:</p>\n<pre><code class="lang-js">modules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">]</span>\n</code></pre>\n<p>如果你想要添加一个目录到模块搜索目录，此目录优先于 <code>node_modules/</code> 搜索：</p>\n<pre><code class="lang-js">modules<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#resolve-unsafecache" id="resolve-unsafecache"></a><span class="text"><code>resolve.unsafeCache</code></span><a class="icon-link" href="#resolve-unsafecache"></a></h3>\n<p><code>regex</code> <code>array</code> <code>boolean</code></p>\n<p>启用，会主动缓存模块，但并<strong>不安全</strong>。传递 <code>true</code> 将缓存一切。默认：</p>\n<pre><code class="lang-js">unsafeCache<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>正则表达式，或正则表达式数组，可以用于匹配文件路径或只缓存某些模块。例如，只缓存 utilities 模块：</p>\n<pre><code class="lang-js">unsafeCache<span class="token punctuation">:</span> <span class="token regex">/src\\/utilities/</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 修改缓存路径可能在极少数情况下导致失败。 </div></blockquote><h2 class="header"><a class="anchor" href="#resolve-plugins" id="resolve-plugins"></a><span class="text"><code>resolve.plugins</code></span><a class="icon-link" href="#resolve-plugins"></a></h2>\n<p>应该使用的额外的解析插件列表。它允许插件，如 <a href="https://www.npmjs.com/package/directory-named-webpack-plugin"><code>DirectoryNamedWebpackPlugin</code></a>。</p>\n<pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">DirectoryNamedWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#resolve-symlinks" id="resolve-symlinks"></a><span class="text"><code>resolve.symlinks</code></span><a class="icon-link" href="#resolve-symlinks"></a></h2>\n<p><code>boolean</code></p>\n<p>是否将符号链接(symlink)解析到它们的符号链接位置(symlink location)。默认：</p>\n<pre><code class="lang-js">symlinks<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#resolve-cachepredicate" id="resolve-cachepredicate"></a><span class="text"><code>resolve.cachePredicate</code></span><a class="icon-link" href="#resolve-cachepredicate"></a></h2>\n<p><code>function</code></p>\n<p>决定请求是否应该被缓存的函数。函数传入一个带有 <code>path</code> 和 <code>request</code> 属性的对象。默认：</p>\n<pre><code class="lang-js">cachePredicate<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#resolveloader" id="resolveloader"></a><span class="text"><code>resolveLoader</code></span><a class="icon-link" href="#resolveloader"></a></h2>\n<p><code>object</code></p>\n<p>这组选项与上面的 <code>resolve</code> 对象的属性集合相同，但仅用于解析 webpack 的 <a href="/concepts/loaders">loader</a> 包。默认：</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  modules<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'node_modules\'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'.js\'</span><span class="token punctuation">,</span> <span class="token string">\'.json\'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  mainFields<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'loader\'</span><span class="token punctuation">,</span> <span class="token string">\'main\'</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 注意，这里你可以使用别名，并且其他特性类似于 resolve 对象。例如，<code>{ txt: &#39;raw-loader&#39; }</code> 会使用 <code>raw-loader</code> 去 shim(填充) <code>txt!templates/demo.txt</code>。 </div></blockquote><h2 class="header"><a class="anchor" href="#resolveloader-moduleextensions" id="resolveloader-moduleextensions"></a><span class="text"><code>resolveLoader.moduleExtensions</code></span><a class="icon-link" href="#resolveloader-moduleextensions"></a></h2>\n<p><code>array</code></p>\n<p>The extensions/suffixes which that are used when resolving loaders. Since version two, we <a href="/guides/migrating#automatic-loader-module-name-extension-removed">strongly recommend</a> using the full name, e.g. <code>example-loader</code>, as much as possible for clarity. However, if you really wanted to exclude the <code>-loader</code> bit, i.e. just use <code>example</code>, you can use this option to do so:</p>\n<pre><code class="lang-js">moduleExtensions<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'-loader\'</span> <span class="token punctuation">]</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/resolve/">https://webpack.js.org/configuration/resolve/</a></p>\n</blockquote>\n',title:"解析(Resolve)"},title:"解析(Resolve)",url:"/configuration/resolve/"},{file:{attributes:{title:"插件(Plugins)",sort:8,contributors:["skipjack","sokra","yatharthk"],group:"-",anchors:[{title:"plugins",id:"plugins"}],related:[]},body:'<p>The <code>plugins</code> option is used to customize the webpack build process in a variety of ways. webpack comes with a variety built-in plugins available under <code>webpack.[plugin-name]</code>. See <a href="/plugins">this page</a> for a list of plugins and documentation but note that there are a lot more out in the community.</p>\n<blockquote class="tip"><div class="tip-content"> Note: This page only discusses using plugins, however if you are interested in writing your own please visit <a href="/development/how-to-write-a-plugin/">Writing a Plugin</a>. </div></blockquote><h2 class="header"><a class="anchor" href="#plugins" id="plugins"></a><span class="text"><code>plugins</code></span><a class="icon-link" href="#plugins"></a></h2>\n<p><code>array</code></p>\n<p>webpack 插件列表。例如，当多个 bundle 共享一些相同的依赖，<code>CommonsChunkPlugin</code> 有助于提取这些依赖到共享的 bundle 中，来避免重复打包。可以像这样添加：</p>\n<pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>一个复杂示例，使用多个插件，可能看起来就像这样：</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 导入非 webpack 默认自带插件</span>\n<span class="token keyword">var</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> DashboardPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-dashboard/plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在配置中添加插件</span>\nplugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token comment">// 构建优化插件</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'vendor\'</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'vendor-[hash].min.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      warnings<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      drop_console<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'build.min.css\'</span><span class="token punctuation">,</span>\n    allChunks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token regex">/^\\.\\/locale$/</span><span class="token punctuation">,</span> <span class="token regex">/moment$/</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// 编译时(compile time)插件</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string">\'process.env.NODE_ENV\'</span><span class="token punctuation">:</span> <span class="token string">\'"production"\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// webpack-dev-server 强化插件</span>\n  <span class="token keyword">new</span> <span class="token class-name">DashboardPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/plugins/">https://webpack.js.org/configuration/plugins/</a></p>\n</blockquote>\n',title:"插件(Plugins)"},title:"插件(Plugins)",url:"/configuration/plugins/"},{file:{attributes:{title:"开发中 Server(DevServer)",sort:9,contributors:["charlespwd","orteth01","skipjack","sokra","spacek33z"],group:"-",anchors:[{title:"devServer",id:"devserver"},{title:"devServer.after",id:"devserver-after"},{title:"devServer.allowedHosts",id:"devserver-allowedhosts"},{title:"devServer.before",id:"devserver-before"},{title:"devServer.bonjour",id:"devserver-bonjour"},{title:"devServer.clientLogLevel",id:"devserver-clientloglevel"},{title:"devServer.color - CLI only",id:"devserver-color-cli-only"},{title:"devServer.compress",id:"devserver-compress"},{title:"devServer.contentBase",id:"devserver-contentbase"},{title:"devServer.disableHostCheck",id:"devserver-disablehostcheck"},{title:"devServer.filename 🔑",id:"devserver-filename-"},{title:"devServer.headers 🔑",id:"devserver-headers-"},{title:"devServer.historyApiFallback",id:"devserver-historyapifallback"},{title:"devServer.host",id:"devserver-host"},{title:"devServer.hot",id:"devserver-hot"},{title:"devServer.hotOnly",id:"devserver-hotonly"},{title:"devServer.https",id:"devserver-https"},{title:"devServer.index",id:"devserver-index"},{title:"devServer.info - CLI only",id:"devserver-info-cli-only"},{title:"devServer.inline",id:"devserver-inline"},{title:"devServer.lazy 🔑",id:"devserver-lazy-"},{title:"devServer.noInfo 🔑",id:"devserver-noinfo-"},{title:"devServer.open",id:"devserver-open"},{title:"devServer.openPage",id:"devserver-openpage"},{title:"devServer.overlay",id:"devserver-overlay"},{title:"devServer.pfx",id:"devserver-pfx"},{title:"devServer.pfxPassphrase",id:"devserver-pfxpassphrase"},{title:"devServer.port",id:"devserver-port"},{title:"devServer.proxy",id:"devserver-proxy"},{title:"devServer.progress - 只用于命令行工具(CLI)",id:"devserver-progress-cli-"},{title:"devServer.public",id:"devserver-public"},{title:"devServer.publicPath 🔑",id:"devserver-publicpath-"},{title:"devServer.quiet 🔑",id:"devserver-quiet-"},{title:"devServer.setup",id:"devserver-setup"},{title:"devServer.socket",id:"devserver-socket"},{title:"devServer.staticOptions",id:"devserver-staticoptions"},{title:"devServer.stats 🔑",id:"devserver-stats-"},{title:"devServer.stdin - CLI only",id:"devserver-stdin-cli-only"},{title:"devServer.useLocalIp",id:"devserver-uselocalip"},{title:"devServer.watchContentBase",id:"devserver-watchcontentbase"},{title:"devServer.watchOptions 🔑",id:"devserver-watchoptions-"}],related:[]},body:'<p>webpack-dev-server 能够用于快速开发应用程序。请查看<a href="/guides/development">“如何开发？”</a>入门。</p>\n<p>此页面描述影响 webpack-dev-server(简写为：dev-server) 行为的选项。</p>\n<blockquote class="tip"><div class="tip-content"> 与 <a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware</a> 兼容的选项旁边有 🔑。 </div></blockquote><h2 class="header"><a class="anchor" href="#devserver" id="devserver"></a><span class="text"><code>devServer</code></span><a class="icon-link" href="#devserver"></a></h2>\n<p><code>object</code></p>\n<p>通过来自 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 的这些选项，能够用多种方式改变其行为。这里有一个简单的例子，所有来自 <code>dist/</code> 目录的文件都做 gzip 压缩和提供为服务：</p>\n<pre><code class="lang-js">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  port<span class="token punctuation">:</span> <span class="token number">9000</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>当服务器启动时，在解析模块列表之前会有一条消息：</p>\n<pre><code class="lang-bash">http://localhost:9000/\nwebpack output is served from /build/\nContent not from webpack is served from /path/to/dist/\n</code></pre>\n<p>这将给出一些背景知识，就能知道服务器的访问位置，并且知道服务已启动。</p>\n<p>如果你通过 Node.js API 来使用 dev-server， <code>devServer</code> 中的选项将被忽略。将选项作为第二个参数传入： <code>new WebpackDevServer(compiler, {...})</code>。关于如何通过 Node.js API 使用 webpack-dev-server 的示例，请<a href="https://github.com/webpack/webpack-dev-server/tree/master/examples/api/simple">查看此处</a>。</p>\n<blockquote class="warning"><div class="tip-content"> Be aware that when <a href="/configuration/configuration-types/#exporting-multiple-configurations">exporting multiple configurations</a> only the <code>devServer</code> options for the first configuration will be taken into account and used for all the configurations in the array. </div></blockquote><blockquote class="tip"><div class="tip-content"> If you&#39;re having trouble, navigating to the <code>/webpack-dev-server</code> route will show where files are served. For example, <code>http://localhost:9000/webpack-dev-server</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-after" id="devserver-after"></a><span class="text"><code>devServer.after</code></span><a class="icon-link" href="#devserver-after"></a></h2>\n<p><code>function</code></p>\n<p>Provides the ability to execute custom middleware after all other middleware\ninternally within the server.</p>\n<pre><code class="lang-js"><span class="token function">after</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// do fancy stuff</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-allowedhosts" id="devserver-allowedhosts"></a><span class="text"><code>devServer.allowedHosts</code></span><a class="icon-link" href="#devserver-allowedhosts"></a></h2>\n<p><code>array</code></p>\n<p>This option allows you to whitelist services that are allowed to access the dev server.</p>\n<pre><code class="lang-js">allowedHosts<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token string">\'host.com\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'subdomain.host.com\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'subdomain2.host.com\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'host2.com\'</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>Mimicking django&#39;s <code>ALLOWED_HOSTS</code>, a value beginning with <code>.</code> can be used as a subdomain wildcard. <code>.host.com</code> will match <code>host.com</code>, <code>www.host.com</code>, and any other subdomain of <code>host.com</code>.</p>\n<pre><code class="lang-js"><span class="token comment">// this achieves the same effect as the first example</span>\n<span class="token comment">// with the bonus of not having to update your config</span>\n<span class="token comment">// if new subdomains need to access the dev server</span>\nallowedHosts<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'.host.com\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'host2.com\'</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>To use this option with the CLI pass the <code>--allowed-hosts</code> option a comma-delimited string.</p>\n<pre><code class="lang-bash">webpack-dev-server --entry /entry/file --output-path /output/path --allowed-hosts .host.com,host2.com\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-before" id="devserver-before"></a><span class="text"><code>devServer.before</code></span><a class="icon-link" href="#devserver-before"></a></h2>\n<p><code>function</code></p>\n<p>Provides the ability to execute custom middleware prior to all other middleware\ninternally within the server. This could be used to define custom handlers, for\nexample:</p>\n<pre><code class="lang-js"><span class="token function">before</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/some/path\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> custom<span class="token punctuation">:</span> <span class="token string">\'response\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-bonjour" id="devserver-bonjour"></a><span class="text"><code>devServer.bonjour</code></span><a class="icon-link" href="#devserver-bonjour"></a></h2>\n<p>This option broadcasts the server via ZeroConf networking on start</p>\n<pre><code class="lang-js">bonjour<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --bonjour\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-clientloglevel" id="devserver-clientloglevel"></a><span class="text"><code>devServer.clientLogLevel</code></span><a class="icon-link" href="#devserver-clientloglevel"></a></h2>\n<p><code>string</code></p>\n<p>当使用<em>内联模式(inline mode)</em>时，在开发工具(DevTools)的控制台(console)将显示消息，如：在重新加载之前，在一个错误之前，或者模块热替换(Hot Module Replacement)启用时。这可能显得很繁琐。</p>\n<p>你可以阻止所有这些消息显示，使用这个选项：</p>\n<pre><code class="lang-js">clientLogLevel<span class="token punctuation">:</span> <span class="token string">"none"</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --client-log-level none\n</code></pre>\n<p>可能的值有 <code>none</code>, <code>error</code>, <code>warning</code> 或者 <code>info</code>（默认值）。</p>\n<h2 class="header"><a class="anchor" href="#devserver-color-cli-only" id="devserver-color-cli-only"></a><span class="text"><code>devServer.color</code> - CLI only</span><a class="icon-link" href="#devserver-color-cli-only"></a></h2>\n<p><code>boolean</code></p>\n<p>Enables/Disables colors on the console.</p>\n<pre><code class="lang-bash">webpack-dev-server --color\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-compress" id="devserver-compress"></a><span class="text"><code>devServer.compress</code></span><a class="icon-link" href="#devserver-compress"></a></h2>\n<p><code>boolean</code></p>\n<p>一切服务都启用<a href="https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/">gzip 压缩</a>：</p>\n<pre><code class="lang-js">compress<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --compress\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-contentbase" id="devserver-contentbase"></a><span class="text"><code>devServer.contentBase</code></span><a class="icon-link" href="#devserver-contentbase"></a></h2>\n<p><code>boolean</code> <code>string</code> <code>array</code></p>\n<p>告诉服务器从哪里提供内容。只有在你想要提供静态文件时才需要。<a href="#devserver-publicpath-"><code>devServer.publicPath</code></a> 将用于确定应该从哪里提供 bundle，并且此选项优先。</p>\n<p>默认情况下，将使用当前工作目录作为提供内容的目录，但是你可以修改为其他目录：</p>\n<pre><code class="lang-js">contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">)</span>\n</code></pre>\n<p>注意，推荐使用绝对路径。</p>\n<p>但是也可以从多个目录提供内容：</p>\n<pre><code class="lang-js">contentBase<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"assets"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre>\n<p>禁用 <code>contentBase</code>：</p>\n<pre><code class="lang-js">contentBase<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --content-base /path/to/content/dir\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-disablehostcheck" id="devserver-disablehostcheck"></a><span class="text"><code>devServer.disableHostCheck</code></span><a class="icon-link" href="#devserver-disablehostcheck"></a></h2>\n<p><code>boolean</code></p>\n<p>When set to true this option bypasses host checking. THIS IS NOT RECOMMENDED as apps that do not check the host are vulnerable to DNS rebinding attacks.</p>\n<pre><code class="lang-js">disableHostCheck<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --disable-host-check\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-filename-" id="devserver-filename-"></a><span class="text"><code>devServer.filename</code> 🔑</span><a class="icon-link" href="#devserver-filename-"></a></h2>\n<p><code>string</code></p>\n<p>在<strong>惰性模式</strong>中，此选项可减少编译。\n默认在<strong>惰性模式</strong>，每个请求结果都会产生全新的编译。使用 <code>filename</code>，可以只在某个文件被请求时编译。</p>\n<p>如果 <code>output.filename</code> 设置为 <code>bundle.js</code> ，<code>filename</code> 使用如下：</p>\n<pre><code class="lang-js">lazy<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\nfilename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>\n</code></pre>\n<p>现在只有在请求 <code>/bundle.js</code> 时候，才会编译 bundle。</p>\n<blockquote class="tip"><div class="tip-content"> <code>filename</code> 在不使用<strong>惰性加载</strong>时没有效果。 </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-headers-" id="devserver-headers-"></a><span class="text"><code>devServer.headers</code> 🔑</span><a class="icon-link" href="#devserver-headers-"></a></h2>\n<p><code>object</code></p>\n<p>在所有响应中添加首部内容：</p>\n<pre><code class="lang-js">headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"X-Custom-Foo"</span><span class="token punctuation">:</span> <span class="token string">"bar"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-historyapifallback" id="devserver-historyapifallback"></a><span class="text"><code>devServer.historyApiFallback</code></span><a class="icon-link" href="#devserver-historyapifallback"></a></h2>\n<p><code>boolean</code> <code>object</code></p>\n<p>当使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History">HTML5 History API</a> 时，任意的 <code>404</code> 响应都可能需要被替代为 <code>index.html</code>。通过传入以下启用：</p>\n<pre><code class="lang-js">historyApiFallback<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>通过传入一个对象，比如使用 <code>rewrites</code> 这个选项，此行为可进一步地控制：</p>\n<pre><code class="lang-js">historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rewrites<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/^\\/$/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'/views/landing.html\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/^\\/subpage/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'/views/subpage.html\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/./</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'/views/404.html\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>当路径中使用点(dot)（常见于 Angular），你可能需要使用 <code>disableDotRule</code>：</p>\n<pre><code class="lang-js">historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  disableDotRule<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --history-api-fallback\n</code></pre>\n<p>更多选项和信息，查看 <a href="https://github.com/bripkens/connect-history-api-fallback">connect-history-api-fallback</a> 文档。</p>\n<h2 class="header"><a class="anchor" href="#devserver-host" id="devserver-host"></a><span class="text"><code>devServer.host</code></span><a class="icon-link" href="#devserver-host"></a></h2>\n<p><code>string</code></p>\n<p>指定使用一个 host。默认是 <code>localhost</code>。如果你希望服务器外部可访问，指定如下：</p>\n<pre><code class="lang-js">host<span class="token punctuation">:</span> <span class="token string">"0.0.0.0"</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --host 0.0.0.0\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-hot" id="devserver-hot"></a><span class="text"><code>devServer.hot</code></span><a class="icon-link" href="#devserver-hot"></a></h2>\n<p><code>boolean</code></p>\n<p>启用 webpack 的模块热替换特性：</p>\n<pre><code class="lang-js">hot<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Note that <code>webpack.HotModuleReplacementPlugin</code> is required to fully enable HMR. If <code>webpack</code> or <code>webpack-dev-server</code> are launched with the <code>--hot</code> option, this plugin will be added automatically, so you may not need to add this to your <code>webpack.config.js</code>. See the <a href="/concepts/hot-module-replacement">HMR concepts page</a> for more information. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-hotonly" id="devserver-hotonly"></a><span class="text"><code>devServer.hotOnly</code></span><a class="icon-link" href="#devserver-hotonly"></a></h2>\n<p><code>boolean</code></p>\n<p>Enables Hot Module Replacement (see <a href="#devserver-hot"><code>devServer.hot</code></a>) without page refresh as fallback in case of build failures.</p>\n<pre><code class="lang-js">hotOnly<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --hot-only\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-https" id="devserver-https"></a><span class="text"><code>devServer.https</code></span><a class="icon-link" href="#devserver-https"></a></h2>\n<p><code>boolean</code> <code>object</code></p>\n<p>默认情况下，dev-server 通过 HTTP 提供服务。也可以选择带有 HTTPS 的 HTTP/2 提供服务：</p>\n<pre><code class="lang-js">https<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>使用以下设置自签名证书，但是你可以提供自己的：</p>\n<pre><code class="lang-js">https<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/path/to/server.key"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  cert<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/path/to/server.crt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  ca<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/path/to/ca.pem"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>此对象直接传递到 Node.js HTTPS 模块，所以更多信息请查看 <a href="https://nodejs.org/api/https.html">HTTPS 文档</a>。</p>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --https\n</code></pre>\n<p>To pass your own certificate via the CLI use the following options</p>\n<pre><code class="lang-bash">webpack-dev-server --https --key /path/to/server.key --cert /path/to/server.crt --cacert /path/to/ca.pem\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-index" id="devserver-index"></a><span class="text"><code>devServer.index</code></span><a class="icon-link" href="#devserver-index"></a></h2>\n<p><code>string</code></p>\n<p>The filename that is considered the index file.</p>\n<pre><code class="lang-javascript">index<span class="token punctuation">:</span> <span class="token string">\'index.htm\'</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-info-cli-only" id="devserver-info-cli-only"></a><span class="text"><code>devServer.info</code> - CLI only</span><a class="icon-link" href="#devserver-info-cli-only"></a></h2>\n<p><code>boolean</code></p>\n<p>Output cli information. It is enabled by default.</p>\n<pre><code class="lang-bash">webpack-dev-server --info<span class="token operator">=</span>false\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-inline" id="devserver-inline"></a><span class="text"><code>devServer.inline</code></span><a class="icon-link" href="#devserver-inline"></a></h2>\n<p><code>boolean</code></p>\n<p>在 dev-server 的两种不同模式之间切换。默认情况下，应用程序启用<em>内联模式(inline mode)</em>。这意味着一段处理实时重载的脚本被插入到你的包(bundle)中，并且构建消息将会出现在浏览器控制台。</p>\n<p>也可以使用 <strong>iframe 模式</strong>，它在通知栏下面使用 <code>&lt;iframe&gt;</code> 标签，包含了关于构建的消息。切换到 <strong>iframe 模式</strong>：</p>\n<pre><code class="lang-js">inline<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --inline<span class="token operator">=</span>false\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 推荐使用模块热替换的内联模式，因为它包含来自 websocket 的 HMR 触发器。轮询模式可以作为替代方案，但需要一个额外的入口点：<code>&#39;webpack/hot/poll?1000&#39;</code>。 </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-lazy-" id="devserver-lazy-"></a><span class="text"><code>devServer.lazy</code> 🔑</span><a class="icon-link" href="#devserver-lazy-"></a></h2>\n<p><code>boolean</code></p>\n<p>当启用 <code>lazy</code> 时，dev-server 只有在请求时才编译包(bundle)。这意味着 webpack 不会监视任何文件改动。我们称之为“<strong>惰性模式</strong>”。</p>\n<pre><code class="lang-js">lazy<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --lazy\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> <code>watchOptions</code> 在使用<strong>惰性模式</strong>时无效。 </div></blockquote><blockquote class="tip"><div class="tip-content"> 如果使用命令行工具(CLI)，请确保<strong>内联模式(inline mode)</strong>被禁用。 </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-noinfo-" id="devserver-noinfo-"></a><span class="text"><code>devServer.noInfo</code> 🔑</span><a class="icon-link" href="#devserver-noinfo-"></a></h2>\n<p><code>boolean</code></p>\n<p>启用 <code>noInfo</code> 后，诸如「启动时和每次保存之后，那些显示的 webpack 包(bundle)信息」的消息将被隐藏。错误和警告仍然会显示。</p>\n<pre><code class="lang-js">noInfo<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-open" id="devserver-open"></a><span class="text"><code>devServer.open</code></span><a class="icon-link" href="#devserver-open"></a></h2>\n<p><code>boolean</code></p>\n<p>When <code>open</code> is enabled, the dev server will open the browser.</p>\n<pre><code class="lang-js">open<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --open\n</code></pre>\n<p>If no browser is provided (as shown above), your default browser will be used. To specify a different browser, just pass its name:</p>\n<pre><code class="lang-bash">webpack-dev-server --open <span class="token string">\'Google Chrome\'</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-openpage" id="devserver-openpage"></a><span class="text"><code>devServer.openPage</code></span><a class="icon-link" href="#devserver-openpage"></a></h2>\n<p><code>string</code></p>\n<p>Specify a page to navigate to when opening the browser.</p>\n<pre><code class="lang-js">openPage<span class="token punctuation">:</span> <span class="token string">\'/different/page\'</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --open-page <span class="token string">"/different/page"</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-overlay" id="devserver-overlay"></a><span class="text"><code>devServer.overlay</code></span><a class="icon-link" href="#devserver-overlay"></a></h2>\n<p><code>boolean</code> <code>object</code></p>\n<p>Shows a full-screen overlay in the browser when there are compiler errors or warnings. Disabled by default. If you want to show only compiler errors:</p>\n<pre><code class="lang-js">overlay<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>If you want to show warnings as well as errors:</p>\n<pre><code class="lang-js">overlay<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  warnings<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  errors<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-pfx" id="devserver-pfx"></a><span class="text"><code>devServer.pfx</code></span><a class="icon-link" href="#devserver-pfx"></a></h2>\n<p><code>string</code></p>\n<p>When used via the CLI, a path to an SSL .pfx file. If used in options, it should be the bytestream of the .pfx file.</p>\n<pre><code class="lang-js">pfx<span class="token punctuation">:</span> <span class="token string">\'/path/to/file.pfx\'</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --pfx /path/to/file.pfx\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-pfxpassphrase" id="devserver-pfxpassphrase"></a><span class="text"><code>devServer.pfxPassphrase</code></span><a class="icon-link" href="#devserver-pfxpassphrase"></a></h2>\n<p><code>string</code></p>\n<p>The passphrase to a SSL PFX file.</p>\n<pre><code class="lang-js">pfxPassphrase<span class="token punctuation">:</span> <span class="token string">\'passphrase\'</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --pfx-passphrase passphrase\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-port" id="devserver-port"></a><span class="text"><code>devServer.port</code></span><a class="icon-link" href="#devserver-port"></a></h2>\n<p><code>number</code></p>\n<p>指定要监听请求的端口号：</p>\n<pre><code class="lang-js">port<span class="token punctuation">:</span> <span class="token number">8080</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --port 8080\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-proxy" id="devserver-proxy"></a><span class="text"><code>devServer.proxy</code></span><a class="icon-link" href="#devserver-proxy"></a></h2>\n<p><code>object</code></p>\n<p>如果你有单独的后端开发服务器 API，并且希望在同域名下发送 API 请求 ，那么代理某些 URL 会很有用。</p>\n<p>dev-server 使用了非常强大的 <a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a> 包。更多高级用法，请查阅其<a href="https://github.com/chimurai/http-proxy-middleware#options">文档</a>。</p>\n<p>在 <code>localhost:3000</code> 上有后端服务的话，你可以这样启用代理：</p>\n<pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>请求到 <code>/api/users</code> 现在会被代理到请求 <code>http://localhost:3000/api/users</code>。</p>\n<p>如果你不想始终传递 <code>/api</code> ，则需要重写路径：</p>\n<pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span>\n    pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"^/api"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>默认情况下，不接受运行在 HTTPS 上，且使用了无效证书的后端服务器。如果你想要接受，修改配置如下：</p>\n<pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">:</span> <span class="token string">"https://other-server.example.com"</span><span class="token punctuation">,</span>\n    secure<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>有时你不想代理所有的请求。可以基于一个函数的返回值绕过代理。</p>\n<p>在函数中你可以访问请求体、响应体和代理选项。必须返回 <code>false</code> 或路径，来跳过代理请求。</p>\n<p>例如：对于浏览器请求，你想要提供一个 HTML 页面，但是对于 API 请求则保持代理。你可以这样做：</p>\n<pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span>\n    bypass<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> proxyOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>accept<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Skipping proxy for browser request."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">"/index.html"</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>If you want to proxy multiple, specific paths to the same target, you can use an array of one or more objects with a <code>context</code> property:</p>\n<pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n  context<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/auth"</span><span class="token punctuation">,</span> <span class="token string">"/api"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  target<span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-progress-cli-" id="devserver-progress-cli-"></a><span class="text"><code>devServer.progress</code> - 只用于命令行工具(CLI)</span><a class="icon-link" href="#devserver-progress-cli-"></a></h2>\n<p><code>boolean</code></p>\n<p>将运行进度输出到控制台。</p>\n<pre><code class="lang-bash">webpack-dev-server --progress\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-public" id="devserver-public"></a><span class="text"><code>devServer.public</code></span><a class="icon-link" href="#devserver-public"></a></h2>\n<p><code>string</code></p>\n<p>当使用<em>内联模式(inline mode)</em>并代理 dev-server 时，内联的客户端脚本并不总是知道要连接到什么地方。它会尝试根据 <code>window.location</code> 来猜测服务器的 URL，但是如果失败，你需要这样。</p>\n<p>例如，dev-server 被代理到 nginx，并且在 <code>myapp.test</code> 上可用：</p>\n<pre><code class="lang-js"><span class="token keyword">public</span><span class="token punctuation">:</span> <span class="token string">"myapp.test:80"</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --public myapp.test:80\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-publicpath-" id="devserver-publicpath-"></a><span class="text"><code>devServer.publicPath</code> 🔑</span><a class="icon-link" href="#devserver-publicpath-"></a></h2>\n<p><code>string</code></p>\n<p>此路径下的打包文件可在浏览器中访问。</p>\n<p>假设服务器运行在 <code>http://localhost:8080</code> 并且 <code>output.filename</code> 被设置为 <code>bundle.js</code>。默认 <code>publicPath</code> 是 <code>&quot;/&quot;</code>，所以你的包(bundle)可以通过 <code>http://localhost:8080/bundle.js</code> 访问。</p>\n<p>可以修改 <code>publicPath</code>，将 bundle 放在一个目录：</p>\n<pre><code class="lang-js">publicPath<span class="token punctuation">:</span> <span class="token string">"/assets/"</span>\n</code></pre>\n<p>你的包现在可以通过 <code>http://localhost:8080/assets/bundle.js</code> 访问。</p>\n<blockquote class="tip"><div class="tip-content"> 确保 <code>publicPath</code> 总是以斜杠(/)开头和结尾。 </div></blockquote><p>也可以使用一个完整的 URL。这是模块热替换所必需的。</p>\n<pre><code class="lang-js">publicPath<span class="token punctuation">:</span> <span class="token string">"http://localhost:8080/assets/"</span>\n</code></pre>\n<p>bundle 可以通过 <code>http://localhost:8080/assets/bundle.js</code> 访问。</p>\n<blockquote class="tip"><div class="tip-content"> <code>devServer.publicPath</code> 和 <code>output.publicPath</code> 一样被推荐。 </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-quiet-" id="devserver-quiet-"></a><span class="text"><code>devServer.quiet</code> 🔑</span><a class="icon-link" href="#devserver-quiet-"></a></h2>\n<p><code>boolean</code></p>\n<p>启用 <code>quiet</code> 后，除了初始启动信息之外的任何内容都不会被打印到控制台。这也意味着来自 webpack 的错误或警告在控制台不可见。</p>\n<pre><code class="lang-js">quiet<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --quiet\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-setup" id="devserver-setup"></a><span class="text"><code>devServer.setup</code></span><a class="icon-link" href="#devserver-setup"></a></h2>\n<p><code>function</code></p>\n<blockquote class="warning"><div class="tip-content"> This option is <strong>deprecated</strong> in favor of <code>before</code> and will be removed in v3.0.0. </div></blockquote><p>Here you can access the Express app object and add your own custom middleware to it.\nFor example, to define custom handlers for some paths:</p>\n<pre><code class="lang-js"><span class="token function">setup</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/some/path\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> custom<span class="token punctuation">:</span> <span class="token string">\'response\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-socket" id="devserver-socket"></a><span class="text"><code>devServer.socket</code></span><a class="icon-link" href="#devserver-socket"></a></h2>\n<p><code>string</code></p>\n<p>The Unix socket to listen to (instead of a host).</p>\n<pre><code class="lang-js">socket<span class="token punctuation">:</span> <span class="token string">\'socket\'</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --socket socket\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-staticoptions" id="devserver-staticoptions"></a><span class="text"><code>devServer.staticOptions</code></span><a class="icon-link" href="#devserver-staticoptions"></a></h2>\n<p>It is possible to configure advanced options for serving static files from <code>contentBase</code>. See the <a href="http://expressjs.com/en/4x/api.html#express.static">Express documentation</a> for the possible options. An example:</p>\n<pre><code class="lang-js">staticOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  redirect<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> This only works when using <code>contentBase</code> as a <code>string</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-stats-" id="devserver-stats-"></a><span class="text"><code>devServer.stats</code> 🔑</span><a class="icon-link" href="#devserver-stats-"></a></h2>\n<p><code>string</code> <code>object</code></p>\n<p>This option lets you precisely control what bundle information gets displayed. This can be a nice middle ground if you want some bundle information, but not all of it.</p>\n<p>To show only errors in your bundle:</p>\n<pre><code class="lang-js">stats<span class="token punctuation">:</span> <span class="token string">"errors-only"</span>\n</code></pre>\n<p>For more information, see the <a href="/configuration/stats"><strong>stats documentation</strong></a>.</p>\n<blockquote class="tip"><div class="tip-content"> This option has no effect when used with <code>quiet</code> or <code>noInfo</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-stdin-cli-only" id="devserver-stdin-cli-only"></a><span class="text"><code>devServer.stdin</code> - CLI only</span><a class="icon-link" href="#devserver-stdin-cli-only"></a></h2>\n<p><code>boolean</code></p>\n<p>This option closes the server when stdin ends.</p>\n<pre><code class="lang-bash">webpack-dev-server --stdin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-uselocalip" id="devserver-uselocalip"></a><span class="text"><code>devServer.useLocalIp</code></span><a class="icon-link" href="#devserver-uselocalip"></a></h2>\n<p><code>boolean</code></p>\n<p>This option lets the browser open with your local IP.</p>\n<pre><code class="lang-js">useLocalIp<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --useLocalIp\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-watchcontentbase" id="devserver-watchcontentbase"></a><span class="text"><code>devServer.watchContentBase</code></span><a class="icon-link" href="#devserver-watchcontentbase"></a></h2>\n<p><code>boolean</code></p>\n<p>Tell the server to watch the files served by the <code>devServer.contentBase</code> option. File changes will trigger a full page reload.</p>\n<pre><code class="lang-js">watchContentBase<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>It is disabled by default.</p>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --watch-content-base\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-watchoptions-" id="devserver-watchoptions-"></a><span class="text"><code>devServer.watchOptions</code> 🔑</span><a class="icon-link" href="#devserver-watchoptions-"></a></h2>\n<p><code>object</code></p>\n<p>与监视文件相关的控制选项。</p>\n<p>webpack 使用文件系统(file system)获取文件改动的通知。在某些情况下，不会正常工作。例如，当使用 Network File System (NFS) 时。<a href="https://www.vagrantup.com/">Vagrant</a> 也有很多问题。在这些情况下，请使用轮询：</p>\n<pre><code class="lang-js">watchOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  poll<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>如果这对文件系统来说太重了的话，你可以修改间隔时间（以毫秒为单位），将其设置为一个整数。</p>\n<p>查看 <a href="/configuration/watch">WatchOptions</a> 更多选项。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/dev-server/">https://webpack.js.org/configuration/dev-server/</a></p>\n</blockquote>\n',title:"开发中 Server(DevServer)"},title:"开发中 Server(DevServer)",url:"/configuration/dev-server/"},{file:{attributes:{title:"Devtool",sort:10,contributors:["SpaceK33z","lricoy","skipjack","sokra"],related:[{title:"Enabling Sourcemaps",url:"http://survivejs.com/webpack/developing-with-webpack/enabling-sourcemaps/"},{title:"Webpack's Devtool Source Map",url:"http://cheng.logdown.com/posts/2016/03/25/679045"}],group:"-",anchors:[{title:"devtool",id:"devtool"},{title:"Qualities",id:"qualities"},{title:"Development",id:"development"},{title:"Special cases",id:"special-cases"},{title:"Production",id:"production"}]},body:'<p>This option controls if and how source maps are generated.</p>\n<p>Use the <a href="/plugins/source-map-dev-tool-plugin"><code>SourceMapDevToolPlugin</code></a> for a more fine grained configuration. See the <a href="/loaders/source-map-loader"><code>source-map-loader</code></a> to deal with existing source maps.</p>\n<h2 class="header"><a class="anchor" href="#devtool" id="devtool"></a><span class="text"><code>devtool</code></span><a class="icon-link" href="#devtool"></a></h2>\n<p><code>string</code> <code>false</code></p>\n<p>Choose a style of <a href="http://blog.teamtreehouse.com/introduction-source-maps">source mapping</a> to enhance the debugging process. These values can affect build and rebuild speed dramatically.</p>\n<blockquote class="tip"><div class="tip-content"> The webpack repository contains an <a href="https://github.com/webpack/webpack/tree/master/examples/source-map">example showing the effect of all <code>devtool</code> variants</a>. Those examples will likely help you to understand the differences. </div></blockquote><blockquote class="tip"><div class="tip-content"> Instead of using the <code>devtool</code> option you can also use <code>SourceMapDevToolPlugin</code>/<code>EvalSourceMapDevToolPlugin</code> directly as it has more options. Never use both the <code>devtool</code> option and plugin together. The <code>devtool</code> option adds the plugin internally so you would end up with the plugin applied twice. </div></blockquote>\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">devtool</div><div class="table-th">build</div><div class="table-th">rebuild</div><div class="table-th">production</div><div class="table-th">quality</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        (none)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        +++\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        +++\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        bundled code\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        eval\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        +++\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        +++\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        generated code\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        cheap-eval-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        +\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        ++\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        transformed code (lines only)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        cheap-module-eval-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        o\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        ++\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source (lines only)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        eval-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        +\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        cheap-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        +\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        o\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        transformed code (lines only)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        cheap-module-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        o\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source (lines only)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        inline-cheap-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        +\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        o\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        transformed code (lines only)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        inline-cheap-module-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        o\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source (lines only)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        inline-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        hidden-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        nosources-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        without source content\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><blockquote class="tip"><div class="tip-content"> <code>+++</code> super fast, <code>++</code> fast, <code>+</code> pretty fast, <code>o</code> medium, <code>-</code> pretty slow, <code>--</code> slow </div></blockquote><p>Some of these values are suited for development and some for production. For development you typically want fast Source Maps at the cost of bundle size, but for production you want separate Source Maps that are accurate and support minimizing.</p>\n<blockquote class="warning"><div class="tip-content"> There are some issues with Source Maps in Chrome. <a href="https://github.com/webpack/webpack/issues/3165">We need your help!</a>. </div></blockquote><blockquote class="tip"><div class="tip-content"> See <a href="/configuration/output#output-sourcemapfilename"><code>output.sourceMapFilename</code></a> to customize the filenames of generated Source Maps. </div></blockquote><h3 class="header"><a class="anchor" href="#qualities" id="qualities"></a><span class="text">Qualities</span><a class="icon-link" href="#qualities"></a></h3>\n<p><code>bundled code</code> - You see all generated code as a big blob of code. You don&#39;t see modules separated from each other.</p>\n<p><code>generated code</code> - You see each module separated from each other, annotated with module names. You see the code generated by webpack. Example: Instead of <code>import {test} from &quot;module&quot;; test();</code> you see something like <code>var module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(42); module__WEBPACK_IMPORTED_MODULE_1__.a();</code>.</p>\n<p><code>transformed code</code> - You see each module separated from each other, annotated with module names. You see the code before webpack transforms it, but after Loaders transpile it. Example: Instead of <code>import {test} from &quot;module&quot;; class A extends test {}</code> you see something like <code>import {test} from &quot;module&quot;; var A = function(_test) { ... }(test);</code></p>\n<p><code>original source</code> - You see each module separated from each other, annotated with module names. You see the code before transpilation, as you authored it. This depends on Loader support.</p>\n<p><code>without source content</code> - Contents for the sources are not included in the Source Maps. Browsers usually try to load the source from the webserver or filesystem. You have to make sure to set <a href="/configuration/output/#output-devtoolmodulefilenametemplate"><code>output.devtoolModuleFilenameTemplate</code></a> correctly to match source urls.</p>\n<p><code>(lines only)</code> - Source Maps are simplified to a single mapping per line. This usually means a single mapping per statement (assuming you author is this way). This prevents you from debugging execution on statement level and from settings breakpoints on columns of a line. Combining with minimizing is not possible as minimizers usually only emit a single line.</p>\n<h3 class="header"><a class="anchor" href="#development" id="development"></a><span class="text">Development</span><a class="icon-link" href="#development"></a></h3>\n<p>The following options are ideal for development:</p>\n<p><code>eval</code> - Each module is executed with <code>eval()</code> and <code>//@ sourceURL</code>. This is pretty fast. The main disadvantage is that it doesn&#39;t display line numbers correctly since it gets mapped to transpiled code instead of the original code (No Source Maps from Loaders).</p>\n<p><code>eval-source-map</code> - Each module is executed with <code>eval()</code> and a SourceMap is added as a DataUrl to the <code>eval()</code>. Initially it is slow, but it provides fast rebuild speed and yields real files. Line numbers are correctly mapped since it gets mapped to the original code. It yields the best quality SourceMaps for development.</p>\n<p><code>cheap-eval-source-map</code> - Similar to <code>eval-source-map</code>, each module is executed with <code>eval()</code>. It is &quot;cheap&quot; because it doesn&#39;t have column mappings, it only maps line numbers. It ignores SourceMaps from Loaders and only display transpiled code similar to the <code>eval</code> devtool.</p>\n<p><code>cheap-module-eval-source-map</code> - Similar to <code>cheap-eval-source-map</code>, however, in this case Source Maps from Loaders are processed for better results. However Loader Source Maps are simplified to a single mapping per line.</p>\n<h3 class="header"><a class="anchor" href="#special-cases" id="special-cases"></a><span class="text">Special cases</span><a class="icon-link" href="#special-cases"></a></h3>\n<p>The following options are not ideal for development nor production. They are needed for some special cases, i. e. for some 3rd party tools.</p>\n<p><code>inline-source-map</code> - A SourceMap is added as a DataUrl to the bundle.</p>\n<p><code>cheap-source-map</code> - A SourceMap without column-mappings ignoring loader Source Maps.</p>\n<p><code>inline-cheap-source-map</code> - Similar to <code>cheap-source-map</code> but SourceMap is added as a DataUrl to the bundle.</p>\n<p><code>cheap-module-source-map</code> - A SourceMap without column-mappings that simplifies loader Source Maps to a single mapping per line.</p>\n<p><code>inline-cheap-module-source-map</code> - Similar to <code>cheap-module-source-map</code> but SourceMap is added as a DataUrl to the bundle.</p>\n<h3 class="header"><a class="anchor" href="#production" id="production"></a><span class="text">Production</span><a class="icon-link" href="#production"></a></h3>\n<p>These options are typically used in production:</p>\n<p><code>(none)</code> (Omit the <code>devtool</code> option) - No SourceMap is emitted. This is a good option to start with.</p>\n<p><code>source-map</code> - A full SourceMap is emitted as a separate file. It adds a reference comment to the bundle so development tools know where to find it.</p>\n<blockquote class="warning"><div class="tip-content"> You should configure your server to disallow access to the Source Map file for normal users! </div></blockquote><p><code>hidden-source-map</code> - Same as <code>source-map</code>, but doesn&#39;t add a reference comment to the bundle. Useful if you only want SourceMaps to map error stack traces from error reports, but don&#39;t want to expose your SourceMap for the browser development tools.</p>\n<blockquote class="warning"><div class="tip-content"> You should not deploy the Source Map file to the webserver. Instead only use it for error report tooling. </div></blockquote><p><code>nosources-source-map</code> - A SourceMap is created without the <code>sourcesContent</code> in it. It can be used to map stack traces on the client without exposing all of the source code. You can deploy the Source Map file to the webserver.</p>\n<blockquote class="warning"><div class="tip-content"> It still exposes filenames and structure for decompiling, but it doesn&#39;t expose the original code. </div></blockquote><blockquote class="tip"><div class="tip-content"> When using the <code>uglifyjs-webpack-plugin</code> you must provide the <code>sourceMap: true</code> option to enable SourceMap support. </div></blockquote>',title:"Devtool"},title:"Devtool",url:"/configuration/devtool/"},{file:{attributes:{title:"构建目标(Targets)",sort:11,contributors:["SpaceK33z","juangl","pastelsky","skipjack","sokra","tbroadley"],group:"-",anchors:[{title:"target",id:"target"},{title:"string",id:"string"},{title:"function",id:"function"}],related:[]},body:'<p>webpack 能够为多种环境或 <em>target</em> 构建编译。想要理解什么是 <code>target</code> 的详细信息，请阅读 <a href="/concepts/targets">target 概念页面</a>。</p>\n<h2 class="header"><a class="anchor" href="#target" id="target"></a><span class="text"><code>target</code></span><a class="icon-link" href="#target"></a></h2>\n<p><code>string | function(compiler)</code></p>\n<p>告知 webpack 为目标(target)指定一个环境。</p>\n<h3 class="header"><a class="anchor" href="#string" id="string"></a><span class="text"><code>string</code></span><a class="icon-link" href="#string"></a></h3>\n<p>通过 <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js"><code>WebpackOptionsApply</code></a> ，可以支持以下字符串值：</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">选项</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        选项\n    </div>\n    <div class="table-td-content">\n        <code>async-node</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        编译为类 Node.js 环境可用（使用 fs 和 vm 异步加载分块）\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        选项\n    </div>\n    <div class="table-td-content">\n        <del><code>atom</code></del>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        <code>electron-main</code> 的别名\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        选项\n    </div>\n    <div class="table-td-content">\n        <del><code>electron</code></del>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        <code>electron-main</code> 的别名\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        选项\n    </div>\n    <div class="table-td-content">\n        <code>electron-main</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        编译为 <a href="http://electron.atom.io/">Electron</a> 主进程。\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        选项\n    </div>\n    <div class="table-td-content">\n        <code>electron-renderer</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        编译为 <a href="http://electron.atom.io/">Electron</a> 渲染进程，使用 <code>JsonpTemplatePlugin</code>, <code>FunctionModulePlugin</code> 来为浏览器环境提供目标，使用 <code>NodeTargetPlugin</code> 和 <code>ExternalsPlugin</code> 为 CommonJS 和 Electron 内置模块提供目标。\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        选项\n    </div>\n    <div class="table-td-content">\n        <code>node</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        编译为类 Node.js 环境可用（使用 Node.js <code>require</code> 加载 chunk）\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        选项\n    </div>\n    <div class="table-td-content">\n        <code>node-webkit</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        编译为 Webkit 可用，并且使用 jsonp 去加载分块。支持 Node.js 内置模块和 <a href="http://docs.nwjs.io/en/latest/"><code>nw.gui</code></a> 导入（实验性质）\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        选项\n    </div>\n    <div class="table-td-content">\n        <code>web</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        编译为类浏览器环境里可用<strong>（默认）</strong>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        选项\n    </div>\n    <div class="table-td-content">\n        <code>webworker</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        编译成一个 WebWorker\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>例如，当 <em>target</em> 设置为 <code>&quot;electron&quot;</code>，<em>webpack</em> 引入多个 electron 特定的变量。有关使用哪些模板和 externals 的更多信息，你可以<a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js#L70-L185">直接参考 webpack 源码</a>。</p>\n<h3 class="header"><a class="anchor" href="#function" id="function"></a><span class="text"><code>function</code></span><a class="icon-link" href="#function"></a></h3>\n<p>如果传入一个函数，此函数调用时会传入一个 compiler 作为参数。如果以上列表中没有一个预定义的目标(target)符合你的要求，请将其设置为一个函数。</p>\n<p>例如，如果你不需要使用以上任何插件：</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> undefined\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>或者可以使用你想要指定的插件</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">:</span> <span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>\n      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>JsonpTemplatePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderTargetPlugin</span><span class="token punctuation">(</span><span class="token string">"web"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/target/">https://webpack.js.org/configuration/target/</a></p>\n</blockquote>\n',title:"构建目标(Targets)"},title:"构建目标(Targets)",url:"/configuration/target/"},{file:{attributes:{title:"Watch 和 WatchOptions",sort:12,contributors:["SpaceK33z","skipjack","sokra"],group:"-",anchors:[{title:"watch",id:"watch"},{title:"watchOptions",id:"watchoptions"},{title:"watchOptions.aggregateTimeout",id:"watchoptions-aggregatetimeout"},{title:"watchOptions.ignored",id:"watchoptions-ignored"},{title:"watchOptions.poll",id:"watchoptions-poll"}],related:[]},body:'<p>webpack 可以监听文件变化，当它们修改后会重新编译。这个页面介绍了如何启用这个功能，以及当 watch 无法正常运行的时候你可以做的一些调整。</p>\n<h2 class="header"><a class="anchor" href="#watch" id="watch"></a><span class="text"><code>watch</code></span><a class="icon-link" href="#watch"></a></h2>\n<p><code>boolean</code></p>\n<p>启用 Watch 模式。这意味着在初始构建之后，webpack 将继续监听任何已解析文件的更改。Watch 模式默认关闭。</p>\n<pre><code class="lang-js">watch<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> webpack-dev-server 和 webpack-dev-middleware 里 Watch 模式默认开启。 </div></blockquote><h2 class="header"><a class="anchor" href="#watchoptions" id="watchoptions"></a><span class="text"><code>watchOptions</code></span><a class="icon-link" href="#watchoptions"></a></h2>\n<p><code>object</code></p>\n<p>一组用来定制 Watch 模式的选项：</p>\n<pre><code class="lang-js">watchOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  aggregateTimeout<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n  poll<span class="token punctuation">:</span> <span class="token number">1000</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#watchoptions-aggregatetimeout" id="watchoptions-aggregatetimeout"></a><span class="text"><code>watchOptions.aggregateTimeout</code></span><a class="icon-link" href="#watchoptions-aggregatetimeout"></a></h2>\n<p><code>number</code></p>\n<p>当第一个文件更改，会在重新构建前增加延迟。这个选项允许 webpack 将这段时间内进行的任何其他更改都聚合到一次重新构建里。以毫秒为单位：</p>\n<pre><code class="lang-js">aggregateTimeout<span class="token punctuation">:</span> <span class="token number">300</span> <span class="token comment">// 默认值</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#watchoptions-ignored" id="watchoptions-ignored"></a><span class="text"><code>watchOptions.ignored</code></span><a class="icon-link" href="#watchoptions-ignored"></a></h2>\n<p>对于某些系统，监听大量文件系统会导致大量的 CPU 或内存占用。这个选项可以排除一些巨大的文件夹，例如 <code>node_modules</code>：</p>\n<pre><code class="lang-js">ignored<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>\n</code></pre>\n<p>也可以使用 <a href="https://github.com/es128/anymatch">anymatch</a> 模式：</p>\n<pre><code class="lang-js">ignored<span class="token punctuation">:</span> "files<span class="token comment">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>js"\n</code></pre>\n<h2 class="header"><a class="anchor" href="#watchoptions-poll" id="watchoptions-poll"></a><span class="text"><code>watchOptions.poll</code></span><a class="icon-link" href="#watchoptions-poll"></a></h2>\n<p><code>boolean</code> <code>number</code></p>\n<p>通过传递 <code>true</code> 开启 <a href="http://whatis.techtarget.com/definition/polling">polling</a>，或者指定毫秒为单位进行轮询。</p>\n<pre><code class="lang-js">poll<span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment">// 每秒检查一次变动</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 如果监听没生效，试试这个选项吧。Watch 在 NFS 和 VirtualBox 机器上不适用。 </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/watch/">https://webpack.js.org/configuration/watch/</a></p>\n</blockquote>\n',title:"Watch 和 WatchOptions"},title:"Watch 和 WatchOptions",url:"/configuration/watch/"},{file:{attributes:{title:"外部扩展(Externals)",sort:13,contributors:["pksjce","skipjack","sokra"],group:"-",anchors:[{title:"externals",id:"externals"},{title:"string",id:"string"},{title:"array",id:"array"},{title:"object",id:"object"},{title:"function",id:"function"},{title:"regex",id:"regex"}],related:[]},body:'<p><code>externals</code> 配置选项提供了「从输出的 bundle 中排除依赖」的方法。相反，所创建的 bundle 依赖于那些存在于用户环境(consumer&#39;s environment)中的依赖。此功能通常对 <strong>library 开发人员</strong>来说是最有用的，然而也会有各种各样的应用程序用到它。</p>\n<blockquote class="tip"><div class="tip-content"> <strong>用户(consumer)</strong>，在这里是指，引用了「使用 webpack 打包的 library」的所有终端用户的应用程序(end user application)。 </div></blockquote><h2 class="header"><a class="anchor" href="#externals" id="externals"></a><span class="text"><code>externals</code></span><a class="icon-link" href="#externals"></a></h2>\n<p><code>string</code> <code>array</code> <code>object</code> <code>function</code>  <code>regex</code></p>\n<p><strong>防止</strong>将某些 <code>import</code> 的包(package)<strong>打包</strong>到 bundle 中，而是在运行时(runtime)再去从外部获取这些<em>扩展依赖(external dependencies)</em>。</p>\n<p>例如，从 CDN 引入 <a href="https://jquery.com/">jQuery</a>，而不是把它打包：</p>\n<p><strong>index.html</strong></p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>\n  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.1.0.js<span class="token punctuation">"</span></span>\n  <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk<span class="token punctuation">=</span><span class="token punctuation">"</span></span>\n  <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  jquery<span class="token punctuation">:</span> <span class="token string">\'jQuery\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这样就剥离了那些不需要改动的依赖模块，换句话，下面展示的代码还可以正常运行：</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">\'jquery\'</span><span class="token punctuation">;</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">\'.my-element\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>具有外部依赖(external dependency)的 bundle 可以在各种模块上下文(module context)中使用，例如 <a href="/concepts/modules">CommonJS, AMD, 全局变量和 ES2015 模块</a>。外部 library 可能是以下任何一种形式：</p>\n<ul>\n<li><strong>root</strong>：可以通过一个全局变量访问 library（例如，通过 script 标签）。</li>\n<li><strong>commonjs</strong>：可以将 library 作为一个 CommonJS 模块访问。</li>\n<li><strong>commonjs2</strong>：和上面的类似，但导出的是 <code>module.exports.default</code>.</li>\n<li><strong>amd</strong>：类似于 <code>commonjs</code>，但使用 AMD 模块系统。</li>\n</ul>\n<p>可以接受各种语法……</p>\n<h3 class="header"><a class="anchor" href="#string" id="string"></a><span class="text">string</span><a class="icon-link" href="#string"></a></h3>\n<p>请查看上面的例子。属性名称是 <code>jquery</code>，表示应该排除 <code>import $ from &#39;jquery&#39;</code> 中的 <code>jquery</code> 模块。为了替换这个模块，<code>jQuery</code> 的值将被用来检索一个全局的 <code>jQuery</code> 变量。换句话说，当设置为一个字符串时，它将被视为<code>全局的</code>（定义在上面和下面）。</p>\n<h3 class="header"><a class="anchor" href="#array" id="array"></a><span class="text">array</span><a class="icon-link" href="#array"></a></h3>\n<pre><code class="lang-js">externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  subtract<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'./math\'</span><span class="token punctuation">,</span> <span class="token string">\'subtract\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>subtract: [&#39;./math&#39;, &#39;subtract&#39;]</code> 转换为父子结构，其中 <code>./math</code> 是父模块，而 bundle 只引用 <code>subtract</code> 变量下的子集。</p>\n<h3 class="header"><a class="anchor" href="#object" id="object"></a><span class="text">object</span><a class="icon-link" href="#object"></a></h3>\n<pre><code class="lang-js">externals <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  react<span class="token punctuation">:</span> <span class="token string">\'react\'</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 或者</span>\n\nexternals <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  lodash <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    commonjs<span class="token punctuation">:</span> <span class="token string">"lodash"</span><span class="token punctuation">,</span>\n    amd<span class="token punctuation">:</span> <span class="token string">"lodash"</span><span class="token punctuation">,</span>\n    root<span class="token punctuation">:</span> <span class="token string">"_"</span> <span class="token comment">// 指向全局变量</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 或者</span>\n\nexternals <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  subtract <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    root<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"math"</span><span class="token punctuation">,</span> <span class="token string">"subtract"</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>此语法用于描述外部 library 所有可用的访问方式。这里 <code>lodash</code> 这个外部 library 可以在 AMD 和 CommonJS 模块系统中通过 <code>lodash</code> 访问，但在全局变量形式下用 <code>_</code> 访问。<code>subtract</code> 可以通过全局 <code>math</code> 对象下的属性 <code>subtract</code> 访问（例如 <code>window[&#39;math&#39;][&#39;subtract&#39;]</code>）。</p>\n<h3 class="header"><a class="anchor" href="#function" id="function"></a><span class="text">function</span><a class="icon-link" href="#function"></a></h3>\n<p>It might be useful to define your own function to control the behavior of what you want to externalize from webpack. <a href="https://www.npmjs.com/package/webpack-node-externals">webpack-node-externals</a>, for example, excludes all modules from the <code>node_modules</code> directory and provides some options to, for example, whitelist packages.</p>\n<p>It basically comes down to this:</p>\n<pre><code class="lang-js">externals<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> request<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^yourregex$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'commonjs \'</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre>\n<p>The <code>&#39;commonjs &#39; + request</code> defines the type of module that needs to be externalized.</p>\n<h3 class="header"><a class="anchor" href="#regex" id="regex"></a><span class="text">regex</span><a class="icon-link" href="#regex"></a></h3>\n<p>Every dependency that matches the given regular expression will be excluded from the output bundles.</p>\n<pre><code class="lang-js">externals<span class="token punctuation">:</span> <span class="token regex">/^(jquery|\\$)$/i</span>\n</code></pre>\n<p>In this case any dependency named <code>jQuery</code>, capitalized or not, or <code>$</code> would be externalized.</p>\n<p>关于如何使用此 externals 配置的更多信息，请参考<a href="/guides/author-libraries">如何编写 library</a>。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/externals/">https://webpack.js.org/configuration/externals/</a></p>\n</blockquote>\n',title:"外部扩展(Externals)"},title:"外部扩展(Externals)",url:"/configuration/externals/"},{file:{attributes:{title:"性能(Performance)",sort:14,contributors:["tbroadley","thelarkinn"],group:"-",anchors:[{title:"performance",id:"performance"},{title:"performance.hints",id:"performance-hints"},{title:"performance.maxEntrypointSize",id:"performance-maxentrypointsize"},{title:"performance.maxAssetSize",id:"performance-maxassetsize"},{title:"performance.assetFilter",id:"performance-assetfilter"}],related:[]},body:'<p>这些选项可以控制 webpack 如何通知「资源(asset)和入口起点超过指定文件限制」。\n此功能受到 <a href="https://github.com/webpack/webpack/issues/3216">webpack 性能评估</a>的启发。</p>\n<h2 class="header"><a class="anchor" href="#performance" id="performance"></a><span class="text"><code>performance</code></span><a class="icon-link" href="#performance"></a></h2>\n<p><code>object</code></p>\n<p>配置如何展示性能提示。例如，如果一个资源超过 250kb，webpack 会对此输出一个警告来通知你。</p>\n<h2 class="header"><a class="anchor" href="#performance-hints" id="performance-hints"></a><span class="text"><code>performance.hints</code></span><a class="icon-link" href="#performance-hints"></a></h2>\n<p><code>false | &quot;error&quot; | &quot;warning&quot;</code></p>\n<p>打开/关闭提示。此外，当找到提示时，告诉 webpack 抛出一个错误或警告。此属性默认设置为 <code>&quot;warning&quot;</code>。</p>\n<p>给定一个创建后超过 250kb 的资源：</p>\n<pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  hints<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>不展示警告或错误提示。</p>\n<pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  hints<span class="token punctuation">:</span> <span class="token string">"warning"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>将展示一条警告，通知你这是体积大的资源。在开发环境，我们推荐这样。</p>\n<pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  hints<span class="token punctuation">:</span> <span class="token string">"error"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>将展示一条错误，通知你这是体积大的资源。在生产环境构建时，我们推荐使用 <code>hints: &quot;error&quot;</code>，有助于防止把体积巨大的 bundle 部署到生产环境，从而影响网页的性能。</p>\n<h2 class="header"><a class="anchor" href="#performance-maxentrypointsize" id="performance-maxentrypointsize"></a><span class="text"><code>performance.maxEntrypointSize</code></span><a class="icon-link" href="#performance-maxentrypointsize"></a></h2>\n<p><code>int</code></p>\n<p>入口起点表示针对指定的入口，对于所有资源，要充分利用初始加载时(initial load time)期间。此选项根据入口起点的最大体积，控制 webpack 何时生成性能提示。默认值是：<code>250000</code> (bytes)。</p>\n<pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  maxEntrypointSize<span class="token punctuation">:</span> <span class="token number">400000</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#performance-maxassetsize" id="performance-maxassetsize"></a><span class="text"><code>performance.maxAssetSize</code></span><a class="icon-link" href="#performance-maxassetsize"></a></h2>\n<p><code>int</code></p>\n<p>资源(asset)是从 webpack 生成的任何文件。此选项根据单个资源体积，控制 webpack 何时生成性能提示。默认值是：<code>250000</code> (bytes)。</p>\n<pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  maxAssetSize<span class="token punctuation">:</span> <span class="token number">100000</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#performance-assetfilter" id="performance-assetfilter"></a><span class="text"><code>performance.assetFilter</code></span><a class="icon-link" href="#performance-assetfilter"></a></h2>\n<p><code>Function</code></p>\n<p>此属性允许 webpack 控制用于计算性能提示的文件。默认函数如下：</p>\n<pre><code class="lang-js"><span class="token keyword">function</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token regex">/\\.map$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>你可以通过传递自己的函数来覆盖此属性：</p>\n<pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  assetFilter<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> assetFilename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">\'.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>以上示例将只给出 <code>.js</code> 文件的性能提示。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/performance/">https://webpack.js.org/configuration/performance/</a></p>\n</blockquote>\n',title:"性能(Performance)"},title:"性能(Performance)",url:"/configuration/performance/"},{file:{attributes:{title:"Node",sort:14,contributors:["Rob--W","oneforwonder","skipjack","sokra"],group:"-",anchors:[{title:"node",id:"node"},{title:"node.console",id:"node-console"},{title:"node.process",id:"node-process"},{title:"node.global",id:"node-global"},{title:"node.__filename",id:"node-__filename"},{title:"node.__dirname",id:"node-__dirname"},{title:"node.Buffer",id:"node-buffer"},{title:"node.setImmediate",id:"node-setimmediate"},{title:"其他 Node.js 核心库(Node.js core libraries)",id:"-node-js-node-js-core-libraries-"}],related:[]},body:'<p>这些选项可以配置是否 polyfill 或 mock 某些 <a href="https://nodejs.org/docs/latest/api/globals.html">Node.js 全局变量</a>和模块。这可以使最初为 Node.js 环境编写的代码，在其他环境（如浏览器）中运行。</p>\n<p>此功能由 webpack 内部的 <a href="https://github.com/webpack/webpack/blob/master/lib/NodeStuffPlugin.js"><code>NodeStuffPlugin</code></a> 插件提供。如果 target 是 &quot;web&quot;（默认）或 &quot;webworker&quot;，那么 <a href="https://github.com/webpack/webpack/blob/master/lib/node/NodeSourcePlugin.js"><code>NodeSourcePlugin</code></a> 插件也会被激活。</p>\n<h2 class="header"><a class="anchor" href="#node" id="node"></a><span class="text"><code>node</code></span><a class="icon-link" href="#node"></a></h2>\n<p><code>object</code></p>\n<p>是一个对象，其中每个属性都是 Node.js 全局变量或模块的名称，每个 value 是以下其中之一……</p>\n<ul>\n<li><code>true</code>：提供 polyfill。</li>\n<li><code>&quot;mock&quot;</code>：提供 mock 实现预期接口，但功能很少或没有。</li>\n<li><code>&quot;empty&quot;</code>：提供空对象。</li>\n<li><code>false</code>: 什么都不提供。预期获取此对象的代码，可能会因为获取不到此对象，触发 <code>ReferenceError</code> 而崩溃。尝试使用 <code>require(&#39;modulename&#39;)</code> 导入模块的代码，可能会触发 <code>Cannot find module &quot;modulename&quot;</code> 错误。</li>\n</ul>\n<blockquote class="warning"><div class="tip-content"> 注意，不是每个 Node 全局变量都支持所有选项。对于不支持的键值组合(property-value combination)，compiler 会抛出错误。更多细节请查看接下来的章节。 </div></blockquote><p>这里是默认值：</p>\n<pre><code class="lang-js">node<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  global<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  process<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  __filename<span class="token punctuation">:</span> <span class="token string">"mock"</span><span class="token punctuation">,</span>\n  __dirname<span class="token punctuation">:</span> <span class="token string">"mock"</span><span class="token punctuation">,</span>\n  Buffer<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  setImmediate<span class="token punctuation">:</span> <span class="token boolean">true</span>\n\n  <span class="token comment">// 更多选项，请查看“其他 Node.js 核心库”</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>从 webpack 3.0.0 开始，<code>node</code> 选项可能被设置为 <code>false</code>，以完全关闭 <code>NodeStuffPlugin</code> 和 <code>NodeSourcePlugin</code> 插件。</p>\n<h2 class="header"><a class="anchor" href="#node-console" id="node-console"></a><span class="text"><code>node.console</code></span><a class="icon-link" href="#node-console"></a></h2>\n<p><code>boolean | &quot;mock&quot;</code></p>\n<p>默认值：<code>false</code></p>\n<p>浏览器提供一个 <code>console</code> 对象，具有非常类似 Node.js <code>console</code> 的接口，所以通常不需要 polyfill。</p>\n<h2 class="header"><a class="anchor" href="#node-process" id="node-process"></a><span class="text"><code>node.process</code></span><a class="icon-link" href="#node-process"></a></h2>\n<p><code>boolean | &quot;mock&quot;</code></p>\n<p>默认值：<code>true</code></p>\n<h2 class="header"><a class="anchor" href="#node-global" id="node-global"></a><span class="text"><code>node.global</code></span><a class="icon-link" href="#node-global"></a></h2>\n<p><code>boolean</code></p>\n<p>默认值：<code>true</code></p>\n<p>关于此对象的准确行为，请查看<a href="https://github.com/webpack/webpack/blob/master/buildin/global.js">源码</a>。</p>\n<h2 class="header"><a class="anchor" href="#node-__filename" id="node-__filename"></a><span class="text"><code>node.__filename</code></span><a class="icon-link" href="#node-__filename"></a></h2>\n<p><code>boolean | &quot;mock&quot;</code></p>\n<p>默认值：<code>&quot;mock&quot;</code></p>\n<p>选项：</p>\n<ul>\n<li><code>true</code>: <strong>输入</strong>文件的文件名，是相对于 <a href="https://webpack.js.org/configuration/entry-context/#context"><code>context</code> 选项</a>。</li>\n<li><code>false</code>: 常规的 Node.js <code>__filename</code> 行为。在 Node.js 环境中运行时，<strong>输出</strong>文件的文件名。</li>\n<li><code>&quot;mock&quot;</code>: value 填充为 <code>&quot;index.js&quot;</code>.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#node-__dirname" id="node-__dirname"></a><span class="text"><code>node.__dirname</code></span><a class="icon-link" href="#node-__dirname"></a></h2>\n<p><code>boolean | &quot;mock&quot;</code></p>\n<p>默认值：<code>&quot;mock&quot;</code></p>\n<p>选项：</p>\n<ul>\n<li><code>true</code>: <strong>输入</strong>文件的目录名，是相对于 <a href="https://webpack.js.org/configuration/entry-context/#context"><code>context</code> 选项</a>。</li>\n<li><code>false</code>: 常规的 Node.js <code>__dirname</code> 行为。在 Node.js 环境中运行时，<strong>输出</strong>文件的目录名。</li>\n<li><code>&quot;mock&quot;</code>: value 填充为 <code>&quot;/&quot;</code>。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#node-buffer" id="node-buffer"></a><span class="text"><code>node.Buffer</code></span><a class="icon-link" href="#node-buffer"></a></h2>\n<p><code>boolean | &quot;mock&quot;</code></p>\n<p>默认值：<code>true</code></p>\n<h2 class="header"><a class="anchor" href="#node-setimmediate" id="node-setimmediate"></a><span class="text"><code>node.setImmediate</code></span><a class="icon-link" href="#node-setimmediate"></a></h2>\n<p><code>boolean | &quot;mock&quot; | &quot;empty&quot;</code></p>\n<p>默认值：<code>true</code></p>\n<h2 class="header"><a class="anchor" href="#-node-js-node-js-core-libraries-" id="-node-js-node-js-core-libraries-"></a><span class="text">其他 Node.js 核心库(Node.js core libraries)</span><a class="icon-link" href="#-node-js-node-js-core-libraries-"></a></h2>\n<p><code>boolean | &quot;mock&quot; | &quot;empty&quot;</code></p>\n<blockquote class="warning"><div class="tip-content"> 只有当 target 是未指定、&quot;web&quot; 或 &quot;webworker&quot; 这三种情况时，此选项才会被激活（通过 <code>NodeSourcePlugin</code>）。 </div></blockquote><p>当 <code>NodeSourcePlugin</code> 插件启用时，则会使用 <a href="https://github.com/webpack/node-libs-browser"><code>node-libs-browser</code></a> 来对 Node.js 核心库 polyfill。请查看 <a href="https://github.com/webpack/node-libs-browser#readme">Node.js 核心库及其 polyfills</a> 列表。</p>\n<p>默认情况下，如果有一个已知的 polyfill，webpack 会对每个 library 进行 polyfill，如果没有，则 webpack 不会执行任何操作。在后一种情况下，如果模块名称配置为 <code>false</code> 值，webpack 表现为不会执行任何操作。</p>\n<blockquote class="tip"><div class="tip-content"> 为了导入内置的模块，使用 <a href="/api/module-variables/#__non_webpack_require__-webpack-specific-"><code>__non_webpack_require__</code></a>，例如，使用 <code>__non_webpack_require__(&#39;modulename&#39;)</code> 而不是 <code>require(&#39;modulename&#39;)</code>。 </div></blockquote><p>示例：</p>\n<pre><code class="lang-js">node<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  dns<span class="token punctuation">:</span> <span class="token string">"mock"</span><span class="token punctuation">,</span>\n  fs<span class="token punctuation">:</span> <span class="token string">"empty"</span><span class="token punctuation">,</span>\n  path<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  url<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/node/">https://webpack.js.org/configuration/node/</a></p>\n</blockquote>\n',title:"Node"},title:"Node",url:"/configuration/node/"},{file:{attributes:{title:"统计(Stats)",sort:15,contributors:["SpaceK33z","jasonblanchard","jungomi","ldrick","sallar"],group:"-",anchors:[{title:"stats",id:"stats"}],related:[]},body:'<p><code>stats</code> 选项能让你准确地控制显示哪些包的信息。如果你希望得到部分包的信息（而不是一股脑全部输出），而不想使用 <code>quiet</code> 或者 <code>noInfo</code> 模式的时候，这个选项是一个很好的折衷办法。</p>\n<blockquote class="tip"><div class="tip-content"> 对于 webpack-dev-server ，这个属性要放在 <code>devServer</code> 对象里。 </div></blockquote><blockquote class="warning"><div class="tip-content"> 在使用 Node.js API 后，此选项无效。 </div></blockquote><h2 class="header"><a class="anchor" href="#stats" id="stats"></a><span class="text"><code>stats</code></span><a class="icon-link" href="#stats"></a></h2>\n<p><code>object</code> <code>string</code></p>\n<p>预设选项：<code>none</code>, <code>errors-only</code>, <code>minimal</code> 和 <code>verbose</code>。使用方法：</p>\n<pre><code class="lang-js">stats<span class="token punctuation">:</span> <span class="token string">"errors-only"</span>\n</code></pre>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Preset</div><div class="table-th">Alternative</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Preset\n    </div>\n    <div class="table-td-content">\n        <code>&quot;errors-only&quot;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Alternative\n    </div>\n    <div class="table-td-content">\n        <em>none</em>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        只在发生错误时输出\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Preset\n    </div>\n    <div class="table-td-content">\n        <code>&quot;minimal&quot;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Alternative\n    </div>\n    <div class="table-td-content">\n        <em>none</em>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        只在发生错误 或是 新的编译时输出\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Preset\n    </div>\n    <div class="table-td-content">\n        <code>&quot;none&quot;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Alternative\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        没有输出\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Preset\n    </div>\n    <div class="table-td-content">\n        <code>&quot;normal&quot;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Alternative\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        标准输出\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Preset\n    </div>\n    <div class="table-td-content">\n        <code>&quot;verbose&quot;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Alternative\n    </div>\n    <div class="table-td-content">\n        <em>none</em>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        全部输出\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>对于更加精细的控制，这些选项可以准确地列出你想要的信息。请注意，此对象中的所有选项都是可选的。</p>\n<pre><code class="lang-js">stats<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token comment">// fallback value for stats options when an option is not defined (has precedence over local webpack defaults)</span>\n  all<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>\n  <span class="token comment">// 增加资源信息</span>\n  assets<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 对资源按指定的项进行排序</span>\n  <span class="token comment">// 你可以使用 `!field` 来反转排序。</span>\n  assetsSort<span class="token punctuation">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加缓存了的（但没构建）模块的信息</span>\n  cached<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Show cached assets (setting this to `false` only shows emitted files)</span>\n  cachedAssets<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加子级的信息</span>\n  children<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加包信息（设置为 `false` 能允许较少的冗长输出）</span>\n  chunks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 将内置模块信息增加到包信息</span>\n  chunkModules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加包 和 包合并 的来源信息</span>\n  chunkOrigins<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 对包按指定的项进行排序</span>\n  <span class="token comment">// 你可以使用 `!field` 来反转排序。默认是按照 `id` 排序。</span>\n  chunksSort<span class="token punctuation">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>\n  <span class="token comment">// 用于缩短请求的上下文目录</span>\n  context<span class="token punctuation">:</span> <span class="token string">"../src/"</span><span class="token punctuation">,</span>\n  <span class="token comment">// `webpack --colors` 等同于</span>\n  colors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Display the distance from the entry point for each module</span>\n  depth<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// Display the entry points with the corresponding bundles</span>\n  entrypoints<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加 --env information</span>\n  env<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加错误信息</span>\n  errors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加错误的详细信息（就像解析日志一样）</span>\n  errorDetails<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Exclude assets from being displayed in stats</span>\n  <span class="token comment">// This can be done with a String, a RegExp, a Function getting the assets name</span>\n  <span class="token comment">// and returning a boolean or an Array of the above.</span>\n  excludeAssets<span class="token punctuation">:</span> <span class="token string">"filter"</span> <span class="token operator">|</span> <span class="token operator">/</span>filter<span class="token operator">/</span> <span class="token operator">|</span> <span class="token punctuation">(</span>assetName<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span> <span class="token operator">|</span>\n    <span class="token punctuation">[</span><span class="token string">"filter"</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token operator">/</span>filter<span class="token operator">/</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>assetName<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// Exclude modules from being displayed in stats</span>\n  <span class="token comment">// This can be done with a String, a RegExp, a Function getting the modules source</span>\n  <span class="token comment">// and returning a boolean or an Array of the above.</span>\n  excludeModules<span class="token punctuation">:</span> <span class="token string">"filter"</span> <span class="token operator">|</span> <span class="token operator">/</span>filter<span class="token operator">/</span> <span class="token operator">|</span> <span class="token punctuation">(</span>moduleSource<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span> <span class="token operator">|</span>\n    <span class="token punctuation">[</span><span class="token string">"filter"</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token operator">/</span>filter<span class="token operator">/</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>moduleSource<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// See excludeModules</span>\n  exclude<span class="token punctuation">:</span> <span class="token string">"filter"</span> <span class="token operator">|</span> <span class="token operator">/</span>filter<span class="token operator">/</span> <span class="token operator">|</span> <span class="token punctuation">(</span>moduleSource<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span> <span class="token operator">|</span>\n    <span class="token punctuation">[</span><span class="token string">"filter"</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token operator">/</span>filter<span class="token operator">/</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>moduleSource<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加编译的哈希值</span>\n  hash<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Set the maximum number of modules to be shown</span>\n  maxModules<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加内置的模块信息</span>\n  modules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 对模块按指定的项进行排序</span>\n  <span class="token comment">// 你可以使用 `!field` 来反转排序。默认是按照 `id` 排序。</span>\n  modulesSort<span class="token punctuation">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>\n  <span class="token comment">// Show dependencies and origin of warnings/errors (since webpack 2.5.0)</span>\n  moduleTrace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Show performance hint when file size exceeds `performance.maxAssetSize`</span>\n  performance<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Show the exports of the modules</span>\n  providedExports<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加 public path 的信息</span>\n  publicPath<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加模块被引入的原因</span>\n  reasons<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加模块的源码</span>\n  source<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加时间信息</span>\n  timings<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Show which exports of a module are used</span>\n  usedExports<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加 webpack 版本信息</span>\n  version<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 增加提示</span>\n  warnings<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Filter warnings to be shown (since webpack 2.4.0),</span>\n  <span class="token comment">// can be a String, Regexp, a function getting the warning and returning a boolean</span>\n  <span class="token comment">// or an Array of a combination of the above. First match wins.</span>\n  warningsFilter<span class="token punctuation">:</span> <span class="token string">"filter"</span> <span class="token operator">|</span> <span class="token operator">/</span>filter<span class="token operator">/</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"filter"</span><span class="token punctuation">,</span> <span class="token operator">/</span>filter<span class="token operator">/</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">(</span>warning<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/stats/">https://webpack.js.org/configuration/stats/</a></p>\n</blockquote>\n',title:"统计(Stats)"},title:"统计(Stats)",url:"/configuration/stats/"},{file:{attributes:{title:"其它选项(Other Options)",sort:16,contributors:["skipjack","sokra","terinjokes"],related:[{title:"Using Records",url:"https://survivejs.com/webpack/optimizing/separating-manifest/#using-records"}],group:"-",anchors:[{title:"amd",id:"amd"},{title:"bail",id:"bail"},{title:"cache",id:"cache"},{title:"loader",id:"loader"},{title:"parallelism",id:"parallelism"},{title:"profile",id:"profile"},{title:"recordsPath",id:"recordspath"},{title:"recordsInputPath",id:"recordsinputpath"},{title:"recordsOutputPath",id:"recordsoutputpath"}]},body:'<p>webpack 支持的其它选项。</p>\n<blockquote class="warning"><div class="tip-content"> 寻求帮助： 这个页面还在更新中，如果你发现本页面内有描述不准确或者不完整，请在 <a href="https://github.com/webpack/webpack.js.org">webpack 的文档仓库</a>中创建 issue 或者 pull request </div></blockquote><h2 class="header"><a class="anchor" href="#amd" id="amd"></a><span class="text"><code>amd</code></span><a class="icon-link" href="#amd"></a></h2>\n<p><code>object</code></p>\n<p>设置 <code>require.amd</code> 或 <code>define.amd</code> 的值：</p>\n<pre><code class="lang-js">amd<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  jQuery<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>某些流行的模块是按照 AMD 规范编写的，最引人瞩目的 jQuery 版本在 1.7.0 到 1.9.1，如果 loader 提示它对页面包含的多个版本采取了<a href="https://github.com/amdjs/amdjs-api/wiki/jQuery-and-AMD">特殊许可</a>时，才会注册为 AMD 模块。</p>\n<p>许可权限是具有「限制指定版本注册」或「支持有不同定义模块的不同沙盒」的能力。</p>\n<p>此选项允许将模块查找的键(key)设置为真值(truthy value)。\n发生这种情况时，webpack 中的 AMD 支持将忽略定义的名称。</p>\n<h2 class="header"><a class="anchor" href="#bail" id="bail"></a><span class="text"><code>bail</code></span><a class="icon-link" href="#bail"></a></h2>\n<p><code>boolean</code></p>\n<p>在第一个错误出现时抛出失败结果，而不是容忍它。默认情况下，当使用 HMR 时，webpack 会将在终端以及浏览器控制台中，以红色文字记录这些错误，但仍然继续进行打包。要启用它：</p>\n<pre><code class="lang-js">bail<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>这将迫使 webpack 退出其打包过程。</p>\n<h2 class="header"><a class="anchor" href="#cache" id="cache"></a><span class="text"><code>cache</code></span><a class="icon-link" href="#cache"></a></h2>\n<p><code>boolean</code> <code>object</code></p>\n<p>缓存生成的 webpack 模块和 chunk，来改善构建速度。缓存默认在观察模式(watch mode)启用。禁用缓存只需简单传入：</p>\n<pre><code class="lang-js">cache<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre>\n<p>如果传递一个对象，webpack 将使用这个对象进行缓存。保持对此对象的引用，将可以在 compiler 调用之间共享同一缓存：</p>\n<pre><code class="lang-js"><span class="token keyword">let</span> SharedCache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>\n  cache<span class="token punctuation">:</span> SharedCache\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 不要在不同选项的调用之间共享缓存。 </div></blockquote><blockquote class="todo"><div class="tip-content"> Elaborate on the warning and example - calls with different configuration options? </div></blockquote><h2 class="header"><a class="anchor" href="#loader" id="loader"></a><span class="text"><code>loader</code></span><a class="icon-link" href="#loader"></a></h2>\n<p><code>object</code></p>\n<p>在 loader 上下文中暴露自定义值。</p>\n<blockquote class="todo"><div class="tip-content"> Add an example... </div></blockquote><h2 class="header"><a class="anchor" href="#parallelism" id="parallelism"></a><span class="text"><code>parallelism</code></span><a class="icon-link" href="#parallelism"></a></h2>\n<p><code>number</code></p>\n<p>Limit the number of parallel processed modules. Can be used to fine tune performance or to get more reliable profiling results.</p>\n<h2 class="header"><a class="anchor" href="#profile" id="profile"></a><span class="text"><code>profile</code></span><a class="icon-link" href="#profile"></a></h2>\n<p><code>boolean</code></p>\n<p>捕获一个应用程序&quot;配置文件&quot;，包括统计和提示，然后可以使用 <a href="https://webpack.github.io/analyse/">Analyze</a> 分析工具进行详细分析。</p>\n<blockquote class="tip"><div class="tip-content"> 使用 <a href="https://www.npmjs.com/package/stats-webpack-plugin">StatsPlugin</a> 可以更好地控制生成的配置文件。 </div></blockquote><blockquote class="tip"><div class="tip-content"> Combine with <code>parallelism: 1</code> for better results. </div></blockquote><h2 class="header"><a class="anchor" href="#recordspath" id="recordspath"></a><span class="text"><code>recordsPath</code></span><a class="icon-link" href="#recordspath"></a></h2>\n<p>打开这个选项可以生成包含 webpack 记录的 JSON 文件。这个文件记录了数次编译时的模块的特征。你可以用这个文件来比较各个编译之间模块的改变。只要简单的设置一下路径就可以生成这个 JSON 文件：</p>\n<pre><code class="lang-js">recordsPath<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'records.json\'</span><span class="token punctuation">)</span>\n</code></pre>\n<p>当复杂的设置导致使用了<a href="/guides/code-splitting">代码分离(code splittnig)</a>的时候，地址的记录会相当有用。这个 JSON 文件可以用来确保被分割的 bundle 文件的确根据你的需求被保存进入了<a href="/guides/caching">缓存(caching)</a>。</p>\n<blockquote class="tip"><div class="tip-content"> 注意，虽然这个文件是由编译器生成的，但你可能仍然希望在源代码控制中跟踪它，以保留其随时间变化的历史记录。 </div></blockquote><blockquote class="warning"><div class="tip-content"> 设置 <code>recordsPath</code> 会同时把 <code>recordsInputPath</code> 和 <code>recordsOutputPath</code> 设置成相同的路径。通常来讲这也是符合逻辑的，除非你想改变记录文件的名称。可以查看下面的实例： </div></blockquote><h2 class="header"><a class="anchor" href="#recordsinputpath" id="recordsinputpath"></a><span class="text"><code>recordsInputPath</code></span><a class="icon-link" href="#recordsinputpath"></a></h2>\n<p>设定读取最后一条记录的文件的名称。这可以用来重命名一个记录文件，可以查看下面的实例：</p>\n<h2 class="header"><a class="anchor" href="#recordsoutputpath" id="recordsoutputpath"></a><span class="text"><code>recordsOutputPath</code></span><a class="icon-link" href="#recordsoutputpath"></a></h2>\n<p>设定记录要写入的位置。下文的例子描述了如何用这个选项和 <code>recordsInptuPaht</code> 来重命名一个记录文件：</p>\n<pre><code class="lang-js">recordsInputPath<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'records.json\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\nrecordsOutputPath<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'newRecords.json\'</span><span class="token punctuation">)</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/configuration/other-options/">https://webpack.js.org/configuration/other-options/</a></p>\n</blockquote>\n',title:"其它选项(Other Options)"},title:"其它选项(Other Options)",url:"/configuration/other-options/"}]},{title:"API",url:"api",pages:[{file:{attributes:{title:"命令行接口(Command Line Interface)",sort:2,contributors:["ev1stensberg","simon04","tbroadley"],related:[{title:"Analyzing Build Statistics",url:"https://survivejs.com/webpack/optimizing-build/analyzing-build-statistics/"},{title:"Three simple ways to inspect a webpack bundle",url:"https://medium.com/@joeclever/three-simple-ways-to-inspect-a-webpack-bundle-7f6a8fe7195d#.7d2i06mjx"},{title:"Optimising your application bundle size with webpack",url:"https://hackernoon.com/optimising-your-application-bundle-size-with-webpack-e85b00bab579#.5w5ko08pq"},{title:"Analyzing & optimizing your webpack bundle",url:"https://medium.com/@ahmedelgabri/analyzing-optimizing-your-webpack-bundle-8590818af4df#.hce4vdjs9"},{title:"Analysing and minimising the size of client side bundle with webpack and source-map-explorer",url:"https://medium.com/@nimgrg/analysing-and-minimising-the-size-of-client-side-bundle-with-webpack-and-source-map-explorer-41096559beca#.c3t2srr8x"}],group:"-",anchors:[{title:"使用配置文件的用法",id:"-"},{title:"不使用配置文件的用法",id:"-"},{title:"常用配置",id:"-"},{title:"环境选项",id:"-"},{title:"输出配置",id:"-"},{title:"示例用法",id:"-"},{title:"Debug 配置",id:"debug-"},{title:"模块配置",id:"-"},{title:"Watch 配置",id:"watch-"},{title:"性能优化配置",id:"-"},{title:"Resolve 配置",id:"resolve-"},{title:"统计数据配置",id:"-"},{title:"高级配置",id:"-"},{title:"简写",id:"-"},{title:"Profiling",id:"profiling"}]},body:'<p>为了更合适且方便地使用配置，可以在 <code>webpack.config.js</code> 中对 webpack 进行配置。CLI 中传入的任何参数会在配置文件中映射为对应的参数。</p>\n<p>如果你还没有安装 webpack，请查看<a href="/guides/installation">安装指南</a>。</p>\n<blockquote class="tip"><div class="tip-content"> webpack 的新 CLI 正在开发中。正在添加新功能，例如 <code>--init</code> 参数。<a href="https://github.com/webpack/webpack-cli">查看详情！</a> </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">使用配置文件的用法</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-sh">webpack <span class="token punctuation">[</span>--config webpack.config.js<span class="token punctuation">]</span>\n</code></pre>\n<p>配置文件中的相关选项，请参阅<a href="/configuration">配置</a>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">不使用配置文件的用法</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-sh">webpack <span class="token operator">&lt;</span>entry<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>entry<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>output<span class="token operator">></span>\n</code></pre>\n<p><strong><code>&lt;entry&gt;</code></strong></p>\n<p>一个文件名或一组被命名的文件名，作为构建项目的入口起点。你可以传递多个入口（每个入口在启动时加载）。如果传递一个形式为 <code>&lt;name&gt; = &lt;request&gt;</code> 的键值对，则可以创建一个额外的入口起点。它将被映射到配置选项(configuration option)的 <code>entry</code> 属性。</p>\n<p><strong><code>&lt;output&gt;</code></strong></p>\n<p>要保存的 bundled 文件的路径和文件名。它将映射到配置选项 <code>output.path</code> 和 <code>output.filename</code>。</p>\n<p><strong>示例</strong></p>\n<p>假设你的项目结构像下面这样：</p>\n<pre><code class="lang-bash"><span class="token keyword">.</span>\n├── dist\n├── index.html\n└── src\n    ├── index.js\n    ├── index2.js\n    └── others.js\n</code></pre>\n<pre><code class="lang-bash">webpack src/index.js dist/bundle.js\n</code></pre>\n<p>打包源码，入口为 <code>index.js</code>，并且输出文件的路径为 <code>dist</code>，文件名为 <code>bundle.js</code></p>\n<pre><code class="lang-bash">    <span class="token operator">|</span> Asset     <span class="token operator">|</span> Size    <span class="token operator">|</span> Chunks      <span class="token operator">|</span> Chunk Names <span class="token operator">|</span>\n    <span class="token operator">|</span>-----------<span class="token operator">|</span>---------<span class="token operator">|</span>-------------<span class="token operator">|</span>-------------<span class="token operator">|</span>\n    <span class="token operator">|</span> bundle.js <span class="token operator">|</span> 1.54 kB <span class="token operator">|</span> 0 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index       <span class="token operator">|</span>\n    <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 51 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/others.js 29 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<pre><code class="lang-bash">webpack index<span class="token operator">=</span>./src/index.js entry2<span class="token operator">=</span>./src/index2.js dist/bundle.js\n</code></pre>\n<p>以多个入口的方式打包文件</p>\n<pre><code class="lang-bash">    <span class="token operator">|</span> Asset     <span class="token operator">|</span> Size    <span class="token operator">|</span> Chunks        <span class="token operator">|</span> Chunk Names   <span class="token operator">|</span>\n    <span class="token operator">|</span>-----------<span class="token operator">|</span>---------<span class="token operator">|</span>---------------<span class="token operator">|</span>---------------<span class="token operator">|</span>\n    <span class="token operator">|</span> bundle.js <span class="token operator">|</span> 1.55 kB <span class="token operator">|</span> 0,1 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index, entry2 <span class="token operator">|</span>\n    <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 51 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index2.js 54 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/others.js 29 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">常用配置</span><a class="icon-link" href="#-"></a></h3>\n<p><strong>列出命令行所有可用的配置选项</strong></p>\n<pre><code class="lang-bash">webpack --help\nwebpack -h\n</code></pre>\n<p><strong>使用配置文件进行构建</strong></p>\n<p>指定其它的<a href="/configuration">配置</a>文件。配置文件默认为 <code>webpack.config.js</code>，如果你想使用其它配置文件，可以加入这个参数。</p>\n<pre><code class="lang-bash">webpack --config example.config.js\n</code></pre>\n<p><strong>以 JSON 格式输出 webpack 的运行结果</strong></p>\n<pre><code class="lang-bash">webpack --json\nwebpack --json <span class="token operator">></span> stats.json\n</code></pre>\n<p>在其他每个情况下，webpack 会打印一组统计信息，用于显示 bundle, chunk 和用时等详细信息。使用此选项，输出可以是 JSON 对象。此输出文件(response)可被 webpack 的<a href="https://webpack.github.com/analyse">分析工具</a>，或 chrisbateman 的 <a href="https://chrisbateman.github.io/webpack-visualizer/">webpack 可视化工具</a>，或 th0r 的 <a href="https://github.com/th0r/webpack-bundle-analyzer">webpack bundle 分析工具</a>接收后进行分析。分析工具将接收 JSON 并以图形形式提供构建的所有细节。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">环境选项</span><a class="icon-link" href="#-"></a></h3>\n<p>当 webpack 配置对象<a href="/configuration/configuration-types#exporting-a-function">导出为一个函数</a>时，可以向起传入一个&quot;环境对象(environment)&quot;。</p>\n<pre><code class="lang-bash">webpack --env.production    <span class="token comment"># 设置 env.production == true</span>\nwebpack --env.platform<span class="token operator">=</span>web  <span class="token comment"># 设置 env.platform == "web"</span>\n</code></pre>\n<p><code>--env</code> 参数具有多种语法 accepts various syntaxes:</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Invocation</div><div class="table-th">Resulting environment</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env prod</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>&quot;prod&quot;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env.prod</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>{ prod: true }</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env.prod=1</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>{ prod: 1 }</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env.prod=foo</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>{ prod: &quot;foo&quot; }</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env.prod --env.min</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>{ prod: true, min: true }</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env.prod --env min</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>[{ prod: true }, &quot;min&quot;]</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env.prod=foo --env.prod=bar</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>{prod: [ &quot;foo&quot;, &quot;bar&quot; ]}</code>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><blockquote class="tip"><div class="tip-content"> See the <a href="/guides/environment-variables">environment variables</a> guide for more information on its usage. </div></blockquote><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">输出配置</span><a class="icon-link" href="#-"></a></h3>\n<p>通过以下这些配置，你可以调整构建流程的某些<a href="/configuration/output">输出</a>参数。</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">参数</div><div class="table-th">说明</div><div class="table-th">输入类型</div><div class="table-th">默认值</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--output-chunk-filename</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        输出的附带 chunk 的文件名\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        输入类型\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        含有 [id] 的文件名，而不是 [name] 或者 [id] 作为前缀\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--output-filename</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        打包文件的文件名\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        输入类型\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        [name].js\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--output-jsonp-function</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        加载 chunk 时使用的 JSONP 函数名\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        输入类型\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        webpackJsonp\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--output-library</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        以库的形式导出入口文件\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        输入类型\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--output-library-target</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        以库的形式导出入口文件时，输出的类型\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        输入类型\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        var\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--output-path</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        输出的路径（在公共路径的基础上）\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        输入类型\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        当前目录\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--output-pathinfo</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        加入一些依赖信息的注解\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        输入类型\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--output-public-path</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        The 输出文件时使用的公共路径\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        输入类型\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        /\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--output-source-map-filename</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        生成的 SourceMap 的文件名\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        输入类型\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        [name].map or [outputFilename].map\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h4 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例用法</span><a class="icon-link" href="#-"></a></h4>\n<pre><code class="lang-bash">webpack index<span class="token operator">=</span>./src/index.js index2<span class="token operator">=</span>./src/index2.js --output-path<span class="token operator">=</span><span class="token string">\'./dist\'</span> --output-filename<span class="token operator">=</span><span class="token string">\'[name][hash].bundle.js\'</span>\n\n<span class="token operator">|</span> Asset                                <span class="token operator">|</span> Size    <span class="token operator">|</span> Chunks      <span class="token operator">|</span> Chunk Names   <span class="token operator">|</span>\n<span class="token operator">|</span>--------------------------------------<span class="token operator">|</span>---------<span class="token operator">|</span>-------------<span class="token operator">|</span>---------------<span class="token operator">|</span>\n<span class="token operator">|</span> index2740fdca26e9348bedbec.bundle.js <span class="token operator">|</span>  2.6 kB <span class="token operator">|</span> 0 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index2        <span class="token operator">|</span>\n<span class="token operator">|</span> index740fdca26e9348bedbec.bundle.js  <span class="token operator">|</span> 2.59 kB <span class="token operator">|</span> 1 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index         <span class="token operator">|</span>\n    <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/others.js 29 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 51 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>2<span class="token punctuation">]</span> ./src/index2.js 54 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<pre><code class="lang-bash">webpack.js index<span class="token operator">=</span>./src/index.js index2<span class="token operator">=</span>./src/index2.js --output-path<span class="token operator">=</span><span class="token string">\'./dist\'</span> --output-filename<span class="token operator">=</span><span class="token string">\'[name][hash].bundle.js\'</span> --devtool source-map --output-source-map-filename<span class="token operator">=</span><span class="token string">\'[name]123.map\'</span>\n\n<span class="token operator">|</span> Asset                                <span class="token operator">|</span> Size    <span class="token operator">|</span> Chunks      <span class="token operator">|</span> Chunk Names   <span class="token operator">|</span>\n<span class="token operator">|</span>--------------------------------------<span class="token operator">|</span>---------<span class="token operator">|</span>-------------<span class="token operator">|</span>---------------<span class="token operator">|</span>\n<span class="token operator">|</span> index2740fdca26e9348bedbec.bundle.js <span class="token operator">|</span> 2.76 kB <span class="token operator">|</span> 0 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index2        <span class="token operator">|</span>\n<span class="token operator">|</span>  index740fdca26e9348bedbec.bundle.js <span class="token operator">|</span> 2.74 kB <span class="token operator">|</span> 1 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index         <span class="token operator">|</span>\n<span class="token operator">|</span>                        index2123.map <span class="token operator">|</span> 2.95 kB <span class="token operator">|</span> 0 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index2        <span class="token operator">|</span>\n<span class="token operator">|</span>                         index123.map <span class="token operator">|</span> 2.95 kB <span class="token operator">|</span> 1 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index         <span class="token operator">|</span>\n    <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/others.js 29 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 51 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>2<span class="token punctuation">]</span> ./src/index2.js 54 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#debug-" id="debug-"></a><span class="text">Debug 配置</span><a class="icon-link" href="#debug-"></a></h3>\n<p>以下这些配置可以帮助你在 Webpack 编译过程中更好地 debug。</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">参数</div><div class="table-th">说明</div><div class="table-th">输入类型</div><div class="table-th">默认值</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--debug</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        把 loader 设置为 debug 模式\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        输入类型\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--devtool</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        为打包好的资源定义 [source map 的类型]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        输入类型\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--progress</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        打印出编译进度的百分比值\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        输入类型\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">模块配置</span><a class="icon-link" href="#-"></a></h3>\n<p>这些配置可以用于绑定 Webpack 允许的<a href="/configuration/module/">模块</a>。</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">参数</div><div class="table-th">说明</div><div class="table-th">用法</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--module-bind</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        为 loader 绑定一个扩展\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        <code>--module-bind js=babel-loader</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--module-bind-post</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        为 post loader 绑定一个扩展\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--module-bind-pre</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        为 pre loader 绑定一个扩展\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#watch-" id="watch-"></a><span class="text">Watch 配置</span><a class="icon-link" href="#watch-"></a></h3>\n<p>这些配置可以用于<a href="/configuration/watch/">观察</a>依赖文件的变化，一旦有变化，则可以重新执行构建流程。</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">参数</div><div class="table-th">说明</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--watch</code>, <code>-w</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        观察文件系统的变化\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--watch-aggregate-timeout</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        指定一个毫秒数，在这个时间内，文件若发送了多次变化，会被合并\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--watch-poll</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        轮询观察文件变化的时间间隔（同时会打开轮询机制）\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--watch-stdin</code>, <code>--stdin</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        当 stdin 关闭时，退出进程\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">性能优化配置</span><a class="icon-link" href="#-"></a></h3>\n<p>在生产环境的构建时，这些配置可以用于调整的一些性能相关的配置。</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">参数</div><div class="table-th">说明</div><div class="table-th">使用的插件</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--optimize-max-chunks</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        限制 chunk 的数量\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        使用的插件\n    </div>\n    <div class="table-td-content">\n        <a href="/plugins/limit-chunk-count-plugin">LimitChunkCountPlugin</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--optimize-min-chunk-size</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        限制 chunk 的最小体积\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        使用的插件\n    </div>\n    <div class="table-td-content">\n        <a href="/plugins/min-chunk-size-plugin">MinChunkSizePlugin</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--optimize-minimize</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        压缩混淆 javascript，并且把 loader 设置为 minimizing\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        使用的插件\n    </div>\n    <div class="table-td-content">\n        <a href="/plugins/uglifyjs-webpack-plugin/">UglifyJsPlugin</a> &amp; <a href="/plugins/loader-options-plugin/">LoaderOptionsPlugin</a>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#resolve-" id="resolve-"></a><span class="text">Resolve 配置</span><a class="icon-link" href="#resolve-"></a></h3>\n<p>这些配置可以用于设置  webpack <a href="/configuration/resolve/">resolver</a> 时使用的别名(alias)和扩展名(extension)。</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">参数</div><div class="table-th">说明</div><div class="table-th">示例</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        --resolve-alias\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        指定模块的别名\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        示例\n    </div>\n    <div class="table-td-content">\n        --resolve-alias jquery-plugin=jquery.plugin\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        --resolve-extensions\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        指定需要被处理的文件的扩展名\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        示例\n    </div>\n    <div class="table-td-content">\n        --resolve-extensions .es6 .js .ts\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        --resolve-loader-alias\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        Minimize javascript and switches loaders to minimizing\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        示例\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">统计数据配置</span><a class="icon-link" href="#-"></a></h3>\n<p>以下选项用于配置 Webpack 在控制台输出的<a href="/configuration/stats/">统计数据</a>，以及这些数据的样式。</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">参数</div><div class="table-th">说明</div><div class="table-th">Type</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--color</code>, <code>--colors</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        E开启/关闭控制台的颜色 [默认值：(supports-color)]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        选择<a href="/configuration/stats">显示预设</a>(verbose - 繁琐, detailed - 细节, normal - 正常, minimal - 最小, errors-only - 仅错误, none - 无; 从 webpack 3.0.0 开始)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-cached</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        在输出中显示缓存的模块\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-cached-assets</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        在输出中显示缓存的 assets\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-chunks</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        在输出中显示 chunks\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-depth</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        显示从入口起点到每个模块的距离\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-entrypoints</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        在输出中显示入口文件\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-error-details</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        显示详细的错误信息\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-exclude</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        在输出中显示被排除的文件\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-max-modules</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        设置输出中可见模块的最大数量\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        number\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-modules</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        在输出中显示所有模块，包括被排除的模块\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-optimization-bailout</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        作用域提升回退触发器(Scope hoisting fallback trigger)（从 webpack 3.0.0 开始）\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-origins</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        在输出中显示最初的 chunk\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-provided-exports</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        显示有关从模块导出的信息\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-reasons</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        显示模块包含在输出中的原因\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--display-used-exports</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        显示模块中被使用的接口（Tree Shaking）\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--hide-modules</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        隐藏关于模块的信息\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--sort-assets-by</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        对 assets 列表以某种属性排序\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--sort-chunks-by</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        对 chunks 列表以某种属性排序\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--sort-modules-by</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        对模块列表以某种属性排序\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--verbose</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        显示更多信息\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">高级配置</span><a class="icon-link" href="#-"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">参数</div><div class="table-th">说明</div><div class="table-th">用法</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--bail</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        一旦发生错误，立即终止\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--cache</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        开启缓存 [watch 时会默认打开]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        <code>--cache=false</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--define</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        定义 bundle 中的任意自由变量，查看 <a href="/guides/shimming">shimming</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        <code>--define process.env.NODE_ENV=&#39;development&#39;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--hot</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        开启<a href="/concepts/hot-module-replacement">模块热替换</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        <code>--hot=true</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--labeled-modules</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        开启模块标签 [使用 LabeledModulesPlugin]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--plugin</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        加载某个<a href="/configuration/plugins/">插件</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--prefetch</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        预加载某个文件\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        <code>--prefetch=./files.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--provide</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        在所有模块中将这些模块提供为自由变量，查看 <a href="/guides/shimming">shimming</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        <code>--provide jQuery=jquery</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--records-input-path</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        记录文件的路径（读取）\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--records-output-path</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        记录文件的路径（写入）\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--records-path</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        记录文件的路径\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        参数\n    </div>\n    <div class="table-td-content">\n        <code>--target</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        说明\n    </div>\n    <div class="table-td-content">\n        <a href="/configuration/target/">目标</a>的执行环境\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        用法\n    </div>\n    <div class="table-td-content">\n        <code>--target=&#39;node&#39;</code>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">简写</span><a class="icon-link" href="#-"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">简写</div><div class="table-th">含义</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        简写\n    </div>\n    <div class="table-td-content">\n        -d\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        含义\n    </div>\n    <div class="table-td-content">\n        <code>--debug --devtool cheap-module-eval-source-map --output-pathinfo</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        简写\n    </div>\n    <div class="table-td-content">\n        -p\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        含义\n    </div>\n    <div class="table-td-content">\n        <code>--optimize-minimize --define process.env.NODE_ENV=&quot;production&quot;</code>, see <a href="/guides/production">building for production</a>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#profiling" id="profiling"></a><span class="text">Profiling</span><a class="icon-link" href="#profiling"></a></h3>\n<p><code>--profile</code> 选项捕获编译时每个步骤的时间信息，并且将这些信息包含在输出中。</p>\n<pre><code class="lang-bash">webpack --profile\n\n⋮\n<span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 90 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    factory:22ms building:16ms <span class="token operator">=</span> 38ms\n</code></pre>\n<p>For each module, the following details are included in the output as applicable:</p>\n<ul>\n<li><code>factory</code>: time to collect module metadata (e.g. resolving the filename)</li>\n<li><code>building</code>: time to build the module (e.g. loaders and parsing)</li>\n<li><code>dependencies</code>: time to identify and connect the module’s dependencies</li>\n</ul>\n<p>Paired with <code>--progress</code>, <code>--profile</code> gives you an in depth idea of which step in the compilation is taking how long. This can help you optimise your build in a more informed manner.</p>\n<pre><code class="lang-bash">webpack --progress --profile\n\n30ms building modules\n1ms sealing\n1ms optimizing\n0ms basic module optimization\n1ms module optimization\n1ms advanced module optimization\n0ms basic chunk optimization\n0ms chunk optimization\n1ms advanced chunk optimization\n0ms module and chunk tree optimization\n1ms module reviving\n0ms module order optimization\n1ms module <span class="token function">id</span> optimization\n1ms chunk reviving\n0ms chunk order optimization\n1ms chunk <span class="token function">id</span> optimization\n10ms hashing\n0ms module assets processing\n13ms chunk assets processing\n1ms additional chunk assets processing\n0ms recording\n0ms additional asset processing\n26ms chunk asset optimization\n1ms asset optimization\n6ms emitting\n⋮\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/api/cli/">https://webpack.js.org/api/cli/</a></p>\n</blockquote>\n',title:"命令行接口(Command Line Interface)"},title:"命令行接口(Command Line Interface)",url:"/api/cli/"},{file:{attributes:{title:"包含统计数据的文件(Stats Data)",sort:3,contributors:["skipjack"],group:"-",anchors:[{title:"结构 (Structure)",id:"-structure-"},{title:"Asset对象 (Asset Objects)",id:"asset-asset-objects-"},{title:"Chunk对象 (Chunk Objects)",id:"chunk-chunk-objects-"},{title:"模块对象 (Module Objects)",id:"-module-objects-"},{title:"错误与警告",id:"-"}],related:[]},body:'<p>通过 webpack 编译源文件时，用户可以生成包含有关于模块的统计数据的 JSON 文件。这些统计数据不仅可以帮助开发者来分析应用的依赖图表，还可以优化编译的速度。这个 JSON 文件可以通过以下的命令来生成:</p>\n<pre><code class="lang-bash">webpack --profile --json <span class="token operator">></span> compilation-stats.json\n</code></pre>\n<p>这个标识是告诉 webpack <code>compilation-stats.json</code> 要包含依赖的图表以及各种其他的编译信息。一般来说，也会把 <code>--profile</code> 一起加入，这样每一个包含自身编译数据的<a href="#modules-object"><code>模块</code>对象(<code>modules</code> object)</a> 都会添加 <code>profile</code> 。</p>\n<h2 class="header"><a class="anchor" href="#-structure-" id="-structure-"></a><span class="text">结构 (Structure)</span><a class="icon-link" href="#-structure-"></a></h2>\n<p>最外层的输出 JSON 文件比较容易理解，但是其中还是有一小部分嵌套的数据不是那么容易理解。不过放心，这其中的每一部分都在后面有更详细的解释，并且注释中还附带有超链接可以直接跳入相应的章节。</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.4.13"</span><span class="token punctuation">,</span> <span class="token comment">// 用来编译的 webpack 的版本</span>\n  <span class="token string">"hash"</span><span class="token punctuation">:</span> <span class="token string">"11593e3b3ac85436984a"</span><span class="token punctuation">,</span> <span class="token comment">// 编译使用的 hash</span>\n  <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token number">2469</span><span class="token punctuation">,</span> <span class="token comment">// 编译耗时 (ms)</span>\n  <span class="token string">"filteredModules"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 当 <a class="code-link" href="/configuration/stats/#stats">`exclude`</a>传入<a class="code-link" href="/api/node/#stats-tojson-options-">`toJson`</a> 函数时，统计被无视的模块的数量</span>\n  <span class="token string">"assetsByChunkName"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 用作映射的 chunk 的名称</span>\n    <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"web.js?h=11593e3b3ac85436984a"</span><span class="token punctuation">,</span>\n    <span class="token string">"named-chunk"</span><span class="token punctuation">:</span> <span class="token string">"named-chunk.web.js"</span><span class="token punctuation">,</span>\n    <span class="token string">"other-chunk"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token string">"other-chunk.js"</span><span class="token punctuation">,</span>\n      <span class="token string">"other-chunk.css"</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">"assets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// <a class="code-link" href="#asset-objects">asset 对象 (asset objects)</a> 的数组</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"chunks"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// <a class="code-link" href="#chunk-objects">chunk 对象 (chunk objects)</a> 的数组</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// <a class="code-link" href="#module-objects">模块对象 (module objects)</a> 的数组</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"errors"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// <a class="code-link" href="#errors-and-warnings">错误字符串 (error string)</a> 的数组</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"warnings"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// <a class="code-link" href="#errors-and-warnings">警告字符串 (warning string)</a> 的数组</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#asset-asset-objects-" id="asset-asset-objects-"></a><span class="text">Asset对象 (Asset Objects)</span><a class="icon-link" href="#asset-asset-objects-"></a></h3>\n<p>每一个 <code>assets</code> 对象都表示一个编译出的 <code>output</code> 文件。 <code>assets</code> 都会有一个共同的结构：</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token string">"chunkNames"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 这个 asset 包含的 chunk</span>\n  <span class="token string">"chunks"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 这个 asset 包含的 chunk 的 id</span>\n  <span class="token string">"emitted"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个 asset 是否会让它输出到 output 目录</span>\n  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"10.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// 输出的文件名</span>\n  <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">1058</span> <span class="token comment">// 文件的大小</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#chunk-chunk-objects-" id="chunk-chunk-objects-"></a><span class="text">Chunk对象 (Chunk Objects)</span><a class="icon-link" href="#chunk-chunk-objects-"></a></h3>\n<p>每一个 <code>chunks</code> 表示一组称为 <a href="/glossary#c">chunk</a> 的模块。每一个对象都满足以下的结构。</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token string">"entry"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个 chunk 是否包含 webpack 的运行时</span>\n  <span class="token string">"files"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 一个包含这个 chunk 的文件名的数组</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"filteredModules"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 见上文的 <a class="code-link" href="#Structure">结构</a></span>\n  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 这个 chunk 的id</span>\n  <span class="token string">"initial"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个 chunk 是开始就要加载还是 <a class="code-link" href="/guides/lazy-loading">懒加载(lazy-loading)</a></span>\n  <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// <a class="code-link" href="#module-objects">模块对象 (module objects)</a>的数组</span>\n    <span class="token string">"web.js?h=11593e3b3ac85436984a"</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"names"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 包含在这个 chunk 内的 chunk 的名字的数组</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"origins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 下文详述</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"parents"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 父 chunk 的 ids</span>\n  <span class="token string">"rendered"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个 chunk 是否会参与进编译</span>\n  <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">188057</span> <span class="token comment">// chunk 的大小(byte)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>chunks</code> 对象还会包含一个 <code>来源 (origins)</code> ，来表示每一个 chunk 是从哪里来的。 <code>来源 (origins)</code> 是以下的形式</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token string">"loc"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// 具体是哪行生成了这个chunk</span>\n  <span class="token string">"module"</span><span class="token punctuation">:</span> <span class="token string">"(webpack)\\\\test\\\\browsertest\\\\lib\\\\index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// 模块的位置</span>\n  <span class="token string">"moduleId"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 模块的ID</span>\n  <span class="token string">"moduleIdentifier"</span><span class="token punctuation">:</span> <span class="token string">"(webpack)\\\\test\\\\browsertest\\\\lib\\\\index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// 模块的地址</span>\n  <span class="token string">"moduleName"</span><span class="token punctuation">:</span> <span class="token string">"./lib/index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// 模块的相对地址</span>\n  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"main"</span><span class="token punctuation">,</span> <span class="token comment">// chunk的名称</span>\n  <span class="token string">"reasons"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// <a class="code-link" href="#模块对象">模块对象</a>中`reason`的数组</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-module-objects-" id="-module-objects-"></a><span class="text">模块对象 (Module Objects)</span><a class="icon-link" href="#-module-objects-"></a></h3>\n<p>缺少了对实际参与进编译的模块的描述，这些数据又有什么意义呢。每一个在依赖图表中的模块都可以表示成以下的形式。</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token string">"assets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// <a class="code-link" href="#asset-objects">asset对象 (asset objects)</a>的数组</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"built"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个模块会参与 <a class="code-link" href="/concepts/loaders">Loaders</a> , 解析, 并被编译</span>\n  <span class="token string">"cacheable"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个模块是否会被缓存</span>\n  <span class="token string">"chunks"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 包含这个模块的 chunks 的 id</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"errors"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 处理这个模块发现的错误的数量</span>\n  <span class="token string">"failed"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 编译是否失败</span>\n  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 这个模块的ID (类似于 <a class="code-link" href="/api/module-variables#module-id-commonjs-">`module.id`</a>)</span>\n  <span class="token string">"identifier"</span><span class="token punctuation">:</span> <span class="token string">"(webpack)\\\\test\\\\browsertest\\\\lib\\\\index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// webpack内部使用的唯一的标识</span>\n  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"./lib/index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// 实际文件的地址</span>\n  <span class="token string">"optional"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 每一个对这个模块的请求都会包裹在 `try... catch` 内 (与ESM无关)</span>\n  <span class="token string">"prefetched"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个模块是否会被 <a class="code-link" href="/plugins/prefetch-plugin">prefetched</a></span>\n  <span class="token string">"profile"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 有关 <a class="code-link" href="/api/cli#profiling">`--profile` flag</a> 的这个模块特有的编译数据 (ms)</span>\n    <span class="token string">"building"</span><span class="token punctuation">:</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token comment">// 载入和解析</span>\n    <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token comment">// 编译依赖</span>\n    <span class="token string">"factory"</span><span class="token punctuation">:</span> <span class="token number">11</span> <span class="token comment">// 解决依赖</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">"reasons"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 见下文描述</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">3593</span><span class="token punctuation">,</span> <span class="token comment">// 预估模块的大小 (byte)</span>\n  <span class="token string">"source"</span><span class="token punctuation">:</span> "<span class="token comment">// Should not break it...\\r\\nif(typeof...", // 字符串化的输入</span>\n  <span class="token string">"warnings"</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment">// 处理模块时警告的数量</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>每一个模块都包含一个 <code>理由 (reasons)</code> 对象，这个对象描述了这个模块被加入依赖图表的理由。每一个 <code>理由 (reasons)</code> 都类似于上文 <a href="#chunk-objects">chunk objects</a>中的 <code>来源 (origins)</code>:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token string">"loc"</span><span class="token punctuation">:</span> <span class="token string">"33:24-93"</span><span class="token punctuation">,</span> <span class="token comment">// 导致这个被加入依赖图标的代码行数</span>\n  <span class="token string">"module"</span><span class="token punctuation">:</span> <span class="token string">"./lib/index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// 所基于模块的相对地址 <a class="code-link" href="/configuration/entry-context/#context">context</a></span>\n  <span class="token string">"moduleId"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 模块的 ID</span>\n  <span class="token string">"moduleIdentifier"</span><span class="token punctuation">:</span> <span class="token string">"(webpack)\\\\test\\\\browsertest\\\\lib\\\\index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// 模块的地址</span>\n  <span class="token string">"moduleName"</span><span class="token punctuation">:</span> <span class="token string">"./lib/index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// 可读性更好的模块名称 (用于 "更好的打印 (pretty-printing)")</span>\n  <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"require.context"</span><span class="token punctuation">,</span> <span class="token comment">// 使用的<a class="code-link" href="/api/module-methods">请求的种类 (type of request)</a></span>\n  <span class="token string">"userRequest"</span><span class="token punctuation">:</span> <span class="token string">"../../cases"</span> <span class="token comment">// 用来 `import` 或者 `require` 的源字符串</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">错误与警告</span><a class="icon-link" href="#-"></a></h3>\n<p><code>错误 (errors)</code> 和 <code>警告 (warnings)</code> 会包含一个字符串数组。每个字符串包含了信息和栈的追溯:</p>\n<pre><code class="lang-bash"><span class="token punctuation">..</span>/cases/parsing/browserify/index.js\nCritical dependencies:\n2:114-121 This seem to be a pre-built javascript file. Even <span class="token keyword">while</span> this is possible, it\'s not recommended. Try to require to orginal <span class="token function">source</span> to get better results.\n @ <span class="token punctuation">..</span>/cases/parsing/browserify/index.js 2:114-121\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 需要注意的是，当 <code>错误详情为false(errorDetails:false)</code>传入<code>toJson</code>函数时，对栈的追溯就不会被显示。<code>错误详情(errorDetils)</code> 默认值为 <code>true</code> </div></blockquote>',title:"包含统计数据的文件(Stats Data)"},title:"包含统计数据的文件(Stats Data)",url:"/api/stats/"},{file:{attributes:{title:"模块热替换(Hot Module Replacement)",contributors:["skipjack","sokra","tbroadley"],related:[{title:"概念 - 模块热替换(Hot Module Replacement)",url:"/concepts/hot-module-replacement"},{title:"指南 - 模块热替换(Hot Module Replacement)",url:"/guides/hot-module-replacement"}],group:"-",anchors:[{title:"accept",id:"accept"},{title:"decline",id:"decline"},{title:"dispose（或 addDisposeHandler）",id:"dispose-adddisposehandler-"},{title:"removeDisposeHandler",id:"removedisposehandler"},{title:"status",id:"status"},{title:"check",id:"check"},{title:"apply",id:"apply"},{title:"addStatusHandler",id:"addstatushandler"},{title:"removeStatusHandler",id:"removestatushandler"}]},body:'<p>如果已经通过 <a href="/plugins/hot-module-replacement-plugin"><code>HotModuleReplacementPlugin</code></a> 启用了<a href="/concepts/hot-module-replacement">模块热替换(Hot Module Replacement)</a>，则它的接口将被暴露在 <a href="/api/module-variables#module-hot-webpack-specific-"><code>module.hot</code> 属性</a>下面。通常，用户先要检查这个接口是否可访问，然后再开始使用它。举个例子，你可以这样 <code>accept</code> 一个更新的模块：</p>\n<pre><code class="lang-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">\'./library.js\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 使用更新过的 library 模块执行某些操作...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>支持以下方法……</p>\n<h3 class="header"><a class="anchor" href="#accept" id="accept"></a><span class="text"><code>accept</code></span><a class="icon-link" href="#accept"></a></h3>\n<p>接受(accept)给定<code>依赖模块</code>的更新，并触发一个 <code>回调函数</code> 来对这些更新做出响应。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>\n  dependencies<span class="token punctuation">,</span> <span class="token comment">// 可以是一个字符串或字符串数组</span>\n  callback <span class="token comment">// 用于在模块更新后触发的函数</span>\n<span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#decline" id="decline"></a><span class="text"><code>decline</code></span><a class="icon-link" href="#decline"></a></h3>\n<p>拒绝给定<code>依赖模块</code>的更新，使用 <code>&#39;decline&#39;</code> 方法强制更新失败。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">decline</span><span class="token punctuation">(</span>\n  dependencies <span class="token comment">// 可以是一个字符串或字符串数组</span>\n<span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#dispose-adddisposehandler-" id="dispose-adddisposehandler-"></a><span class="text"><code>dispose</code>（或 <code>addDisposeHandler</code>）</span><a class="icon-link" href="#dispose-adddisposehandler-"></a></h3>\n<p>添加一个处理函数，在当前模块代码被替换时执行。此函数应该用于移除你声明或创建的任何持久资源。如果要将状态传入到更新过的模块，请添加给定 <code>data</code> 参数。更新后，此对象在更新之后可通过 <code>module.hot.data</code> 调用。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 清理并将 data 传递到更新后的模块……</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#removedisposehandler" id="removedisposehandler"></a><span class="text"><code>removeDisposeHandler</code></span><a class="icon-link" href="#removedisposehandler"></a></h3>\n<p>删除由 <code>dispose</code> 或 <code>addDisposeHandler</code> 添加的回调函数。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">removeDisposeHandler</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#status" id="status"></a><span class="text"><code>status</code></span><a class="icon-link" href="#status"></a></h3>\n<p>取得模块热替换进程的当前状态。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回以下字符串之一……</span>\n</code></pre>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Status</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        idle\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        该进程正在等待调用 <code>check</code>（见下文）\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        check\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        该进程正在检查以更新\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        prepare\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        该进程正在准备更新（例如，下载已更新的模块）\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        ready\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        此更新已准备并可用\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        dispose\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        该进程正在调用将被替换模块的 <code>dispose</code> 处理函数\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        apply\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        该进程正在调用 <code>accept</code> 处理函数，并重新执行自我接受(self-accepted)的模块\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        abort\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        更新已中止，但系统仍处于之前的状态\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        fail\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        更新已抛出异常，系统状态已被破坏\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#check" id="check"></a><span class="text"><code>check</code></span><a class="icon-link" href="#check"></a></h3>\n<p>测试所有加载的模块以进行更新，如果有更新，则应用它们。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>autoApply<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>outdatedModules <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 超时的模块……</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 捕获错误</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>autoApply</code> 参数可以是布尔值，也可以是 <code>options</code>，当被调用时可以传递给 <code>apply</code> 方法。</p>\n<h3 class="header"><a class="anchor" href="#apply" id="apply"></a><span class="text"><code>apply</code></span><a class="icon-link" href="#apply"></a></h3>\n<p>继续更新进程（只要 <code>module.hot.status() === &#39;ready&#39;</code>）。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>outdatedModules <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 超时的模块……</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 捕获错误</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>可选的 <code>options</code> 对象可以包含以下属性：</p>\n<ul>\n<li><code>ignoreUnaccepted</code> (boolean): Ignore changes made to unaccepted modules.</li>\n<li><code>ignoreDeclined</code> (boolean): Ignore changes made to declined modules.</li>\n<li><code>ignoreErrored</code> (boolean): Ignore errors throw in accept handlers, error handlers and while reevaluating module.</li>\n<li><code>onDeclined</code> (function(info)): Notifier for declined modules</li>\n<li><code>onUnaccepted</code> (function(info)): Notifier for unaccepted modules</li>\n<li><code>onAccepted</code> (function(info)): Notifier for accepted modules</li>\n<li><code>onDisposed</code> (function(info)): Notifier for disposed modules</li>\n<li><code>onErrored</code> (function(info)): Notifier for errors</li>\n</ul>\n<p>The <code>info</code> parameter will be an object containing some of the following values:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">"self-declined"</span> <span class="token operator">|</span> <span class="token string">"declined"</span> <span class="token operator">|</span>\n        <span class="token string">"unaccepted"</span> <span class="token operator">|</span> <span class="token string">"accepted"</span> <span class="token operator">|</span>\n        <span class="token string">"disposed"</span> <span class="token operator">|</span> <span class="token string">"accept-errored"</span> <span class="token operator">|</span>\n        <span class="token string">"self-accept-errored"</span> <span class="token operator">|</span> <span class="token string">"self-accept-error-handler-errored"</span><span class="token punctuation">,</span>\n  moduleId<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// The module in question.</span>\n  dependencyId<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// For errors: the module id owning the accept handler.</span>\n  chain<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// For declined/accepted/unaccepted: the chain from where the update was propagated.</span>\n  parentId<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// For declined: the module id of the declining parent</span>\n  outdatedModules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// For accepted: the modules that are outdated and will be disposed</span>\n  outdatedDependencies<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment">// For accepted: The location of accept handlers that will handle the update</span>\n    <span class="token number">5</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  error<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// For errors: the thrown error</span>\n  originalError<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">// For self-accept-error-handler-errored:</span>\n                                <span class="token comment">// the error thrown by the module before the error handler tried to handle it.</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#addstatushandler" id="addstatushandler"></a><span class="text"><code>addStatusHandler</code></span><a class="icon-link" href="#addstatushandler"></a></h3>\n<p>注册一个函数来监听 <code>status</code>的变化。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">addStatusHandler</span><span class="token punctuation">(</span>status <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 响应当前状态……</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#removestatushandler" id="removestatushandler"></a><span class="text"><code>removeStatusHandler</code></span><a class="icon-link" href="#removestatushandler"></a></h3>\n<p>移除一个注册的状态处理函数。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">removeStatusHandler</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/api/hot-module-replacement/">https://webpack.js.org/api/hot-module-replacement/</a></p>\n</blockquote>\n',title:"模块热替换(Hot Module Replacement)"},title:"模块热替换(Hot Module Replacement)",url:"/api/hot-module-replacement/"},{file:{attributes:{title:"Node.js API",sort:3,contributors:["rynclark","sallar"],group:"-",anchors:[{title:"安装(Installation)",id:"-installation-"},{title:"webpack()",id:"webpack-"},{title:"Compiler 实例(Compiler Instance)",id:"compiler-compiler-instance-"},{title:"执行(Run)",id:"-run-"},{title:"监听(Watching)",id:"-watching-"},{title:"关闭 Watching(Close Watching)",id:"-watching-close-watching-"},{title:"作废 Watching(Invalidate Watching)",id:"-watching-invalidate-watching-"},{title:"Stats 对象(Stats Object)",id:"stats-stats-object-"},{title:"stats.hasErrors()",id:"stats-haserrors-"},{title:"stats.hasWarnings()",id:"stats-haswarnings-"},{title:"stats.toJson(options)",id:"stats-tojson-options-"},{title:"stats.toString(options)",id:"stats-tostring-options-"},{title:"错误处理(Error Handling)",id:"-error-handling-"},{title:"自定义文件系统(Custom File Systems)",id:"-custom-file-systems-"}],related:[]},body:'<p>webpack 提供了 Node.js API，可以在 Node.js 运行时下直接使用。</p>\n<p>当你需要自定义构建或开发流程时，Node.js API 非常有用，因为此时所有的报告和错误处理都必须自行实现，webpack 仅仅负责编译的部分。所以 <a href="/configuration/stats"><code>stats</code></a> 配置选项不会在 <code>webpack()</code> 调用中生效。</p>\n<h2 class="header"><a class="anchor" href="#-installation-" id="-installation-"></a><span class="text">安装(Installation)</span><a class="icon-link" href="#-installation-"></a></h2>\n<p>开始使用 webpack 的 Node.js API 之前，首先你需要安装 webpack：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack\n</code></pre>\n<p>然后在 Node.js 脚本中 <code>require</code> webpack module：</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 或者如果你喜欢 ES2015:</span>\n<span class="token keyword">import</span> webpack <span class="token keyword">from</span> <span class="token string">"webpack"</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#webpack-" id="webpack-"></a><span class="text"><code>webpack()</code></span><a class="icon-link" href="#webpack-"></a></h2>\n<p>导入的 <code>webpack</code> 函数需要传入一个 webpack <a href="/configuration/">配置对象</a>，当同时传入回调函数时就会执行 webpack compiler：</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// <a class="code-link" href="/configuration/">配置对象</a></span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> <a class="code-link" href="#stats-object">stats</a><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">||</span> stats<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// <a class="code-link" href="#-error-handling-">在这里处理错误</a></span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 处理完成</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 编译错误<strong>不</strong>在 <code>err</code> 对象内，而是需要使用 <code>stats.hasErrors()</code> 单独处理，你可以在指南的 <a href="#-error-handling-">错误处理</a> 部分查阅到更多细节。<code>err</code> 对象只会包含 webpack 相关的问题，比如配置错误等。 </div></blockquote><p><strong>注意</strong> 你可以传入一个配置选项数组到 <code>webpack</code> 函数内：</p>\n<pre><code class="lang-js"><span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token comment">/* 配置对象 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token comment">/* 配置对象 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token comment">/* 配置对象 */</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> <a class="code-link" href="#stats-object">stats</a><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> webpack <strong>不</strong>会并行执行多个配置。每个配置只会在前一个处理结束后才会开始处理。如果你需要 webpack 并行执行它们，你可以使用像 <a href="https://www.npmjs.com/package/parallel-webpack">parallel-webpack</a> 这样的第三方解决方案。 </div></blockquote><h2 class="header"><a class="anchor" href="#compiler-compiler-instance-" id="compiler-compiler-instance-"></a><span class="text">Compiler 实例(Compiler Instance)</span><a class="icon-link" href="#compiler-compiler-instance-"></a></h2>\n<p>如果你不向 <code>webpack</code> 执行函数传入回调函数，就会得到一个 webpack <code>Compiler</code> 实例。你可以通过它手动触发 webpack 执行器，或者是让它执行构建并监听变更。和 <a href="/api/cli/">CLI</a> API 很类似。<code>Compiler</code> 实例提供了以下方法：</p>\n<ul>\n<li><code>.run(callback)</code></li>\n<li><code>.watch(watchOptions, handler)</code></li>\n</ul>\n<blockquote class="warning"><div class="tip-content"> The API only supports a single concurrent compilation at a time. When using <code>run</code>, wait for it to finish before calling <code>run</code> or <code>watch</code> again. When using <code>watch</code>, call <code>close</code> and wait for it to finish before calling <code>run</code> or <code>watch</code> again. Concurrent compilations will corrupt the output files. </div></blockquote><h2 class="header"><a class="anchor" href="#-run-" id="-run-"></a><span class="text">执行(Run)</span><a class="icon-link" href="#-run-"></a></h2>\n<p>调用 <code>Compiler</code> 实例的 <code>run</code> 方法跟上文提到的快速执行方法很相似：</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// <a class="code-link" href="/configuration/">配置对象</a></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncompiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <a class="code-link" href="#stats-object">stats</a><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-watching-" id="-watching-"></a><span class="text">监听(Watching)</span><a class="icon-link" href="#-watching-"></a></h2>\n<p>调用 <code>watch</code> 方法会触发 webpack 执行器，但之后会监听变更（很像 CLI 命令: <code>webpack --watch</code>），一旦 webpack 检测到文件变更，就会重新执行编译。该方法返回一个 <code>Watching</code> 实例。</p>\n<pre><code class="lang-js"><span class="token function">watch</span><span class="token punctuation">(</span>watchOptions<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// <a class="code-link" href="/configuration/">配置对象</a></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> watching <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n<details><summary><span class=\'code-details-summary-span\'>  <span class="token comment">/* <a class="code-link" href="/configuration/watch/#watchoptions">watchOptions</a> */</span></span></summary>  aggregateTimeout<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n  poll<span class="token punctuation">:</span> undefined\n</details><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> <a class="code-link" href="#stats-object">stats</a><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 在这里打印 watch/build 结果...</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>Watching</code> 配置选项的<a href="/configuration/watch/#watchoptions">细节可以在这里查阅</a>。</p>\n<blockquote class="warning"><div class="tip-content"> 文件系统不正确的问题，可能会对单次修改触发多次构建。因此，在上面的示例中，一次修改可能会多次触发 <code>console.log</code> 语句。用户应该预知此行为，并且可能需要检查 <code>stats.hash</code> 来查看文件哈希是否确实变更。 </div></blockquote><h3 class="header"><a class="anchor" href="#-watching-close-watching-" id="-watching-close-watching-"></a><span class="text">关闭 <code>Watching</code>(Close <code>Watching</code>)</span><a class="icon-link" href="#-watching-close-watching-"></a></h3>\n<p><code>watch</code> 方法返回一个 <code>Watching</code> 实例，它会暴露一个 <code>.close(callback)</code> 方法。调用该方法将会结束监听：</p>\n<pre><code class="lang-js">watching<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Watching Ended."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 不允许在当前监听器已经关闭或失效前再次监听或执行。 </div></blockquote><h3 class="header"><a class="anchor" href="#-watching-invalidate-watching-" id="-watching-invalidate-watching-"></a><span class="text">作废 <code>Watching</code>(Invalidate <code>Watching</code>)</span><a class="icon-link" href="#-watching-invalidate-watching-"></a></h3>\n<p>使用 <code>watching.invalidate</code>，你可以手动使当前编译循环(compiling round)无效，而不会停止监视进程：</p>\n<pre><code class="lang-js">watching<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#stats-stats-object-" id="stats-stats-object-"></a><span class="text">Stats 对象(Stats Object)</span><a class="icon-link" href="#stats-stats-object-"></a></h2>\n<p><code>stats</code> 对象会被作为 <a href="#webpack-"><code>webpack()</code></a> 回调函数的第二个参数传入，可以通过它获取到代码编译过程中的有用信息，包括：</p>\n<ul>\n<li>错误和警告（如果有的话）</li>\n<li>计时信息</li>\n<li>module 和 chunk 信息</li>\n</ul>\n<p><a href="/api/cli">webpack CLI</a> 正是基于这些信息在控制台展示友好的格式输出。</p>\n<blockquote class="tip"><div class="tip-content"> When using the <a href="/api/plugins/compiler#multicompiler"><code>MultiCompiler</code></a>, a <code>MultiStats</code> instance is returned that fulfills the same interface as <code>stats</code>, i.e. the methods described below. </div></blockquote><p><code>stats</code> 对象暴露了以下方法：</p>\n<h3 class="header"><a class="anchor" href="#stats-haserrors-" id="stats-haserrors-"></a><span class="text"><code>stats.hasErrors()</code></span><a class="icon-link" href="#stats-haserrors-"></a></h3>\n<p>可以用来检查编译期是否有错误，返回 <code>true</code> 或 <code>false</code>。</p>\n<h3 class="header"><a class="anchor" href="#stats-haswarnings-" id="stats-haswarnings-"></a><span class="text"><code>stats.hasWarnings()</code></span><a class="icon-link" href="#stats-haswarnings-"></a></h3>\n<p>可以用来检查编译期是否有警告，返回 <code>true</code> 或 <code>false</code>。</p>\n<h3 class="header"><a class="anchor" href="#stats-tojson-options-" id="stats-tojson-options-"></a><span class="text"><code>stats.toJson(options)</code></span><a class="icon-link" href="#stats-tojson-options-"></a></h3>\n<p>以 JSON 对象形式返回编译信息。<code>options</code> 可以是一个字符串（预设值）或是颗粒化控制的对象：</p>\n<pre><code class="lang-js">stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token string">"minimal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// <a class="code-link" href="/configuration/stats">更多选项如: "verbose" 等</a>.</span>\n</code></pre>\n<pre><code class="lang-js">stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  assets<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  hash<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>所有可用的配置选项和预设值都可查询 <a href="/configuration/stats">Stats 文档</a>。</p>\n<blockquote>\n<p>这里有<a href="https://github.com/webpack/analyse/blob/master/app/pages/upload/example.json">一个该函数输出的示例</a></p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#stats-tostring-options-" id="stats-tostring-options-"></a><span class="text"><code>stats.toString(options)</code></span><a class="icon-link" href="#stats-tostring-options-"></a></h3>\n<p>以格式化的字符串形式返回描述编译信息（类似 <a href="/api/cli">CLI</a> 的输出）。</p>\n<p>配置对象与 <a href="/api/node#stats-tojson-options-"><code>stats.toJson(options)</code></a> 一致，除了额外增加的一个选项：</p>\n<pre><code class="lang-js">stats<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// 增加控制台颜色开关</span>\n  colors<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>下面是 <code>stats.toString()</code> 用法的示例：</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// <a class="code-link" href="/configuration/">配置对象</a></span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    chunks<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 使构建过程更静默无输出</span>\n    colors<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token comment">// 在控制台展示颜色</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-error-handling-" id="-error-handling-"></a><span class="text">错误处理(Error Handling)</span><a class="icon-link" href="#-error-handling-"></a></h2>\n<p>完备的错误处理中需要考虑以下三种类型的错误：</p>\n<ul>\n<li>致命的 wepback 错误（配置出错等）</li>\n<li>编译错误（缺失的 module，语法错误等）</li>\n<li>编译警告</li>\n</ul>\n<p>下面是一个覆盖这些场景的示例：</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// <a class="code-link" href="/configuration/">配置对象</a></span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack <span class="token operator">||</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> info <span class="token operator">=</span> stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">hasWarnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 记录结果...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-custom-file-systems-" id="-custom-file-systems-"></a><span class="text">自定义文件系统(Custom File Systems)</span><a class="icon-link" href="#-custom-file-systems-"></a></h2>\n<p>默认情况下，webpack 使用普通文件系统来读取文件并将文件写入磁盘。但是，还可以使用不同类型的文件系统（内存(memory), webDAV 等）来更改输入或输出行为。为了实现这一点，可以改变 <code>inputFileSystem</code> 或 <code>outputFileSystem</code>。例如，可以使用 <a href="https://github.com/webpack/memory-fs"><code>memory-fs</code></a> 替换默认的 <code>outputFileSystem</code>，以将文件写入到内存中，而不是写入到磁盘：</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> MemoryFS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"memory-fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* options*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncompiler<span class="token punctuation">.</span>outputFileSystem <span class="token operator">=</span> fs<span class="token punctuation">;</span>\ncompiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 之后读取输出：</span>\n  <span class="token keyword">const</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>值得一提的是，被 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 及众多其他包依赖的 <a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware</a> 就是通过这种方式，将你的文件神秘地隐藏起来，但却仍然可以用它们为浏览器提供服务！</p>\n<blockquote class="tip"><div class="tip-content"> 你指定的输出文件系统需要兼容 Node 自身的 <a href="https://nodejs.org/api/fs.html"><code>fs</code></a> 模块接口，接口需要提供 <code>mkdirp</code> 和 <code>join</code> 工具方法。 </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/api/node/">https://webpack.js.org/api/node/</a></p>\n</blockquote>\n',title:"Node.js API"},title:"Node.js API",url:"/api/node/"},{file:{attributes:{title:"loader API",sort:4,contributors:["TheLarkInn","jhnns","tbroadley"],group:"-",anchors:[{title:"示例",id:"-"},{title:"同步 loader",id:"-loader"},{title:"异步 loader",id:"-loader"},{title:'"Raw" loader',id:"-raw-loader"},{title:"越过 loader(Pitching loader)",id:"-loader-pitching-loader-"},{title:"loader 上下文",id:"loader-"},{title:"this.version",id:"this-version"},{title:"this.context",id:"this-context"},{title:"this.request",id:"this-request"},{title:"this.query",id:"this-query"},{title:"this.callback",id:"this-callback"},{title:"this.async",id:"this-async"},{title:"this.data",id:"this-data"},{title:"this.cacheable",id:"this-cacheable"},{title:"this.loaders",id:"this-loaders"},{title:"this.loaderIndex",id:"this-loaderindex"},{title:"this.resource",id:"this-resource"},{title:"this.resourcePath",id:"this-resourcepath"},{title:"this.resourceQuery",id:"this-resourcequery"},{title:"this.target",id:"this-target"},{title:"this.webpack",id:"this-webpack"},{title:"this.sourceMap",id:"this-sourcemap"},{title:"this.emitWarning",id:"this-emitwarning"},{title:"this.emitError",id:"this-emiterror"},{title:"this.loadModule",id:"this-loadmodule"},{title:"this.resolve",id:"this-resolve"},{title:"this.addDependency",id:"this-adddependency"},{title:"this.addContextDependency",id:"this-addcontextdependency"},{title:"this.clearDependencies",id:"this-cleardependencies"},{title:"this.emitFile",id:"this-emitfile"},{title:"this.fs",id:"this-fs"},{title:"废弃的上下文属性",id:"-"},{title:"this.exec",id:"this-exec"},{title:"this.resolveSync",id:"this-resolvesync"},{title:"this.value",id:"this-value"},{title:"this.inputValue",id:"this-inputvalue"},{title:"this.options",id:"this-options"},{title:"this.debug",id:"this-debug"},{title:"this.minimize",id:"this-minimize"},{title:"this._compilation",id:"this-_compilation"},{title:"this._compiler",id:"this-_compiler"},{title:"this._module",id:"this-_module"}],related:[]},body:'<p>所谓 loader 只是一个导出为函数的 JavaScript 模块。<a href="https://github.com/webpack/loader-runner">loader runner</a> 会调用这个函数，然后把上一个 loader 产生的结果或者资源文件(resource file)传入进去。函数的 <code>this</code> 上下文将由 webpack 填充，并且 <a href="https://github.com/webpack/loader-runner">loader runner</a> 具有一些有用方法，可以使 loader 改变为异步调用方式，或者获取 query 参数。</p>\n<p>第一个 loader 的传入参数只有一个：资源文件(resource file)的内容。compiler 需要得到最后一个 loader 产生的处理结果。这个处理结果应该是 <code>String</code> 或者 <code>Buffer</code>（被转换为一个 string），代表了模块的 JavaScript 源码。另外还可以传递一个可选的 SourceMap 结果（格式为 JSON 对象）。</p>\n<p>如果是单个处理结果，可以在<strong>同步模式</strong>中直接返回。如果有多个处理结果，则必须调用 <code>this.callback()</code>。在<strong>异步模式</strong>中，必须调用 <code>this.async()</code>，来指示 <a href="https://github.com/webpack/loader-runner">loader runner</a> 等待异步结果，它会返回 <code>this.callback()</code> 回调函数，随后 loader 必须返回 <code>undefined</code> 并且调用该回调函数。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p>以下部分提供了不同类型的 loader 的一些基本示例。注意，<code>map</code> 和 <code>meta</code> 参数是可选的，查看下面的 <a href="/api/loaders#this-callback"><code>this.callback</code></a>。</p>\n<h3 class="header"><a class="anchor" href="#-loader" id="-loader"></a><span class="text">同步 loader</span><a class="icon-link" href="#-loader"></a></h3>\n<p>无论是 <code>return</code> 还是 <code>this.callback</code> 都可以同步地返回转换后的 <code>content</code> 内容：</p>\n<p><strong>sync-loader.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">someSyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>this.callback</code> 方法则更灵活，因为它允许传递多个参数，而不仅仅是<code>content</code>。</p>\n<p><strong>sync-loader-with-multiple-results.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">someSyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> sourceMaps<span class="token punctuation">,</span> meta<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 当调用 callback() 时总是返回 undefined</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-loader" id="-loader"></a><span class="text">异步 loader</span><a class="icon-link" href="#-loader"></a></h3>\n<p>对于异步 loader，使用 <a href="/api/loaders#this-async"><code>this.async</code></a> 来获取 <code>callback</code> 函数：</p>\n<p><strong>async-loader.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">someAsyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>async-loader-with-multiple-results.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">someAsyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">,</span> sourceMaps<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> sourceMaps<span class="token punctuation">,</span> meta<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> loader 最初被设计为可以在同步 loader pipeline（如 Node.js ，使用 <a href="https://github.com/webpack/enhanced-require">enhanced-require</a>），与异步 pipeline（如 webpack ）中运行。然而在 Node.js 这样的单线程环境下进行耗时长的同步计算不是个好主意，我们建议尽可能地使你的 loader 异步化。但如果计算量很小，同步 loader 也是可以的。 </div></blockquote><h3 class="header"><a class="anchor" href="#-raw-loader" id="-raw-loader"></a><span class="text">&quot;Raw&quot; loader</span><a class="icon-link" href="#-raw-loader"></a></h3>\n<p>默认情况下，资源文件会被转化为 UTF-8 字符串，然后传给 loader。通过设置 <code>raw</code>，loader 可以接收原始的 <code>Buffer</code>。每一个 loader 都可以用 <code>String</code> 或者 <code>Buffer</code> 的形式传递它的处理结果。Complier 将会把它们在 loader 之间相互转换。</p>\n<p><strong>raw-loader.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assert</span><span class="token punctuation">(</span>content <span class="token keyword">instanceof</span> <span class="token class-name">Buffer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">someSyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 返回值也可以是一个 `Buffer`</span>\n    <span class="token comment">// 即使不是 raw loader 也没问题</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>raw <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-loader-pitching-loader-" id="-loader-pitching-loader-"></a><span class="text">越过 loader(Pitching loader)</span><a class="icon-link" href="#-loader-pitching-loader-"></a></h3>\n<p>loader <strong>总是</strong>从右到左地被调用。有些情况下，loader 只关心 request 后面的<strong>元数据(metadata)</strong>，并且忽略前一个 loader 的结果。在实际（从右到左）执行 loader 之前，会先<strong>从左到右</strong>调用 loader 上的 <code>pitch</code> 方法。对于以下 <a href="/configuration/module#rule-use"><code>use</code></a> 配置：</p>\n<pre><code class="lang-js">use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token string">\'a-loader\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'b-loader\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'c-loader\'</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>将会发生这些步骤：</p>\n<pre><code class="lang-diff">|- a-loader `pitch`\n  |- b-loader `pitch`\n    |- c-loader `pitch`\n      |- requested module is picked up as a dependency\n    |- c-loader normal execution\n  |- b-loader normal execution\n|- a-loader normal execution\n</code></pre>\n<p>那么，为什么 loader 可以利用 &quot;跳跃(pitching)&quot; 阶段呢？</p>\n<p>首先，传递给 <code>pitch</code> 方法的 <code>data</code>，在执行阶段也会暴露在 <code>this.data</code> 之下，并且可以用于在循环时，捕获和共享前面的信息。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">someSyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>pitch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>remainingRequest<span class="token punctuation">,</span> precedingRequest<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>其次，如果某个 loader 在 <code>pitch</code> 方法中给出一个结果，那么这个过程会回过身来，并跳过剩下的 loader。在我们上面的例子中，如果 <code>b-loader</code> 的 <code>pitch</code> 方法返回了一些东西：</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">someSyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>pitch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>remainingRequest<span class="token punctuation">,</span> precedingRequest<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">someCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">"module.exports = require("</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"-!"</span> <span class="token operator">+</span> remainingRequest<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">");"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>上面的步骤将被缩短为：</p>\n<pre><code class="lang-diff">|- a-loader `pitch`\n  |- b-loader `pitch` returns a module\n|- a-loader normal execution\n</code></pre>\n<p>查看 <a href="https://github.com/webpack-contrib/bundle-loader">bundle-loader</a>，了解如何以更有意义的方式使用此过程。</p>\n<h2 class="header"><a class="anchor" href="#loader-" id="loader-"></a><span class="text">loader 上下文</span><a class="icon-link" href="#loader-"></a></h2>\n<p>loader context 表示在 loader 内使用 <code>this</code> 可以访问的一些方法或属性。</p>\n<p>假设我们这样请求加载别的模块：\n在 <code>/abc/file.js</code> 中：</p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./loader1?xyz!loader2!./resource?rrr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#this-version" id="this-version"></a><span class="text"><code>this.version</code></span><a class="icon-link" href="#this-version"></a></h3>\n<p><strong>loader API 的版本号。</strong>目前是 <code>2</code>。这对于向后兼容性有一些用处。通过这个版本号，你可以为不同版本间的破坏性变更编写不同的逻辑，或做降级处理。</p>\n<h3 class="header"><a class="anchor" href="#this-context" id="this-context"></a><span class="text"><code>this.context</code></span><a class="icon-link" href="#this-context"></a></h3>\n<p><strong>模块所在的目录。</strong>可以用作解析其他模块路径的上下文。</p>\n<p>在我们的例子中：这个属性为 <code>/abc</code>，因为 <code>resource.js</code> 在这个目录中</p>\n<h3 class="header"><a class="anchor" href="#this-request" id="this-request"></a><span class="text"><code>this.request</code></span><a class="icon-link" href="#this-request"></a></h3>\n<p>被解析出来的 request 字符串。</p>\n<p>在我们的例子中：<code>&quot;/abc/loader1.js?xyz!/abc/node_modules/loader2/index.js!/abc/resource.js?rrr&quot;</code></p>\n<h3 class="header"><a class="anchor" href="#this-query" id="this-query"></a><span class="text"><code>this.query</code></span><a class="icon-link" href="#this-query"></a></h3>\n<ol>\n<li>如果这个 loader 配置了 <a href="/configuration/module/#useentry"><code>options</code></a> 对象的话，<code>this.query</code> 就指向这个 option 对象。</li>\n<li>如果 loader 中没有 <code>options</code>，而是以 query 字符串作为参数调用时，<code>this.query</code> 就是一个以 <code>?</code> 开头的字符串。</li>\n</ol>\n<blockquote class="warning"><div class="tip-content"> <code>options</code> 已取代 <code>query</code>，所以此属性废弃。使用 <code>loader-utils</code> 中的 <a href="https://github.com/webpack/loader-utils#getoptions"><code>getOptions</code> 方法</a>来提取给定 loader 的 option。 </div></blockquote><h3 class="header"><a class="anchor" href="#this-callback" id="this-callback"></a><span class="text"><code>this.callback</code></span><a class="icon-link" href="#this-callback"></a></h3>\n<p>一个可以同步或者异步调用的可以返回多个结果的函数。预期的参数是：</p>\n<pre><code class="lang-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>\n  err<span class="token punctuation">:</span> Error <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  content<span class="token punctuation">:</span> string <span class="token operator">|</span> Buffer<span class="token punctuation">,</span>\n  sourceMap<span class="token operator">?</span><span class="token punctuation">:</span> SourceMap<span class="token punctuation">,</span>\n  meta<span class="token operator">?</span><span class="token punctuation">:</span> any\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<ol>\n<li>第一个参数必须是 <code>Error</code> 或者 <code>null</code></li>\n<li>第二个参数是一个 <code>string</code> 或者 <a href="https://nodejs.org/api/buffer.html"><code>Buffer</code></a>。</li>\n<li>可选的：第三个参数必须是一个可以被<a href="https://github.com/mozilla/source-map">这个模块</a>解析的 source map。</li>\n<li>可选的：第四个选项，会被 webpack 忽略，可以是任何东西（例如一些元数据）。</li>\n</ol>\n<blockquote class="tip"><div class="tip-content"> 可以将抽象语法树(abstract syntax tree - AST)（例如 <a href="https://github.com/estree/estree"><code>ESTree</code></a>）作为第四个参数（<code>meta</code>），如果你想在多个 loader 之间共享通用的 AST，这样做有助于加速编译时间。 </div></blockquote><p>如果这个函数被调用的话，你应该返回 undefined 从而避免含糊的 loader 结果。</p>\n<h3 class="header"><a class="anchor" href="#this-async" id="this-async"></a><span class="text"><code>this.async</code></span><a class="icon-link" href="#this-async"></a></h3>\n<p>告诉 <a href="https://github.com/webpack/loader-runner">loader-runner</a> 这个 loader 将会异步地回调。返回 <code>this.callback</code>。</p>\n<h3 class="header"><a class="anchor" href="#this-data" id="this-data"></a><span class="text"><code>this.data</code></span><a class="icon-link" href="#this-data"></a></h3>\n<p>在 pitch 阶段和正常阶段之间共享的 data 对象。</p>\n<h3 class="header"><a class="anchor" href="#this-cacheable" id="this-cacheable"></a><span class="text"><code>this.cacheable</code></span><a class="icon-link" href="#this-cacheable"></a></h3>\n<p>设置是否可缓存标志的函数：</p>\n<pre><code class="lang-typescript"><span class="token function">cacheable</span><span class="token punctuation">(</span>flag <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span>\n</code></pre>\n<p>默认情况下，loader 的处理结果会被标记为可缓存。调用这个方法然后传入 <code>false</code>，可以关闭 loader 的缓存。</p>\n<p>一个可缓存的 loader 在输入和相关依赖没有变化时，必须返回相同的结果。这意味着 loader 除了 <code>this.addDependency</code> 里指定的以外，不应该有其它任何外部依赖。</p>\n<h3 class="header"><a class="anchor" href="#this-loaders" id="this-loaders"></a><span class="text"><code>this.loaders</code></span><a class="icon-link" href="#this-loaders"></a></h3>\n<p>所有 loader 组成的数组。它在 pitch 阶段的时候是可以写入的。</p>\n<pre><code class="lang-js">loaders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>request<span class="token punctuation">:</span> string<span class="token punctuation">,</span> path<span class="token punctuation">:</span> string<span class="token punctuation">,</span> query<span class="token punctuation">:</span> string<span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre>\n<p>在我们的示例中：</p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    request<span class="token punctuation">:</span> <span class="token string">"/abc/loader1.js?xyz"</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> <span class="token string">"/abc/loader1.js"</span><span class="token punctuation">,</span>\n    query<span class="token punctuation">:</span> <span class="token string">"?xyz"</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">[</span>Function<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    request<span class="token punctuation">:</span> <span class="token string">"/abc/node_modules/loader2/index.js"</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> <span class="token string">"/abc/node_modules/loader2/index.js"</span><span class="token punctuation">,</span>\n    query<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">[</span>Function<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#this-loaderindex" id="this-loaderindex"></a><span class="text"><code>this.loaderIndex</code></span><a class="icon-link" href="#this-loaderindex"></a></h3>\n<p>当前 loader 在 loader 数组中的索引。</p>\n<p>在我们的示例中：loader1 中得到：<code>0</code>，loader2 中得到：<code>1</code></p>\n<h3 class="header"><a class="anchor" href="#this-resource" id="this-resource"></a><span class="text"><code>this.resource</code></span><a class="icon-link" href="#this-resource"></a></h3>\n<p>request 中的资源部分，包括 query 参数。</p>\n<p>在我们的示例中：<code>&quot;/abc/resource.js?rrr&quot;</code></p>\n<h3 class="header"><a class="anchor" href="#this-resourcepath" id="this-resourcepath"></a><span class="text"><code>this.resourcePath</code></span><a class="icon-link" href="#this-resourcepath"></a></h3>\n<p>资源文件的路径。</p>\n<p>在我们的示例中：<code>&quot;/abc/resource.js&quot;</code></p>\n<h3 class="header"><a class="anchor" href="#this-resourcequery" id="this-resourcequery"></a><span class="text"><code>this.resourceQuery</code></span><a class="icon-link" href="#this-resourcequery"></a></h3>\n<p>资源的 query 参数。</p>\n<p>在我们的示例中：<code>&quot;?rrr&quot;</code></p>\n<h3 class="header"><a class="anchor" href="#this-target" id="this-target"></a><span class="text"><code>this.target</code></span><a class="icon-link" href="#this-target"></a></h3>\n<p>编译的目标。从配置选项中传递过来的。</p>\n<p>示例：<code>&quot;web&quot;</code>, <code>&quot;node&quot;</code></p>\n<h3 class="header"><a class="anchor" href="#this-webpack" id="this-webpack"></a><span class="text"><code>this.webpack</code></span><a class="icon-link" href="#this-webpack"></a></h3>\n<p>如果是由 webpack 编译的，这个布尔值会被设置为真。</p>\n<blockquote class="tip"><div class="tip-content"> loader 最初被设计为可以同时当 Babel transform 用。如果你编写了一个 loader 可以同时兼容二者，那么可以使用这个属性了解是否存在可用的 loaderContext 和 webpack 特性。 </div></blockquote><h3 class="header"><a class="anchor" href="#this-sourcemap" id="this-sourcemap"></a><span class="text"><code>this.sourceMap</code></span><a class="icon-link" href="#this-sourcemap"></a></h3>\n<p>应该生成一个 source map。因为生成 source map 可能会非常耗时，你应该确认 source map 确实有必要请求。</p>\n<h3 class="header"><a class="anchor" href="#this-emitwarning" id="this-emitwarning"></a><span class="text"><code>this.emitWarning</code></span><a class="icon-link" href="#this-emitwarning"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">emitWarning</span><span class="token punctuation">(</span>warning<span class="token punctuation">:</span> Error<span class="token punctuation">)</span>\n</code></pre>\n<p>发出一个警告。</p>\n<h3 class="header"><a class="anchor" href="#this-emiterror" id="this-emiterror"></a><span class="text"><code>this.emitError</code></span><a class="icon-link" href="#this-emiterror"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">emitError</span><span class="token punctuation">(</span>error<span class="token punctuation">:</span> Error<span class="token punctuation">)</span>\n</code></pre>\n<p>发出一个错误。</p>\n<h3 class="header"><a class="anchor" href="#this-loadmodule" id="this-loadmodule"></a><span class="text"><code>this.loadModule</code></span><a class="icon-link" href="#this-loadmodule"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">loadModule</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> callback<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> source<span class="token punctuation">,</span> sourceMap<span class="token punctuation">,</span> <span class="token keyword">module</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>解析给定的 request 到一个模块，应用所有配置的 loader ，并且在回调函数中传入生成的 source 、sourceMap 和 模块实例（通常是 <a href="https://github.com/webpack/webpack/blob/master/lib/NormalModule.js"><code>NormalModule</code></a> 的一个实例）。如果你需要获取其他模块的源代码来生成结果的话，你可以使用这个函数。</p>\n<h3 class="header"><a class="anchor" href="#this-resolve" id="this-resolve"></a><span class="text"><code>this.resolve</code></span><a class="icon-link" href="#this-resolve"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">resolve</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> request<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> callback<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>像 require 表达式一样解析一个 request 。</p>\n<h3 class="header"><a class="anchor" href="#this-adddependency" id="this-adddependency"></a><span class="text"><code>this.addDependency</code></span><a class="icon-link" href="#this-adddependency"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">addDependency</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span>\n<span class="token function">dependency</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token comment">// 简写</span>\n</code></pre>\n<p>加入一个文件作为产生 loader 结果的依赖，使它们的任何变化可以被监听到。例如，<a href="https://github.com/webpack/html-loader"><code>html-loader</code></a> 就使用了这个技巧，当它发现 <code>src</code> 和 <code>src-set</code> 属性时，就会把这些属性上的 url 加入到被解析的 html 文件的依赖中。</p>\n<h3 class="header"><a class="anchor" href="#this-addcontextdependency" id="this-addcontextdependency"></a><span class="text"><code>this.addContextDependency</code></span><a class="icon-link" href="#this-addcontextdependency"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">addContextDependency</span><span class="token punctuation">(</span>directory<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span>\n</code></pre>\n<p>把文件夹作为 loader 结果的依赖加入。</p>\n<h3 class="header"><a class="anchor" href="#this-cleardependencies" id="this-cleardependencies"></a><span class="text"><code>this.clearDependencies</code></span><a class="icon-link" href="#this-cleardependencies"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">clearDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<p>移除 loader 结果的所有依赖。甚至自己和其它 loader 的初始依赖。考虑使用 <code>pitch</code>。</p>\n<h3 class="header"><a class="anchor" href="#this-emitfile" id="this-emitfile"></a><span class="text"><code>this.emitFile</code></span><a class="icon-link" href="#this-emitfile"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">emitFile</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> Buffer<span class="token operator">|</span><span class="token keyword">string</span><span class="token punctuation">,</span> sourceMap<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>产生一个文件。这是 webpack 特有的。</p>\n<h3 class="header"><a class="anchor" href="#this-fs" id="this-fs"></a><span class="text"><code>this.fs</code></span><a class="icon-link" href="#this-fs"></a></h3>\n<p>用于访问 <code>compilation</code> 的 <code>inputFileSystem</code> 属性。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">废弃的上下文属性</span><a class="icon-link" href="#-"></a></h2>\n<blockquote class="warning"><div class="tip-content"> 强烈建议不要使用这些属性，因为我们打算移除它们。它们仍然列在此处用于文档目的。 </div></blockquote><h3 class="header"><a class="anchor" href="#this-exec" id="this-exec"></a><span class="text"><code>this.exec</code></span><a class="icon-link" href="#this-exec"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">exec</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> filename<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span>\n</code></pre>\n<p>以模块的方式执行一些代码片段。如果需要，请查看<a href="https://github.com/webpack/webpack.js.org/issues/1268#issuecomment-313513988">这里的评论</a>以获取替换方法。</p>\n<h3 class="header"><a class="anchor" href="#this-resolvesync" id="this-resolvesync"></a><span class="text"><code>this.resolveSync</code></span><a class="icon-link" href="#this-resolvesync"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">resolveSync</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> request<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">string</span>\n</code></pre>\n<p>像 require 表达式一样解析一个 request。</p>\n<h3 class="header"><a class="anchor" href="#this-value" id="this-value"></a><span class="text"><code>this.value</code></span><a class="icon-link" href="#this-value"></a></h3>\n<p>向下一个 loader 传值。如果你知道了作为模块执行后的结果，请在这里赋值（以单元素数组的形式）。</p>\n<h3 class="header"><a class="anchor" href="#this-inputvalue" id="this-inputvalue"></a><span class="text"><code>this.inputValue</code></span><a class="icon-link" href="#this-inputvalue"></a></h3>\n<p>从上一个 loader 那里传递过来的值。如果你会以模块的方式处理输入参数，建议预先读入这个变量（为了性能因素）。</p>\n<h3 class="header"><a class="anchor" href="#this-options" id="this-options"></a><span class="text"><code>this.options</code></span><a class="icon-link" href="#this-options"></a></h3>\n<p>options 的值将会传递给 Complier</p>\n<h3 class="header"><a class="anchor" href="#this-debug" id="this-debug"></a><span class="text"><code>this.debug</code></span><a class="icon-link" href="#this-debug"></a></h3>\n<p>一个布尔值，当处于 debug 模式时为 true。</p>\n<h3 class="header"><a class="anchor" href="#this-minimize" id="this-minimize"></a><span class="text"><code>this.minimize</code></span><a class="icon-link" href="#this-minimize"></a></h3>\n<p>决定处理结果是否应该被压缩。</p>\n<h3 class="header"><a class="anchor" href="#this-_compilation" id="this-_compilation"></a><span class="text"><code>this._compilation</code></span><a class="icon-link" href="#this-_compilation"></a></h3>\n<p>一种 hack 写法。用于访问 webpack 的 Compilation 对象。</p>\n<h3 class="header"><a class="anchor" href="#this-_compiler" id="this-_compiler"></a><span class="text"><code>this._compiler</code></span><a class="icon-link" href="#this-_compiler"></a></h3>\n<p>一种 hack 写法。用于访问 webpack 的 Compiler 对象。</p>\n<h3 class="header"><a class="anchor" href="#this-_module" id="this-_module"></a><span class="text"><code>this._module</code></span><a class="icon-link" href="#this-_module"></a></h3>\n<p>一种 hack 写法。用于访问当前加载的 Module 对象。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/api/loaders/">https://webpack.js.org/api/loaders/</a></p>\n</blockquote>\n',title:"loader API"},title:"loader API",url:"/api/loaders/"},{file:{attributes:{title:"Module Methods",group:"Modules",sort:3,contributors:["skipjack","sokra"],related:[{title:"CommonJS Wikipedia",url:"https://en.wikipedia.org/wiki/CommonJS"},{title:"Asynchronous Module Definition",url:"https://en.wikipedia.org/wiki/Asynchronous_module_definition"}],anchors:[{title:"ES6 (Recommended)",id:"es6-recommended-"},{title:"import",id:"import"},{title:"export",id:"export"},{title:"import()",id:"import-"},{title:"CommonJS",id:"commonjs"},{title:"require",id:"require"},{title:"require.resolve",id:"require-resolve"},{title:"require.cache",id:"require-cache"},{title:"require.ensure",id:"require-ensure"},{title:"AMD",id:"amd"},{title:"define (with factory)",id:"define-with-factory-"},{title:"define (with value)",id:"define-with-value-"},{title:"require (amd-version)",id:"require-amd-version-"},{title:"Labeled Modules",id:"labeled-modules"},{title:"export label",id:"export-label"},{title:"require label",id:"require-label"},{title:"Webpack",id:"webpack"},{title:"require.context",id:"require-context"},{title:"require.include",id:"require-include"},{title:"require.resolveWeak",id:"require-resolveweak"}]},body:'<p>This section covers all methods available in code compiled with webpack. When using webpack to bundle your application, you can pick from a variety of module syntax styles including <a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015">ES6</a>, <a href="https://en.wikipedia.org/wiki/CommonJS">CommonJS</a>, and <a href="https://en.wikipedia.org/wiki/Asynchronous_module_definition">AMD</a>.</p>\n<blockquote class="warning"><div class="tip-content"> While webpack supports multiple module syntaxes, we recommend following a single syntax for consistency and to avoid odd behaviors/bugs. Here&#39;s <a href="https://github.com/webpack/webpack.js.org/issues/552">one example</a> of mixing ES6 and CommonJS, however there are surely others. </div></blockquote><h2 class="header"><a class="anchor" href="#es6-recommended-" id="es6-recommended-"></a><span class="text">ES6 (Recommended)</span><a class="icon-link" href="#es6-recommended-"></a></h2>\n<p>Version 2 of webpack supports ES6 module syntax natively, meaning you can use <code>import</code> and <code>export</code> without a tool like babel to handle this for you. Keep in mind that you will still probably need babel for other ES6+ features. The following methods are supported by webpack:</p>\n<h3 class="header"><a class="anchor" href="#import" id="import"></a><span class="text"><code>import</code></span><a class="icon-link" href="#import"></a></h3>\n<p>Statically <code>import</code> the <code>export</code>s of another module.</p>\n<pre><code class="lang-javascript"><span class="token keyword">import</span> MyModule <span class="token keyword">from</span> <span class="token string">\'./my-module.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> NamedExport <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./other-module.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> The keyword here is <strong>statically</strong>. Normal <code>import</code> statement cannot be used dynamically within other logic or contain variables. See the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">spec</a> for more information and <code>import()</code> below for dynamic usage. </div></blockquote><h3 class="header"><a class="anchor" href="#export" id="export"></a><span class="text"><code>export</code></span><a class="icon-link" href="#export"></a></h3>\n<p>Export anything as a <code>default</code> or named export.</p>\n<pre><code class="lang-javascript"><span class="token comment">// Named exports</span>\n<span class="token keyword">export</span> <span class="token keyword">var</span> Count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Default export</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Some data...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#import-" id="import-"></a><span class="text"><code>import()</code></span><a class="icon-link" href="#import-"></a></h3>\n<p><code>import(&#39;path/to/module&#39;) -&gt; Promise</code></p>\n<p>Dynamically load modules. Calls to <code>import()</code> are treated as split points, meaning the requested module and it&#39;s children are split out into a separate chunk.</p>\n<blockquote class="tip"><div class="tip-content"> The <a href="https://whatwg.github.io/loader/">ES2015 Loader spec</a> defines <code>import()</code> as method to load ES2015 modules dynamically on runtime. </div></blockquote><pre><code class="lang-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span> module<span class="token punctuation">.</span>hot <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'lodash\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do something with lodash (a.k.a \'_\')...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> This feature relies on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a> internally. If you use <code>import()</code> with older browsers, remember to shim <code>Promise</code> using a polyfill such as <a href="https://github.com/stefanpenner/es6-promise">es6-promise</a> or <a href="https://github.com/taylorhakes/promise-polyfill">promise-polyfill</a>. </div></blockquote><p>The spec for <code>import</code> doesn&#39;t allow control over the chunk&#39;s name or other properties as &quot;chunks&quot; are only a concept within webpack. Luckily webpack allows some special parameters via comments so as to not break the spec:</p>\n<pre><code class="lang-js"><span class="token keyword">import</span><span class="token punctuation">(</span>\n  <span class="token comment">/* webpackChunkName: "my-chunk-name" */</span>\n  <span class="token comment">/* webpackMode: "lazy" */</span>\n  <span class="token string">\'module\'</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>webpackChunkName</code>: A name for the new chunk. Since webpack 2.6.0, the placeholders <code>[index]</code> and <code>[request]</code> are supported within the given string to an incremented number or the actual resolved filename respectively.</p>\n<p><code>webpackMode</code>: Since webpack 2.6.0, different modes for resolving dynamic imports can be specified. The following options are supported:</p>\n<ul>\n<li><code>&quot;lazy&quot;</code> (default): Generates a lazy-loadable chunk for each <code>import()</code>ed module.</li>\n<li><code>&quot;lazy-once&quot;</code>: Generates a single lazy-loadable chunk that can satisfy all calls to <code>import()</code>. The chunk will be fetched on the first call to <code>import()</code>, and subsequent calls to <code>import()</code> will use the same network response. Note that this only makes sense in the case of a partially dynamic statement, e.g. <code>import(`./locales/${language}.json`)</code>, where there are multiple module paths that could potentially be requested.</li>\n<li><code>&quot;eager&quot;</code>: Generates no extra chunk. All modules are included in the current chunk and no additional network requests are made. A <code>Promise</code> is still returned but is already resolved. In contrast to a static import, the module isn&#39;t executed until the call to <code>import()</code> is made.</li>\n<li><code>&quot;weak&quot;</code>: Tries to load the module if the module function has already been loaded in some other way (i. e. another chunk imported it or a script containing the module was loaded). A <code>Promise</code> is still returned but, only successfully resolves if the chunks are already on the client. If the module is not available, the <code>Promise</code> is rejected. A network request will never be performed. This is useful for universal rendering when required chunks are always manually served in initial requests (embedded within the page), but not in cases where app navigation will trigger an import not initially served.</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> Note that both options can be combined like so <code>/* webpackMode: &quot;lazy-once&quot;, webpackChunkName: &quot;all-i18n-data&quot; */</code>. This is parsed as a JSON5 object without curly brackets. </div></blockquote><blockquote class="warning"><div class="tip-content"> Fully dynamic statements, such as <code>import(foo)</code>, <strong>will fail</strong> because webpack requires at least some file location information. This is because <code>foo</code> could potentially be any path to any file in your system or project. The <code>import()</code> must contain at least some information about where the module is located, so bundling can be limited to a specific directory or set of files. </div></blockquote><blockquote class="warning"><div class="tip-content"> Every module that could potentially be requested on an <code>import()</code> call is included. For example, <code>import(`./locale/${language}.json`)</code> will cause every <code>.json</code> file in the <code>./locale</code> directory to be bundled into the new chunk. At run time, when the variable <code>language</code> has been computed, any file like <code>english.json</code> or <code>german.json</code> will be available for consumption. </div></blockquote><blockquote class="warning"><div class="tip-content"> The use of <code>System.import</code> in webpack <a href="https://github.com/webpack/webpack/issues/2163">did not fit the proposed spec</a>, so it was deprecated in webpack <a href="https://github.com/webpack/webpack/releases/tag/v2.1.0-beta.28">2.1.0-beta.28</a> in favor of <code>import()</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#commonjs" id="commonjs"></a><span class="text">CommonJS</span><a class="icon-link" href="#commonjs"></a></h2>\n<p>The goal of CommonJS is to specify an ecosystem for JavaScript outside the browser. The following CommonJS methods are supported by webpack:</p>\n<h3 class="header"><a class="anchor" href="#require" id="require"></a><span class="text"><code>require</code></span><a class="icon-link" href="#require"></a></h3>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span>dependency<span class="token punctuation">:</span> String<span class="token punctuation">)</span>\n</code></pre>\n<p>Synchronously retrieve the exports from another module. The compiler will ensure that the dependency is available in the output bundle.</p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jquery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"my-module"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Using it asynchronously may not have the expected effect. </div></blockquote><h3 class="header"><a class="anchor" href="#require-resolve" id="require-resolve"></a><span class="text"><code>require.resolve</code></span><a class="icon-link" href="#require-resolve"></a></h3>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dependency<span class="token punctuation">:</span> String<span class="token punctuation">)</span>\n</code></pre>\n<p>Synchronously retrieve a module&#39;s ID. The compiler will ensure that the dependency is available in the output bundle. See <a href="/api/module-variables#module-id-commonjs-"><code>module.id</code></a> for more information.</p>\n<blockquote class="warning"><div class="tip-content"> Module ID is a number in webpack (in contrast to NodeJS where it is a string -- the filename). </div></blockquote><h3 class="header"><a class="anchor" href="#require-cache" id="require-cache"></a><span class="text"><code>require.cache</code></span><a class="icon-link" href="#require-cache"></a></h3>\n<p>Multiple requires to the same module result in only one module execution and only one export. Therefore a cache in the runtime exists. Removing values from this cache cause new module execution and a new export.</p>\n<blockquote class="warning"><div class="tip-content"> This is only needed in rare cases for compatibility! </div></blockquote><pre><code class="lang-javascript"><span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dependency"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dependency"</span><span class="token punctuation">)</span> <span class="token operator">===</span> d1\n<span class="token keyword">delete</span> require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"dependency"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dependency"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> d1\n</code></pre>\n<pre><code class="lang-javascript"><span class="token comment">// in file.js</span>\nrequire<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">===</span> module\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./file.js"</span><span class="token punctuation">)</span> <span class="token operator">===</span> module<span class="token punctuation">.</span>exports\n<span class="token keyword">delete</span> require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>\nrequire<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">===</span> undefined\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./file.js"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> module<span class="token punctuation">.</span>exports <span class="token comment">// in theory; in praxis this causes a stack overflow</span>\nrequire<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">!==</span> module\n</code></pre>\n<h3 class="header"><a class="anchor" href="#require-ensure" id="require-ensure"></a><span class="text"><code>require.ensure</code></span><a class="icon-link" href="#require-ensure"></a></h3>\n<blockquote class="warning"><div class="tip-content"> <code>require.ensure()</code> is specific to webpack and superseded by <code>import()</code>. </div></blockquote><pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span>dependencies<span class="token punctuation">:</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span><span class="token punctuation">,</span> errorCallback<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">,</span> chunkName<span class="token punctuation">:</span> String<span class="token punctuation">)</span>\n</code></pre>\n<p>Split out the given <code>dependencies</code> to a separate bundle that that will be loaded asynchronously. When using CommonJS module syntax, this is the only way to dynamically load dependencies. Meaning, this code can be run within execution, only loading the <code>dependencies</code> if certain conditions are met.</p>\n<blockquote class="warning"><div class="tip-content"> This feature relies on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a> internally. If you use <code>require.ensure</code> with older browsers, remember to shim <code>Promise</code> using a polyfill such as <a href="https://github.com/stefanpenner/es6-promise">es6-promise</a> or <a href="https://github.com/taylorhakes/promise-polyfill">promise-polyfill</a>. </div></blockquote><pre><code class="lang-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'normal-dep\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span> module<span class="token punctuation">.</span>hot <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'c\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Do something special...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The following parameters are supported in the order specified above:</p>\n<ul>\n<li><code>dependencies</code>: An array of strings declaring all modules required for the code in the <code>callback</code> to execute.</li>\n<li><code>callback</code>: A function that webpack will execute once the dependencies are loaded. An implementation of the <code>require</code> function is sent as a parameter to this function. The function body can use this to further <code>require()</code> modules it needs for execution.</li>\n<li><code>errorCallback</code>: A function that is executed when webpack fails to load the dependencies.</li>\n<li><code>chunkName</code>: A name given to the chunk created by this particular <code>require.ensure()</code>. By passing the same <code>chunkName</code> to various <code>require.ensure()</code> calls, we can combine their code into a single chunk, resulting in only one bundle that the browser must load.</li>\n</ul>\n<blockquote class="warning"><div class="tip-content"> Although the implementation of <code>require</code> is passed as an argument to the <code>callback</code> function, using an arbitrary name e.g. <code>require.ensure([], function(request) { request(&#39;someModule&#39;); })</code> isn&#39;t handled by webpack&#39;s static parser. Use <code>require</code> instead, e.g. <code>require.ensure([], function(require) { require(&#39;someModule&#39;); })</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#amd" id="amd"></a><span class="text">AMD</span><a class="icon-link" href="#amd"></a></h2>\n<p>Asynchronous Module Definition (AMD) is a JavaScript specification that defines an interface for writing and loading modules. The following AMD methods are supported by webpack:</p>\n<h3 class="header"><a class="anchor" href="#define-with-factory-" id="define-with-factory-"></a><span class="text"><code>define</code> (with factory)</span><a class="icon-link" href="#define-with-factory-"></a></h3>\n<pre><code class="lang-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">:</span> String<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dependencies<span class="token punctuation">:</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factoryMethod<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>If <code>dependencies</code> are provided, <code>factoryMethod</code> will be called with the exports of each dependency (in the same order). If <code>dependencies</code> are not provided, <code>factoryMethod</code> is called with <code>require</code>, <code>exports</code> and <code>module</code> (for compatibility!). If this function returns a value, this value is exported by the module. The compiler ensures that each dependency is available.</p>\n<blockquote class="warning"><div class="tip-content"> Note that webpack ignores the <code>name</code> argument. </div></blockquote><pre><code class="lang-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'jquery\'</span><span class="token punctuation">,</span> <span class="token string">\'my-module\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">,</span> myModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something with $ and myModule...</span>\n\n  <span class="token comment">// Export a function</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> This CANNOT be used in an asynchronous function. </div></blockquote><h3 class="header"><a class="anchor" href="#define-with-value-" id="define-with-value-"></a><span class="text"><code>define</code> (with value)</span><a class="icon-link" href="#define-with-value-"></a></h3>\n<pre><code class="lang-javascript"><span class="token function">define</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token operator">!</span>Function<span class="token punctuation">)</span>\n</code></pre>\n<p>This will simply export the provided <code>value</code>. The <code>value</code> here can be anything except a function.</p>\n<pre><code class="lang-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  answer<span class="token punctuation">:</span> <span class="token number">42</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> This CANNOT be used in an async function. </div></blockquote><h3 class="header"><a class="anchor" href="#require-amd-version-" id="require-amd-version-"></a><span class="text"><code>require</code> (amd-version)</span><a class="icon-link" href="#require-amd-version-"></a></h3>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span>dependencies<span class="token punctuation">:</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Similar to <code>require.ensure</code>, this will split the given <code>dependencies</code> into a separate bundle that will be loaded asynchronously. The <code>callback</code> will be called with the exports of each dependency in the <code>dependencies</code> array.</p>\n<blockquote class="warning"><div class="tip-content"> This feature relies on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a> internally. If you use AMD with older browsers (e.g. Internet Explorer 11), remember to shim <code>Promise</code> using a polyfill such as <a href="https://github.com/stefanpenner/es6-promise">es6-promise</a> or <a href="https://github.com/taylorhakes/promise-polyfill">promise-polyfill</a>. </div></blockquote><pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> There is no option to provide a chunk name. </div></blockquote><h2 class="header"><a class="anchor" href="#labeled-modules" id="labeled-modules"></a><span class="text">Labeled Modules</span><a class="icon-link" href="#labeled-modules"></a></h2>\n<p>The internal <code>LabeledModulesPlugin</code> enables you to use the following methods for exporting and requiring within your modules:</p>\n<h3 class="header"><a class="anchor" href="#export-label" id="export-label"></a><span class="text"><code>export</code> label</span><a class="icon-link" href="#export-label"></a></h3>\n<p>Export the given <code>value</code>. The label can occur before a function declaration or a variable declaration. The function name or variable name is the identifier under which the value is exported.</p>\n<pre><code class="lang-javascript"><span class="token keyword">export</span><span class="token punctuation">:</span> <span class="token keyword">var</span> answer <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Using it in an async function may not have the expected effect. </div></blockquote><h3 class="header"><a class="anchor" href="#require-label" id="require-label"></a><span class="text"><code>require</code> label</span><a class="icon-link" href="#require-label"></a></h3>\n<p>Make all exports from the dependency available in the current scope. The <code>require</code> label can occur before a string. The dependency must export values with the <code>export</code> label. CommonJS or AMD modules cannot be consumed.</p>\n<p><strong>some-dependency.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">export</span><span class="token punctuation">:</span> <span class="token keyword">var</span> answer <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre><code class="lang-javascript">require<span class="token punctuation">:</span> <span class="token string">\'some-dependency\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#webpack" id="webpack"></a><span class="text">Webpack</span><a class="icon-link" href="#webpack"></a></h2>\n<p>Aside from the module syntaxes described above, webpack also allows a few custom, webpack-specific methods:</p>\n<h3 class="header"><a class="anchor" href="#require-context" id="require-context"></a><span class="text"><code>require.context</code></span><a class="icon-link" href="#require-context"></a></h3>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>directory<span class="token punctuation">:</span>String<span class="token punctuation">,</span> includeSubdirs<span class="token punctuation">:</span>Boolean <span class="token comment">/* optional, default true */</span><span class="token punctuation">,</span> filter<span class="token punctuation">:</span>RegExp <span class="token comment">/* optional */</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Specify a whole group of dependencies using a path to the <code>directory</code>, an option to <code>includeSubdirs</code>, and a <code>filter</code> for more fine grained control of the modules included. These can then be easily resolved later on:</p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> context <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'components\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> componentA <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'componentA\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#require-include" id="require-include"></a><span class="text"><code>require.include</code></span><a class="icon-link" href="#require-include"></a></h3>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>dependency<span class="token punctuation">:</span> String<span class="token punctuation">)</span>\n</code></pre>\n<p>Include a <code>dependency</code> without executing it. This can be used for optimizing the position of a module in the output chunks.</p>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrequire<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrequire<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>This will result in following output:</p>\n<ul>\n<li>entry chunk: <code>file.js</code> and <code>a</code></li>\n<li>anonymous chunk: <code>b</code></li>\n<li>anonymous chunk: <code>c</code></li>\n</ul>\n<p>Without <code>require.include(&#39;a&#39;)</code> it would be duplicated in both anonymous chunks.</p>\n<h3 class="header"><a class="anchor" href="#require-resolveweak" id="require-resolveweak"></a><span class="text"><code>require.resolveWeak</code></span><a class="icon-link" href="#require-resolveweak"></a></h3>\n<p>Similar to <code>require.resolve</code>, but this won&#39;t pull the <code>module</code> into the bundle. It&#39;s what is considered a &quot;weak&quot; dependency.</p>\n<pre><code class="lang-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>__webpack_modules__<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolveWeak</span><span class="token punctuation">(</span><span class="token string">\'module\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something when module is available...</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolveWeak</span><span class="token punctuation">(</span><span class="token string">\'module\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something when module was loaded before...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// You can perform dynamic resolves ("context")</span>\n<span class="token comment">// just as with other require/import methods.</span>\n<span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token string">\'Foo\'</span><span class="token punctuation">;</span>\n__webpack_modules__<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolveWeak</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./page/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>page<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> <code>require.resolveWeak</code> is the foundation of <em>universal rendering</em> (SSR + Code Splitting), as used in packages such as <a href="https://github.com/faceyspacey/react-universal-component">react-universal-component</a>. It allows code to render synchronously on both the server and initial page-loads on the client. It requires that chunks are manually served or somehow available. It&#39;s able to require modules without indicating they should be bundled into a chunk. It&#39;s used in conjunction with <code>import()</code> which takes over when user navigation triggers additional imports. </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/api/module-methods/">https://webpack.js.org/api/module-methods/</a></p>\n</blockquote>\n',title:"Module Methods"},title:"Module Methods",url:"/api/module-methods/"},{file:{attributes:{title:"Module Variables",group:"Modules",sort:4,contributors:["ahmehri","skipjack","sokra","tbroadley"],related:[{title:"CommonJS",url:"https://en.wikipedia.org/wiki/CommonJS"},{title:"Asynchronous Module Definition",url:"https://en.wikipedia.org/wiki/Asynchronous_module_definition"}],anchors:[{title:"module.loaded (NodeJS)",id:"module-loaded-nodejs-"},{title:"module.hot (webpack-specific)",id:"module-hot-webpack-specific-"},{title:"module.id (CommonJS)",id:"module-id-commonjs-"},{title:"module.exports (CommonJS)",id:"module-exports-commonjs-"},{title:"exports (CommonJS)",id:"exports-commonjs-"},{title:"global (NodeJS)",id:"global-nodejs-"},{title:"process (NodeJS)",id:"process-nodejs-"},{title:"__dirname (NodeJS)",id:"__dirname-nodejs-"},{title:"__filename (NodeJS)",id:"__filename-nodejs-"},{title:"__resourceQuery (webpack-specific)",id:"__resourcequery-webpack-specific-"},{title:"__webpack_public_path__ (webpack-specific)",id:"__webpack_public_path__-webpack-specific-"},{title:"__webpack_require__ (webpack-specific)",id:"__webpack_require__-webpack-specific-"},{title:"__webpack_chunk_load__ (webpack-specific)",id:"__webpack_chunk_load__-webpack-specific-"},{title:"__webpack_modules__ (webpack-specific)",id:"__webpack_modules__-webpack-specific-"},{title:"__webpack_hash__ (webpack-specific)",id:"__webpack_hash__-webpack-specific-"},{title:"__non_webpack_require__ (webpack-specific)",id:"__non_webpack_require__-webpack-specific-"},{title:"DEBUG  (webpack-specific)",id:"debug-webpack-specific-"}]},body:'<p>This section covers all <strong>variables</strong> available in code compiled with webpack. Modules will have access to certain data from the compilation process through <code>module</code> and other variables.</p>\n<h3 class="header"><a class="anchor" href="#module-loaded-nodejs-" id="module-loaded-nodejs-"></a><span class="text"><code>module.loaded</code> (NodeJS)</span><a class="icon-link" href="#module-loaded-nodejs-"></a></h3>\n<p><code>false</code> 表示该模块正在执行， <code>true</code> 表示同步执行已经完成。</p>\n<h3 class="header"><a class="anchor" href="#module-hot-webpack-specific-" id="module-hot-webpack-specific-"></a><span class="text"><code>module.hot</code> (webpack-specific)</span><a class="icon-link" href="#module-hot-webpack-specific-"></a></h3>\n<p>表示 <a href="/concepts/hot-module-replacement">热模块替换 (Hot Module Replacement)</a> 是否启用，并给进程提供一个接口。详细说明见 <a href="/api/hot-module-replacement">热模块替换 API 页面</a></p>\n<h3 class="header"><a class="anchor" href="#module-id-commonjs-" id="module-id-commonjs-"></a><span class="text"><code>module.id</code> (CommonJS)</span><a class="icon-link" href="#module-id-commonjs-"></a></h3>\n<p>该模块的 id 。</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>id <span class="token operator">===</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./file.js"</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#module-exports-commonjs-" id="module-exports-commonjs-"></a><span class="text"><code>module.exports</code> (CommonJS)</span><a class="icon-link" href="#module-exports-commonjs-"></a></h3>\n<p>当用户 <code>require</code> 了该模块后的返回值 (默认为一个新对象)</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 无法在异步函数中使用该功能 </div></blockquote><h3 class="header"><a class="anchor" href="#exports-commonjs-" id="exports-commonjs-"></a><span class="text"><code>exports</code> (CommonJS)</span><a class="icon-link" href="#exports-commonjs-"></a></h3>\n<p>该变量默认值为 <code>module.exports</code>（即一个对象）。 如果 <code>module.exports</code> 被重写的话， <code>exports</code> 不再会被导出。</p>\n<pre><code class="lang-javascript">exports<span class="token punctuation">.</span>someValue <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\nexports<span class="token punctuation">.</span>anObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n    x<span class="token punctuation">:</span> <span class="token number">123</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nexports<span class="token punctuation">.</span>aFunction <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do something</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#global-nodejs-" id="global-nodejs-"></a><span class="text"><code>global</code> (NodeJS)</span><a class="icon-link" href="#global-nodejs-"></a></h3>\n<p>见 <a href="http://nodejs.org/api/globals.html#globals_global">node.js global</a>.</p>\n<h3 class="header"><a class="anchor" href="#process-nodejs-" id="process-nodejs-"></a><span class="text"><code>process</code> (NodeJS)</span><a class="icon-link" href="#process-nodejs-"></a></h3>\n<p>见 <a href="http://nodejs.org/api/process.html">node.js process</a>.</p>\n<h3 class="header"><a class="anchor" href="#__dirname-nodejs-" id="__dirname-nodejs-"></a><span class="text"><code>__dirname</code> (NodeJS)</span><a class="icon-link" href="#__dirname-nodejs-"></a></h3>\n<p>取决于 <code>node.__dirname</code> 的配置选项：</p>\n<ul>\n<li><code>false</code>: Not defined</li>\n<li><code>mock</code>: equal &quot;/&quot;</li>\n<li><code>true</code>: <a href="http://nodejs.org/api/globals.html#globals_dirname">node.js __dirname</a></li>\n</ul>\n<p>如果在一个被解析的表达式内部使用，则配置选项会被当作 <code>true</code> 处理。</p>\n<h3 class="header"><a class="anchor" href="#__filename-nodejs-" id="__filename-nodejs-"></a><span class="text"><code>__filename</code> (NodeJS)</span><a class="icon-link" href="#__filename-nodejs-"></a></h3>\n<p>取决于 <code>node.__filename</code> 的配置选项：</p>\n<ul>\n<li><code>false</code>: Not defined</li>\n<li><code>mock</code>: equal &quot;/index.js&quot;</li>\n<li><code>true</code>: <a href="http://nodejs.org/api/globals.html#globals_filename">node.js __filename</a></li>\n</ul>\n<p>如果在一个被解析的表达式内部使用，则配置选项会被当作 <code>true</code> 处理。</p>\n<h3 class="header"><a class="anchor" href="#__resourcequery-webpack-specific-" id="__resourcequery-webpack-specific-"></a><span class="text"><code>__resourceQuery</code> (webpack-specific)</span><a class="icon-link" href="#__resourcequery-webpack-specific-"></a></h3>\n<p>当前模块的资源查询 (resource query) 。如果之后有对该模块的 <code>reqiure</code> ，那么查询字符串 (query string) 会在 <code>file.js</code> 中可访问。</p>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'file.js?test\'</span><span class="token punctuation">)</span>\n</code></pre>\n<p><strong>file.js</strong></p>\n<pre><code class="lang-javascript">__resourceQuery <span class="token operator">===</span> <span class="token string">\'?test\'</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#__webpack_public_path__-webpack-specific-" id="__webpack_public_path__-webpack-specific-"></a><span class="text"><code>__webpack_public_path__</code> (webpack-specific)</span><a class="icon-link" href="#__webpack_public_path__-webpack-specific-"></a></h3>\n<p>等同于配置选项 <code>output.publicPath</code>.</p>\n<h3 class="header"><a class="anchor" href="#__webpack_require__-webpack-specific-" id="__webpack_require__-webpack-specific-"></a><span class="text"><code>__webpack_require__</code> (webpack-specific)</span><a class="icon-link" href="#__webpack_require__-webpack-specific-"></a></h3>\n<p>源生 require 函数。 这个表达式不会由于依赖而被解析器解析。</p>\n<h3 class="header"><a class="anchor" href="#__webpack_chunk_load__-webpack-specific-" id="__webpack_chunk_load__-webpack-specific-"></a><span class="text"><code>__webpack_chunk_load__</code> (webpack-specific)</span><a class="icon-link" href="#__webpack_chunk_load__-webpack-specific-"></a></h3>\n<p>内部 chunk 载入函数，有两个输入参数：</p>\n<ul>\n<li><code>chunkId</code> 需要载入的块的id</li>\n<li><code>callback(require)</code> 块载入后的回调函数</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#__webpack_modules__-webpack-specific-" id="__webpack_modules__-webpack-specific-"></a><span class="text"><code>__webpack_modules__</code> (webpack-specific)</span><a class="icon-link" href="#__webpack_modules__-webpack-specific-"></a></h3>\n<p>访问所有模块的内部对象。</p>\n<h3 class="header"><a class="anchor" href="#__webpack_hash__-webpack-specific-" id="__webpack_hash__-webpack-specific-"></a><span class="text"><code>__webpack_hash__</code> (webpack-specific)</span><a class="icon-link" href="#__webpack_hash__-webpack-specific-"></a></h3>\n<p>这个变量只有在启用 <code>HotModuleReplacementPlugin</code> 或者 <code>ExtendedAPIPlugin</code> 时才生效。 这个变量提供了编译过程中(compilation)的 hash 信息的获取。</p>\n<h3 class="header"><a class="anchor" href="#__non_webpack_require__-webpack-specific-" id="__non_webpack_require__-webpack-specific-"></a><span class="text"><code>__non_webpack_require__</code> (webpack-specific)</span><a class="icon-link" href="#__non_webpack_require__-webpack-specific-"></a></h3>\n<p>生成一个不会被 webpack  解析的 <code>require</code> 函数。 在可能的情况下配合全局 require 函数可以完成一些酷炫操作。</p>\n<h3 class="header"><a class="anchor" href="#debug-webpack-specific-" id="debug-webpack-specific-"></a><span class="text"><code>DEBUG</code>  (webpack-specific)</span><a class="icon-link" href="#debug-webpack-specific-"></a></h3>\n<p>等同于配置参数中的 <code>debug</code>.</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/api/module-variables/">https://webpack.js.org/api/module-variables/</a></p>\n</blockquote>\n',title:"Module Variables"},title:"Module Variables",url:"/api/module-variables/"},{file:{attributes:{title:"Plugin API",group:"Plugins",sort:0,anchors:[{title:"Tapable & Tapable Instances",id:"tapable-tapable-instances"}],contributors:[],related:[]},body:'<blockquote class="tip"><div class="tip-content"> For a high-level introduction to writing plugins, start with <a href="/contribute/writing-a-plugin">writing a plugin</a>. </div></blockquote><p>Many objects in webpack extend the <code>Tapable</code> class, which exposes a <code>plugin</code> method. And with the <code>plugin</code> method, plugins can inject custom build steps. You will see <code>compiler.plugin</code> and <code>compilation.plugin</code> used a lot. Essentially, each one of these plugin calls binds a callback to fire at specific steps throughout the build process.</p>\n<p>There are two types of plugin interfaces...</p>\n<p><strong>Timing Based</strong></p>\n<ul>\n<li>sync (default): The plugin runs synchronously and returns its output.</li>\n<li>async: The plugin runs asynchronously and uses the give <code>callback</code> to return its output.</li>\n<li>parallel: The handlers are invoked in parallel.</li>\n</ul>\n<p><strong>Return Value</strong></p>\n<ul>\n<li>not bailing (default): No return value.</li>\n<li>bailing: The handlers are invoked in order until one handler returns something.</li>\n<li>parallel bailing: The handlers are invoked in parallel (async). The first returned value (by order) is significant.</li>\n<li>waterfall: Each handler gets the result value of the last handler as an argument.</li>\n</ul>\n<p>A plugin is installed once as webpack starts up. webpack installs a plugin by calling its <code>apply</code> method, and passes a reference to the webpack <code>compiler</code> object. You may then call <code>compiler.plugin</code> to access asset compilations and their individual build steps. An example would look like this:</p>\n<p><strong>my-plugin.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">function</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Configure your plugin with options...</span>\n<span class="token punctuation">}</span>\n\nMyPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"compile"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The compiler is starting to compile..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"compilation"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The compiler is starting a new compilation..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"optimize"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The compilation is starting to optimize files..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"emit"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The compilation is going to emit files..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    options<span class="token punctuation">:</span> <span class="token string">\'nada\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#tapable-tapable-instances" id="tapable-tapable-instances"></a><span class="text">Tapable &amp; Tapable Instances</span><a class="icon-link" href="#tapable-tapable-instances"></a></h2>\n<p>The plugin architecture is mainly possible for webpack due to an internal library named <code>Tapable</code>.\n<strong>Tapable Instances</strong> are classes in the webpack source code which have been extended or mixed in from class <code>Tapable</code>.</p>\n<p>For plugin authors, it is important to know which are the <code>Tapable</code> instances in the webpack source code. These instances provide a variety of event hooks into which custom plugins can be attached.\nHence, throughout this section are a list of all of the webpack <code>Tapable</code> instances (and their event hooks), which plugin authors can utilize.</p>\n<p>For more information on <code>Tapable</code> visit the <a href="/api/tapable">complete overview</a> or the <a href="https://github.com/webpack/tapable">tapable repository</a>.</p>\n',title:"Plugin API"},title:"Plugin API",url:"/api/plugins/"},{file:{attributes:{title:"Tapable",group:"Plugins",sort:1,contributors:["e-cloud","pksjce","thelarkinn"],anchors:[{title:"Example",id:"example"}],related:[]},body:'<p><a href="https://github.com/webpack/tapable">Tapable</a> is a small library that allows you to add and apply plugins to a javascript module. It can be inherited or mixed in to other modules. It is similar to NodeJS&#39;s <code>EventEmitter</code> class, focusing on custom event emission and manipulation. However, in addition to this, <code>Tapable</code> allows you to have access to the &quot;emittee&quot; or &quot;producer&quot; of the event through callbacks arguments.</p>\n<p><code>Tapable</code> has four groups of member functions:</p>\n<ul>\n<li><code>plugin(name:string, handler:function)</code>: This allows a custom plugin to register into a <strong>Tapable instance</strong>&#39;s event. This acts similar to the <code>on()</code> method of the <code>EventEmitter</code>, which is used for registering a handler/listener to do something when the signal/event happens.</li>\n<li><code>apply(…pluginInstances: (AnyPlugin|function)[])</code>: <code>AnyPlugin</code> should be a class (or, rarely, an object) that has an <code>apply</code> method, or just a function with some registration code inside. This method is just to <strong>apply</strong> plugins&#39; definition, so that the real event listeners can be registered into the <em>Tapable</em> instance&#39;s registry.</li>\n<li><code>applyPlugins*(name:string, …)</code>: The <em>Tapable</em> instance can apply all the plugins under a particular hash using these functions. This group of methods act like the <code>emit()</code> method of the <code>EventEmitter</code>, controlling event emission meticulously using various strategies.</li>\n<li><code>mixin(pt: Object)</code>: a simple method to extend <code>Tapable</code>&#39;s prototype as a mixin rather than inheritance.</li>\n</ul>\n<p>The different <code>applyPlugins*</code> methods cover the following use cases:</p>\n<ul>\n<li>Plugins can run serially.</li>\n<li>Plugins can run in parallel.</li>\n<li>Plugins can run one after the other but taking input from the previous plugin (waterfall).</li>\n<li>Plugins can run asynchronously.</li>\n<li>Quit running plugins on bail: that is, once one plugin returns non-<code>undefined</code>, jump out of the run flow and return <em>the return of that plugin</em>. This sounds like <code>once()</code> of <code>EventEmitter</code> but is totally different.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#example" id="example"></a><span class="text">Example</span><a class="icon-link" href="#example"></a></h2>\n<p>One of webpack&#39;s <em>Tapable</em> instances, <a href="/api/compiler">Compiler</a>, is responsible for compiling the webpack configuration object and returning a <a href="/api/compilation">Compilation</a> instance. When the Compilation instance runs, it creates the required bundles.</p>\n<p>See below for a simplified version of how this looks using <code>Tapable</code>:</p>\n<p><strong>node_modules/webpack/lib/Compiler.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">var</span> Tapable <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"tapable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Compiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Tapable<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nCompiler<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Tapable<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Now to write a plugin on the compiler,</p>\n<p><strong>my-custom-plugin.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">function</span> <span class="token function">CustomPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nCustomPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'emit\'</span><span class="token punctuation">,</span> pluginFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The compiler executes the plugin at the appropriate point in its lifecycle by</p>\n<p><strong>node_modules/webpack/lib/Compiler.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">this</span><span class="token punctuation">.</span>apply<span class="token operator">*</span><span class="token punctuation">(</span><span class="token string">"emit"</span><span class="token punctuation">,</span>options<span class="token punctuation">)</span> <span class="token comment">// will fetch all plugins under \'emit\' name and run them.</span>\n</code></pre>\n',title:"Tapable"},title:"Tapable",url:"/api/tapable/"},{file:{attributes:{title:"Compiler",group:"Plugins",sort:2,contributors:["rishantagarwal"],anchors:[{title:"Watching",id:"watching"},{title:"MultiCompiler",id:"multicompiler"},{title:"Event Hooks",id:"event-hooks"},{title:"Usage",id:"usage"}],related:[]},body:'<p>The <code>Compiler</code> module of webpack is the main engine that creates a compilation instance with all the options passed through webpack CLI or <code>webpack</code> api or webpack configuration file.</p>\n<p>It is exported by <code>webpack</code> api under <code>webpack.Compiler</code>.</p>\n<p>The compiler is used by webpack by instantiating it and then calling the <code>run</code> method. Below is a trivial example of how one might use the <code>Compiler</code>. In fact, this is really close to how webpack itself uses it.</p>\n<p><a href="https://github.com/pksjce/webpack-internal-examples/tree/master/compiler-example"><strong>compiler-example</strong></a></p>\n<pre><code class="lang-javascript"><span class="token comment">// Can be imported from webpack package</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>Compiler<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'webpack\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create a new compiler instance</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Populate all required options</span>\ncompiler<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Creating a plugin.</span>\n<span class="token keyword">class</span> <span class="token class-name">LogPlugin</span> <span class="token punctuation">{</span>\n  apply <span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'should-emit\'</span><span class="token punctuation">,</span> compilation <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'should I emit?\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Apply the compiler to the plugin</span>\n<span class="token keyword">new</span> <span class="token class-name">LogPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/* Add other supporting plugins */</span>\n\n<span class="token comment">// Callback to be executed after run is complete</span>\n<span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Compiler has finished execution.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Display stats...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// call run on the compiler along with the callback</span>\ncompiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The <code>Compiler</code> is what we call a <code>Tapable</code> instance. By this, we mean that it mixes in <code>Tapable</code> class to imbibe functionality to register and call plugins on itself. Most user facing plugins are first registered on the <code>Compiler</code>. The working of a Compiler can be condensed into the following highlights</p>\n<ul>\n<li>Usually there is one master instance of Compiler. Child compilers can be created for delegating specific tasks.</li>\n<li>A lot of the complexity in creating a compiler goes into populating all the relevant options for it.</li>\n<li><code>webpack</code> has <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js"><code>WebpackOptionsDefaulter</code></a> and <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js"><code>WebpackOptionsApply</code></a> specifically designed to provide the <code>Compiler</code> with all the initial data it requires.</li>\n<li>The <code>Compiler</code> is ultimately just a function which performs bare minimum functionality to keep a lifecycle running. It delegates all the loading/bundling/writing work to various plugins.</li>\n<li><code>new LogPlugin(args).apply(compiler)</code> registers the plugin to any particular hook event in the <code>Compiler</code>&#39;s lifecycle.</li>\n<li>The <code>Compiler</code> exposes a <code>run</code> method which kickstarts all compilation work for <code>webpack</code>. When that is done, it should call the passed in <code>callback</code> function. All the tail end work of logging stats and errors are done in this callback function.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#watching" id="watching"></a><span class="text">Watching</span><a class="icon-link" href="#watching"></a></h2>\n<p>The <code>Compiler</code> supports &quot;watch mode&quot; which monitors the file system and recompiles as files change. When in watch mode, the compiler will emit the additional events <a href="#event-hooks">&quot;watch-run&quot;, &quot;watch-close&quot;, and &quot;invalid&quot;</a>. This is typically used in <a href="/guides/development">development</a>, usually under the hood of tools like <code>webpack-dev-server</code>, so that the developer doesn&#39;t need to re-compile manually every time.</p>\n<p>For more details about watch mode, see the <a href="/api/node/#watching">Node.js API documentation</a> or the <a href="/api/cli/#watch-options">CLI watch options</a>.</p>\n<h2 class="header"><a class="anchor" href="#multicompiler" id="multicompiler"></a><span class="text">MultiCompiler</span><a class="icon-link" href="#multicompiler"></a></h2>\n<p>This module, MultiCompiler, allows webpack to run multiple configurations in separate compiler.\nIf the <code>options</code> parameter in the webpack&#39;s NodeJS api is an array of options, webpack applies separate compilers and calls the <code>callback</code> method at the end of each compiler execution.</p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> config1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./index1.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>filename<span class="token punctuation">:</span> <span class="token string">\'bundle1.js\'</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> config2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./index2.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>filename<span class="token punctuation">:</span><span class="token string">\'bundle2.js\'</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">[</span>config1<span class="token punctuation">,</span> config2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#event-hooks" id="event-hooks"></a><span class="text">Event Hooks</span><a class="icon-link" href="#event-hooks"></a></h2>\n<p>This a reference guide to all the event hooks exposed by the <code>Compiler</code>.</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Event name</div><div class="table-th">Reason</div><div class="table-th">Params</div><div class="table-th">Type</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>entry-option</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        bailResult\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>after-plugins</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After setting up initial set of plugins\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compiler</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>after-resolvers</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After setting up the resolvers\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compiler</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>environment</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>after-environment</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Environment setup complete\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>before-run</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        <code>compiler.run()</code> starts\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compiler</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>run</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Before reading records\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compiler</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>watch-run</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Before starting compilation after watch\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compiler</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>normal-module-factory</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After creating a <code>NormalModuleFactory</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>normalModuleFactory</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>context-module-factory</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After creating a <code>ContextModuleFactory</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>contextModuleFactory</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>before-compile</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Compilation parameters created\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilationParams</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>compile</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Before creating new compilation\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilationParams</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>this-compilation</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Before emitting <code>compilation</code> event\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>compilation</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Compilation creation completed\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>make</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        parallel\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>after-compile</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>should-emit</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Can return true/false at this point\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        bailResult\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>need-additional-pass</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        bailResult\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>emit</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Before emitting assets to output dir\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>after-emit</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After emitting assets to output dir\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>done</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Completion of compile\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>stats</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>failed</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Failure of compile\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>error</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>invalid</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After invalidating a watch compile\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>fileName</code>, <code>changeTime</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>watch-close</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After stopping a watch compile\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>Here&#39;s an example of an asynchronous <code>emit</code> event handler:</p>\n<pre><code class="lang-javascript">compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"emit"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something async...</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Done with async work..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n',title:"Compiler"},title:"Compiler",url:"/api/compiler/"},{file:{attributes:{title:"Compilation",group:"Plugins",sort:3,anchors:[{title:"normal-module-loader",id:"normal-module-loader"},{title:"seal",id:"seal"},{title:"optimize",id:"optimize"},{title:"optimize-tree(chunks, modules) 异步",id:"optimize-tree-chunks-modules-"},{title:"optimize-modules(modules: Module[])",id:"optimize-modules-modules-module-"},{title:"after-optimize-modules(modules: Module[])",id:"after-optimize-modules-modules-module-"},{title:"optimize-chunks(chunks: Chunk[])",id:"optimize-chunks-chunks-chunk-"},{title:"after-optimize-chunks(chunks: Chunk[])",id:"after-optimize-chunks-chunks-chunk-"},{title:"revive-modules(modules: Module[], records)",id:"revive-modules-modules-module-records-"},{title:"optimize-module-order(modules: Module[])",id:"optimize-module-order-modules-module-"},{title:"optimize-module-ids(modules: Module[])",id:"optimize-module-ids-modules-module-"},{title:"after-optimize-module-ids(modules: Module[])",id:"after-optimize-module-ids-modules-module-"},{title:"record-modules(modules: Module[], records)",id:"record-modules-modules-module-records-"},{title:"revive-chunks(chunks: Chunk[], records)",id:"revive-chunks-chunks-chunk-records-"},{title:"optimize-chunk-order(chunks: Chunk[])",id:"optimize-chunk-order-chunks-chunk-"},{title:"optimize-chunk-ids(chunks: Chunk[])",id:"optimize-chunk-ids-chunks-chunk-"},{title:"after-optimize-chunk-ids(chunks: Chunk[])",id:"after-optimize-chunk-ids-chunks-chunk-"},{title:"record-chunks(chunks: Chunk[], records)",id:"record-chunks-chunks-chunk-records-"},{title:"before-hash",id:"before-hash"},{title:"after-hash",id:"after-hash"},{title:"before-chunk-assets",id:"before-chunk-assets"},{title:"additional-chunk-assets(chunks: Chunk[])",id:"additional-chunk-assets-chunks-chunk-"},{title:"record(compilation, records)",id:"record-compilation-records-"},{title:"additional-assets async",id:"additional-assets-async"},{title:"optimize-chunk-assets(chunks: Chunk[]) async",id:"optimize-chunk-assets-chunks-chunk-async"},{title:"after-optimize-chunk-assets(chunks: Chunk[])",id:"after-optimize-chunk-assets-chunks-chunk-"},{title:"optimize-assets(assets: Object{name: Source}) async",id:"optimize-assets-assets-object-name-source-async"},{title:"after-optimize-assets(assets: Object{name: Source})",id:"after-optimize-assets-assets-object-name-source-"},{title:"build-module(module)",id:"build-module-module-"},{title:"succeed-module(module)",id:"succeed-module-module-"},{title:"failed-module(module)",id:"failed-module-module-"},{title:"module-asset(module, filename)",id:"module-asset-module-filename-"},{title:"chunk-asset(chunk, filename)",id:"chunk-asset-chunk-filename-"}],contributors:[],related:[]},body:'<p>Compilation 实例继承于 compiler。例如，compiler.compilation 是对所有 require 图(graph)中对象的字面上的编译。这个对象可以访问所有的模块和它们的依赖（大部分是循环依赖）。在编译阶段，模块被加载，封闭，优化，分块，哈希和重建等等。这将是编译中任何操作主要的生命周期。</p>\n<pre><code class="lang-js">compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"compilation"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 主要的编译实例</span>\n    <span class="token comment">// 随后所有的方法都从 compilation.plugin 上得来</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#normal-module-loader" id="normal-module-loader"></a><span class="text"><code>normal-module-loader</code></span><a class="icon-link" href="#normal-module-loader"></a></h2>\n<p>普通模块 loader，真实地一个一个加载模块图(graph)中所有的模块的函数。</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'normal-module-loader\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>loaderContext<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这里是所以模块被加载的地方</span>\n  <span class="token comment">// 一个接一个，此时还没有依赖被创建</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#seal" id="seal"></a><span class="text"><code>seal</code></span><a class="icon-link" href="#seal"></a></h2>\n<p>编译的封闭已经开始。</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'seal\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 你已经不能再接收到任何模块</span>\n  <span class="token comment">// 没有参数</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#optimize" id="optimize"></a><span class="text"><code>optimize</code></span><a class="icon-link" href="#optimize"></a></h2>\n<p>优化编译。</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'optimize\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// webpack 已经进入优化阶段</span>\n  <span class="token comment">// 没有参数</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#optimize-tree-chunks-modules-" id="optimize-tree-chunks-modules-"></a><span class="text"><code>optimize-tree(chunks, modules)</code> 异步</span><a class="icon-link" href="#optimize-tree-chunks-modules-"></a></h2>\n<p>树的异步优化。</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'optimize-tree\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunks<span class="token punctuation">,</span> modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#optimize-modules-modules-module-" id="optimize-modules-modules-module-"></a><span class="text"><code>optimize-modules(modules: Module[])</code></span><a class="icon-link" href="#optimize-modules-modules-module-"></a></h3>\n<p>模块的优化。</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'optimize-modules\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 树优化期间处理模块数组</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#after-optimize-modules-modules-module-" id="after-optimize-modules-modules-module-"></a><span class="text"><code>after-optimize-modules(modules: Module[])</code></span><a class="icon-link" href="#after-optimize-modules-modules-module-"></a></h2>\n<p>模块优化已经结束。</p>\n<h2 class="header"><a class="anchor" href="#optimize-chunks-chunks-chunk-" id="optimize-chunks-chunks-chunk-"></a><span class="text"><code>optimize-chunks(chunks: Chunk[])</code></span><a class="icon-link" href="#optimize-chunks-chunks-chunk-"></a></h2>\n<p>块的优化。</p>\n<pre><code class="lang-javascript"><span class="token comment">//这里一般只有一个块，除非你在配置中指定了多个入口</span>\n\ncompilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'optimize-chunks\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这里一般只有一个块，</span>\n    <span class="token comment">// 除非你在配置中指定了多个入口</span>\n    chunks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Chunks have circular references to their modules</span>\n        chunk<span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// module.loaders, module.rawRequest, module.dependencies, etc.</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#after-optimize-chunks-chunks-chunk-" id="after-optimize-chunks-chunks-chunk-"></a><span class="text"><code>after-optimize-chunks(chunks: Chunk[])</code></span><a class="icon-link" href="#after-optimize-chunks-chunks-chunk-"></a></h2>\n<p>Optimizing the chunks has finished.</p>\n<h2 class="header"><a class="anchor" href="#revive-modules-modules-module-records-" id="revive-modules-modules-module-records-"></a><span class="text"><code>revive-modules(modules: Module[], records)</code></span><a class="icon-link" href="#revive-modules-modules-module-records-"></a></h2>\n<p>Restore module info from records.</p>\n<h2 class="header"><a class="anchor" href="#optimize-module-order-modules-module-" id="optimize-module-order-modules-module-"></a><span class="text"><code>optimize-module-order(modules: Module[])</code></span><a class="icon-link" href="#optimize-module-order-modules-module-"></a></h2>\n<p>Sort the modules in order of importance. The first is the most important module. It will get the smallest id.</p>\n<h2 class="header"><a class="anchor" href="#optimize-module-ids-modules-module-" id="optimize-module-ids-modules-module-"></a><span class="text"><code>optimize-module-ids(modules: Module[])</code></span><a class="icon-link" href="#optimize-module-ids-modules-module-"></a></h2>\n<p>Optimize the module ids.</p>\n<h2 class="header"><a class="anchor" href="#after-optimize-module-ids-modules-module-" id="after-optimize-module-ids-modules-module-"></a><span class="text"><code>after-optimize-module-ids(modules: Module[])</code></span><a class="icon-link" href="#after-optimize-module-ids-modules-module-"></a></h2>\n<p>Optimizing the module ids has finished.</p>\n<h2 class="header"><a class="anchor" href="#record-modules-modules-module-records-" id="record-modules-modules-module-records-"></a><span class="text"><code>record-modules(modules: Module[], records)</code></span><a class="icon-link" href="#record-modules-modules-module-records-"></a></h2>\n<p>Store module info to the records.</p>\n<h2 class="header"><a class="anchor" href="#revive-chunks-chunks-chunk-records-" id="revive-chunks-chunks-chunk-records-"></a><span class="text"><code>revive-chunks(chunks: Chunk[], records)</code></span><a class="icon-link" href="#revive-chunks-chunks-chunk-records-"></a></h2>\n<p>Restore chunk info from records.</p>\n<h2 class="header"><a class="anchor" href="#optimize-chunk-order-chunks-chunk-" id="optimize-chunk-order-chunks-chunk-"></a><span class="text"><code>optimize-chunk-order(chunks: Chunk[])</code></span><a class="icon-link" href="#optimize-chunk-order-chunks-chunk-"></a></h2>\n<p>Sort the chunks in order of importance. The first is the most important chunk. It will get the smallest id.</p>\n<h2 class="header"><a class="anchor" href="#optimize-chunk-ids-chunks-chunk-" id="optimize-chunk-ids-chunks-chunk-"></a><span class="text"><code>optimize-chunk-ids(chunks: Chunk[])</code></span><a class="icon-link" href="#optimize-chunk-ids-chunks-chunk-"></a></h2>\n<p>Optimize the chunk ids.</p>\n<h2 class="header"><a class="anchor" href="#after-optimize-chunk-ids-chunks-chunk-" id="after-optimize-chunk-ids-chunks-chunk-"></a><span class="text"><code>after-optimize-chunk-ids(chunks: Chunk[])</code></span><a class="icon-link" href="#after-optimize-chunk-ids-chunks-chunk-"></a></h2>\n<p>Optimizing the chunk ids has finished.</p>\n<h2 class="header"><a class="anchor" href="#record-chunks-chunks-chunk-records-" id="record-chunks-chunks-chunk-records-"></a><span class="text"><code>record-chunks(chunks: Chunk[], records)</code></span><a class="icon-link" href="#record-chunks-chunks-chunk-records-"></a></h2>\n<p>Store chunk info to the records.</p>\n<h2 class="header"><a class="anchor" href="#before-hash" id="before-hash"></a><span class="text"><code>before-hash</code></span><a class="icon-link" href="#before-hash"></a></h2>\n<p>Before the compilation is hashed.</p>\n<h2 class="header"><a class="anchor" href="#after-hash" id="after-hash"></a><span class="text"><code>after-hash</code></span><a class="icon-link" href="#after-hash"></a></h2>\n<p>After the compilation is hashed.</p>\n<h2 class="header"><a class="anchor" href="#before-chunk-assets" id="before-chunk-assets"></a><span class="text"><code>before-chunk-assets</code></span><a class="icon-link" href="#before-chunk-assets"></a></h2>\n<p>Before creating the chunk assets.</p>\n<h2 class="header"><a class="anchor" href="#additional-chunk-assets-chunks-chunk-" id="additional-chunk-assets-chunks-chunk-"></a><span class="text"><code>additional-chunk-assets(chunks: Chunk[])</code></span><a class="icon-link" href="#additional-chunk-assets-chunks-chunk-"></a></h2>\n<p>Create additional assets for the chunks.</p>\n<h2 class="header"><a class="anchor" href="#record-compilation-records-" id="record-compilation-records-"></a><span class="text"><code>record(compilation, records)</code></span><a class="icon-link" href="#record-compilation-records-"></a></h2>\n<p>Store info about the compilation to the records</p>\n<h2 class="header"><a class="anchor" href="#additional-assets-async" id="additional-assets-async"></a><span class="text"><code>additional-assets</code> async</span><a class="icon-link" href="#additional-assets-async"></a></h2>\n<p>Create additional assets for the compilation</p>\n<p>Here&#39;s an example that downloads an image.</p>\n<pre><code class="lang-js">compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'compilation\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'additional-assets\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">download</span><span class="token punctuation">(</span><span class="token string">\'https://img.shields.io/npm/v/webpack.svg\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span><span class="token string">\'webpack-version.svg\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toAsset</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'[webpack-example-plugin] Unable to download the image\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#optimize-chunk-assets-chunks-chunk-async" id="optimize-chunk-assets-chunks-chunk-async"></a><span class="text"><code>optimize-chunk-assets(chunks: Chunk[])</code> async</span><a class="icon-link" href="#optimize-chunk-assets-chunks-chunk-async"></a></h2>\n<p>优化 chunk 的生成资源。</p>\n<p>生成资源被存储在 <code>this.assets</code>，但是它们并不都是块的生成资源。一个 <code>Chunk</code> 有一个 <code>files</code> 属性指出这个块创建的所有文件。附加的生成资源被存储在 <code>this.additionalChunkAssets</code> 中。</p>\n<p>这是一个为每个 chunk 添加 banner 的例子。</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"optimize-chunk-assets"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunks<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  chunks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    chunk<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcatSource</span><span class="token punctuation">(</span><span class="token string">"\\/**Sweet Banner**\\/"</span><span class="token punctuation">,</span> <span class="token string">"\\n"</span><span class="token punctuation">,</span> compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#after-optimize-chunk-assets-chunks-chunk-" id="after-optimize-chunk-assets-chunks-chunk-"></a><span class="text"><code>after-optimize-chunk-assets(chunks: Chunk[])</code></span><a class="icon-link" href="#after-optimize-chunk-assets-chunks-chunk-"></a></h2>\n<p>块生成资源已经被优化。这里是一个来自 <a href="https://github.com/boopathi">@boopathi</a> 的示例插件，详细的输出每个块里有什么。</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> PrintChunksPlugin <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nPrintChunksPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'compilation\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'after-optimize-chunk-assets\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n          id<span class="token punctuation">:</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n          name<span class="token punctuation">:</span> c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n          includes<span class="token punctuation">:</span> c<span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> m<span class="token punctuation">.</span>request<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#optimize-assets-assets-object-name-source-async" id="optimize-assets-assets-object-name-source-async"></a><span class="text"><code>optimize-assets(assets: Object{name: Source})</code> async</span><a class="icon-link" href="#optimize-assets-assets-object-name-source-async"></a></h2>\n<p>优化所有生成资源。</p>\n<p>生成资源被存放在 <code>this.assets</code>。</p>\n<h2 class="header"><a class="anchor" href="#after-optimize-assets-assets-object-name-source-" id="after-optimize-assets-assets-object-name-source-"></a><span class="text"><code>after-optimize-assets(assets: Object{name: Source})</code></span><a class="icon-link" href="#after-optimize-assets-assets-object-name-source-"></a></h2>\n<p>生成资源优化已经结束。</p>\n<h2 class="header"><a class="anchor" href="#build-module-module-" id="build-module-module-"></a><span class="text"><code>build-module(module)</code></span><a class="icon-link" href="#build-module-module-"></a></h2>\n<p>一个模块构建开始前。</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'build-module\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'About to build: \'</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#succeed-module-module-" id="succeed-module-module-"></a><span class="text"><code>succeed-module(module)</code></span><a class="icon-link" href="#succeed-module-module-"></a></h2>\n<p>一个模块已经被成功构建。</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'succeed-module\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Successfully built: \'</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#failed-module-module-" id="failed-module-module-"></a><span class="text"><code>failed-module(module)</code></span><a class="icon-link" href="#failed-module-module-"></a></h2>\n<p>一个模块构建失败。</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'failed-module\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Failed to build: \'</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#module-asset-module-filename-" id="module-asset-module-filename-"></a><span class="text"><code>module-asset(module, filename)</code></span><a class="icon-link" href="#module-asset-module-filename-"></a></h2>\n<p>一个模块中的一个生成资源被加到编译中。</p>\n<h2 class="header"><a class="anchor" href="#chunk-asset-chunk-filename-" id="chunk-asset-chunk-filename-"></a><span class="text"><code>chunk-asset(chunk, filename)</code></span><a class="icon-link" href="#chunk-asset-chunk-filename-"></a></h2>\n<p>一个 chunk 中的一个生成资源被加到编译中。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/api/plugins/compilation/">https://webpack.js.org/api/plugins/compilation/</a></p>\n</blockquote>\n',title:"Compilation"},title:"Compilation",url:"/api/compilation/"},{file:{attributes:{title:"Module Factories",group:"Plugins",sort:5,anchors:[{title:"NormalModuleFactory",id:"normalmodulefactory"},{title:"ContextModuleFactory",id:"contextmodulefactory"}],contributors:[],related:[]},body:'<blockquote class="todo"><div class="tip-content"> Lead in... </div></blockquote><h2 class="header"><a class="anchor" href="#normalmodulefactory" id="normalmodulefactory"></a><span class="text"><code>NormalModuleFactory</code></span><a class="icon-link" href="#normalmodulefactory"></a></h2>\n<p><code>before-resolve(data)</code> async waterfall</p>\n<p>Before the factory starts resolving. The <code>data</code> object has these properties:</p>\n<ul>\n<li><code>context</code>: The absolute path of the directory for resolving.</li>\n<li><code>request</code>: The request of the expression.</li>\n</ul>\n<p>Plugins are allowed to modify the object or to pass a new similar object to the callback.</p>\n<p><code>after-resolve(data)</code> async waterfall</p>\n<p>After the factory has resolved the request. The <code>data</code> object has these properties:</p>\n<ul>\n<li><code>request</code>: The resolved request. It acts as an identifier for the NormalModule.</li>\n<li><code>userRequest</code>: The request the user entered. It&#39;s resolved, but does not contain pre or post loaders.</li>\n<li><code>rawRequest</code>: The unresolved request.</li>\n<li><code>loaders</code>: A array of resolved loaders. This is passed to the NormalModule and they will be executed.</li>\n<li><code>resource</code>: The resource. It will be loaded by the NormalModule.</li>\n<li><code>parser</code>: The parser that will be used by the NormalModule.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#contextmodulefactory" id="contextmodulefactory"></a><span class="text"><code>ContextModuleFactory</code></span><a class="icon-link" href="#contextmodulefactory"></a></h2>\n<p><code>before-resolve(data)</code> async waterfall</p>\n<blockquote class="todo"><div class="tip-content"> Add documentation. </div></blockquote><p><code>after-resolve(data)</code> async waterfall</p>\n<blockquote class="todo"><div class="tip-content"> Add documentation. </div></blockquote><p><code>alternatives(options: Array)</code> async waterfall</p>\n<blockquote class="todo"><div class="tip-content"> Add documentation. </div></blockquote>',title:"Module Factories"},title:"Module Factories",url:"/api/module-factories/"},{file:{attributes:{title:"Resolver",group:"Plugins",sort:5,anchors:[{title:"resolve(context: String, request: String)",id:"resolve-context-string-request-string-"},{title:"resolve-step(types: String[], request: Request)",id:"resolve-step-types-string-request-request-"},{title:"module(request: Request) async waterfall",id:"module-request-request-async-waterfall"},{title:"directory(request: Request) async waterfall",id:"directory-request-request-async-waterfall"},{title:"file(request: Request) async waterfall",id:"file-request-request-async-waterfall"},{title:"The plugins may offer more extensions points",id:"the-plugins-may-offer-more-extensions-points"},{title:"module-module",id:"module-module"},{title:"module-loader-module (only for loaders)",id:"module-loader-module-only-for-loaders-"}],contributors:[],related:[]},body:'<p>There are three types of resolvers, each used for different types of modules:</p>\n<ul>\n<li><code>compiler.resolvers.normal</code>: Resolve a normal module.</li>\n<li><code>compiler.resolvers.context</code>: Resolve a context module.</li>\n<li><code>compiler.resolvers.loader</code>: Resolve a loader.</li>\n</ul>\n<p>Any plugin should use <code>this.fileSystem</code> as fileSystem, as it&#39;s cached. It only has async named functions, but they may behave sync, if the user uses a sync file system implementation (i. e. in enhanced-require).</p>\n<p>To join paths any plugin should use <code>this.join</code>. It normalizes the paths. There is a <code>this.normalize</code> too.</p>\n<p>A bailing async <code>forEach</code> implementation is available on <code>this.forEachBail(array, iterator, callback)</code>.</p>\n<p>To pass the request to other resolving plugins, use the <code>this.doResolve(types: String|String[], request: Request, message: String, callback)</code> method. <code>types</code> are multiple possible request types that are tested in order of preference.</p>\n<pre><code class="lang-js"><span class="token keyword">interface</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>\n  path<span class="token punctuation">:</span> String <span class="token comment">// The current directory of the request</span>\n  request<span class="token punctuation">:</span> String <span class="token comment">// The current request string</span>\n  query<span class="token punctuation">:</span> String <span class="token comment">// The query string of the request, if any</span>\n  module<span class="token punctuation">:</span> boolean <span class="token comment">// The request begins with a module</span>\n  directory<span class="token punctuation">:</span> boolean <span class="token comment">// The request points to a directory</span>\n  file<span class="token punctuation">:</span> boolean <span class="token comment">// The request points to a file</span>\n  resolved<span class="token punctuation">:</span> boolean <span class="token comment">// The request is resolved/done</span>\n  <span class="token comment">// undefined means false for boolean fields</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Examples</span>\n<span class="token comment">// from /home/user/project/file.js: require("../test?charset=ascii")</span>\n<span class="token punctuation">{</span>\n  path<span class="token punctuation">:</span> <span class="token string">"/home/user/project"</span><span class="token punctuation">,</span>\n  request<span class="token punctuation">:</span> <span class="token string">"../test"</span><span class="token punctuation">,</span>\n  query<span class="token punctuation">:</span> <span class="token string">"?charset=ascii"</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// from /home/user/project/file.js: require("test/test/")</span>\n<span class="token punctuation">{</span>\n  path<span class="token punctuation">:</span> <span class="token string">"/home/user/project"</span><span class="token punctuation">,</span>\n  request<span class="token punctuation">:</span> <span class="token string">"test/test/"</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  directory<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#resolve-context-string-request-string-" id="resolve-context-string-request-string-"></a><span class="text"><code>resolve(context: String, request: String)</code></span><a class="icon-link" href="#resolve-context-string-request-string-"></a></h2>\n<p>Before the resolving process starts.</p>\n<h2 class="header"><a class="anchor" href="#resolve-step-types-string-request-request-" id="resolve-step-types-string-request-request-"></a><span class="text"><code>resolve-step(types: String[], request: Request)</code></span><a class="icon-link" href="#resolve-step-types-string-request-request-"></a></h2>\n<p>Before a single step in the resolving process starts.</p>\n<h2 class="header"><a class="anchor" href="#module-request-request-async-waterfall" id="module-request-request-async-waterfall"></a><span class="text"><code>module(request: Request)</code> async waterfall</span><a class="icon-link" href="#module-request-request-async-waterfall"></a></h2>\n<p>A module request is found and should be resolved.</p>\n<h2 class="header"><a class="anchor" href="#directory-request-request-async-waterfall" id="directory-request-request-async-waterfall"></a><span class="text"><code>directory(request: Request)</code> async waterfall</span><a class="icon-link" href="#directory-request-request-async-waterfall"></a></h2>\n<p>A directory request is found and should be resolved.</p>\n<h2 class="header"><a class="anchor" href="#file-request-request-async-waterfall" id="file-request-request-async-waterfall"></a><span class="text"><code>file(request: Request)</code> async waterfall</span><a class="icon-link" href="#file-request-request-async-waterfall"></a></h2>\n<p>A file request is found and should be resolved.</p>\n<h2 class="header"><a class="anchor" href="#the-plugins-may-offer-more-extensions-points" id="the-plugins-may-offer-more-extensions-points"></a><span class="text">The plugins may offer more extensions points</span><a class="icon-link" href="#the-plugins-may-offer-more-extensions-points"></a></h2>\n<p>Here is a list what the default plugins in webpack offer. They are all <code>(request: Request)</code> async waterfall.</p>\n<p>The process for normal modules and contexts is <code>module -&gt; module-module -&gt; directory -&gt; file</code>.</p>\n<p>The process for loaders is <code>module -&gt; module-loader-module -&gt; module-module -&gt; directory -&gt; file</code>.</p>\n<h2 class="header"><a class="anchor" href="#module-module" id="module-module"></a><span class="text"><code>module-module</code></span><a class="icon-link" href="#module-module"></a></h2>\n<p>A module should be looked up in a specified directory. <code>path</code> contains the directory.</p>\n<h2 class="header"><a class="anchor" href="#module-loader-module-only-for-loaders-" id="module-loader-module-only-for-loaders-"></a><span class="text"><code>module-loader-module</code> (only for loaders)</span><a class="icon-link" href="#module-loader-module-only-for-loaders-"></a></h2>\n<p>Used before module templates are applied to the module name. The process continues with <code>module-module</code>.</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/api/plugins/resolver/">https://webpack.js.org/api/plugins/resolver/</a></p>\n</blockquote>\n',title:"Resolver"},title:"Resolver",url:"/api/resolver/"},{file:{attributes:{title:"Parser",group:"Plugins",sort:8,anchors:[{title:"program(ast) bailing",id:"program-ast-bailing"},{title:"statement(statement: Statement) bailing",id:"statement-statement-statement-bailing"},{title:"call (expr: Expression) bailing",id:"call-expr-expression-bailing"},{title:"expression (expr: Expression) bailing",id:"expression-expr-expression-bailing"},{title:"expression ?:(expr: Expression) bailing",id:"expression-expr-expression-bailing"},{title:"typeof (expr: Expression) bailing",id:"typeof-expr-expression-bailing"},{title:"statement if(statement: Statement) bailing",id:"statement-if-statement-statement-bailing"},{title:"label (statement: Statement) bailing",id:"label-statement-statement-bailing"},{title:"var (statement: Statement) bailing",id:"var-statement-statement-bailing"},{title:"evaluate (expr: Expression) bailing",id:"evaluate-expr-expression-bailing"},{title:"evaluate typeof (expr: Expression) bailing",id:"evaluate-typeof-expr-expression-bailing"},{title:"evaluate Identifier (expr: Expression) bailing",id:"evaluate-identifier-expr-expression-bailing"},{title:"evaluate defined Identifier (expr: Expression) bailing",id:"evaluate-defined-identifier-expr-expression-bailing"},{title:"evaluate CallExpression .(expr: Expression) bailing",id:"evaluate-callexpression-expr-expression-bailing"}],contributors:[],related:[]},body:'<p>parser 实例对象接收一个字符串以及回调函数，并在匹配时返回一个表达式。</p>\n<pre><code class="lang-javascript">compiler<span class="token punctuation">.</span>parser<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"var rewire"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//如果原始模块包含 "var rewire"</span>\n    <span class="token comment">//将得到一个表达式对象的句柄</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#program-ast-bailing" id="program-ast-bailing"></a><span class="text"><code>program(ast)</code> bailing</span><a class="icon-link" href="#program-ast-bailing"></a></h2>\n<p>代码片段中 AST 的通用插件接口。</p>\n<h2 class="header"><a class="anchor" href="#statement-statement-statement-bailing" id="statement-statement-statement-bailing"></a><span class="text"><code>statement(statement: Statement)</code> bailing</span><a class="icon-link" href="#statement-statement-statement-bailing"></a></h2>\n<p>代码片段中 statements 的通用插件接口。</p>\n<h2 class="header"><a class="anchor" href="#call-expr-expression-bailing" id="call-expr-expression-bailing"></a><span class="text"><code>call &lt;identifier&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#call-expr-expression-bailing"></a></h2>\n<p><code>abc(1)</code> =&gt; <code>call abc</code></p>\n<p><code>a.b.c(1)</code> =&gt; <code>call a.b.c</code></p>\n<h2 class="header"><a class="anchor" href="#expression-expr-expression-bailing" id="expression-expr-expression-bailing"></a><span class="text"><code>expression &lt;identifier&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#expression-expr-expression-bailing"></a></h2>\n<p><code>abc</code> =&gt; <code>expression abc</code></p>\n<p><code>a.b.c</code> =&gt; <code>expression a.b.c</code></p>\n<h2 class="header"><a class="anchor" href="#expression-expr-expression-bailing" id="expression-expr-expression-bailing"></a><span class="text"><code>expression ?:(expr: Expression)</code> bailing</span><a class="icon-link" href="#expression-expr-expression-bailing"></a></h2>\n<p><code>(abc ? 1 : 2)</code> =&gt; <code>expression ?!</code></p>\n<p>返回一个布尔值以忽略对错误路径的解析。</p>\n<h2 class="header"><a class="anchor" href="#typeof-expr-expression-bailing" id="typeof-expr-expression-bailing"></a><span class="text"><code>typeof &lt;identifier&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#typeof-expr-expression-bailing"></a></h2>\n<p><code>typeof a.b.c</code> =&gt; <code>typeof a.b.c</code></p>\n<h2 class="header"><a class="anchor" href="#statement-if-statement-statement-bailing" id="statement-if-statement-statement-bailing"></a><span class="text"><code>statement if(statement: Statement)</code> bailing</span><a class="icon-link" href="#statement-if-statement-statement-bailing"></a></h2>\n<p><code>if(abc) {}</code> =&gt; <code>statement if</code></p>\n<p>返回一个布尔值以省略对错误路径的解析。</p>\n<h2 class="header"><a class="anchor" href="#label-statement-statement-bailing" id="label-statement-statement-bailing"></a><span class="text"><code>label &lt;labelname&gt;(statement: Statement)</code> bailing</span><a class="icon-link" href="#label-statement-statement-bailing"></a></h2>\n<p><code>xyz: abc</code> =&gt; <code>label xyz</code></p>\n<h2 class="header"><a class="anchor" href="#var-statement-statement-bailing" id="var-statement-statement-bailing"></a><span class="text"><code>var &lt;name&gt;(statement: Statement)</code> bailing</span><a class="icon-link" href="#var-statement-statement-bailing"></a></h2>\n<p><code>var abc, def</code> =&gt; <code>var abc</code> + <code>var def</code></p>\n<p>返回 <code>false</code>，变量不会添加到已知的定义中。</p>\n<h2 class="header"><a class="anchor" href="#evaluate-expr-expression-bailing" id="evaluate-expr-expression-bailing"></a><span class="text"><code>evaluate &lt;expression type&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#evaluate-expr-expression-bailing"></a></h2>\n<p>对表达式求值。</p>\n<h2 class="header"><a class="anchor" href="#evaluate-typeof-expr-expression-bailing" id="evaluate-typeof-expr-expression-bailing"></a><span class="text"><code>evaluate typeof &lt;identifier&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#evaluate-typeof-expr-expression-bailing"></a></h2>\n<p>对标识符的类型求值。</p>\n<h2 class="header"><a class="anchor" href="#evaluate-identifier-expr-expression-bailing" id="evaluate-identifier-expr-expression-bailing"></a><span class="text"><code>evaluate Identifier &lt;identifier&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#evaluate-identifier-expr-expression-bailing"></a></h2>\n<p>对一个自由变量的标识符求值。</p>\n<h2 class="header"><a class="anchor" href="#evaluate-defined-identifier-expr-expression-bailing" id="evaluate-defined-identifier-expr-expression-bailing"></a><span class="text"><code>evaluate defined Identifier &lt;identifier&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#evaluate-defined-identifier-expr-expression-bailing"></a></h2>\n<p>对一个已定义变量的标识符求值。</p>\n<h2 class="header"><a class="anchor" href="#evaluate-callexpression-expr-expression-bailing" id="evaluate-callexpression-expr-expression-bailing"></a><span class="text"><code>evaluate CallExpression .&lt;property&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#evaluate-callexpression-expr-expression-bailing"></a></h2>\n<p>对成功鉴定的表达式的成员函数的调用求值。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/api/plugins/parser/">https://webpack.js.org/api/plugins/parser/</a></p>\n</blockquote>\n',title:"Parser"},title:"Parser",url:"/api/parser/"},{file:{attributes:{title:"Templates",group:"Plugins",sort:8,anchors:[{title:"MainTemplate",id:"maintemplate"},{title:"startup(source, module, hash)",id:"startup-source-module-hash-"},{title:"ModuleTemplate",id:"moduletemplate"},{title:"ChunkTemplate",id:"chunktemplate"},{title:"FunctionModuleTemplate",id:"functionmoduletemplate"},{title:"HotUpdateChunkTemplate",id:"hotupdatechunktemplate"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#maintemplate" id="maintemplate"></a><span class="text">MainTemplate</span><a class="icon-link" href="#maintemplate"></a></h2>\n<h3 class="header"><a class="anchor" href="#startup-source-module-hash-" id="startup-source-module-hash-"></a><span class="text"><code>startup(source, module, hash)</code></span><a class="icon-link" href="#startup-source-module-hash-"></a></h3>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span>mainTemplate<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'startup\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> module<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>module<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'__ReactStyle__\'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> originName <span class="token operator">=</span> module<span class="token punctuation">.</span>origins <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>origins<span class="token punctuation">.</span>length <span class="token operator">?</span> module<span class="token punctuation">.</span>origins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token punctuation">:</span> <span class="token string">\'main\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n      <span class="token string">\'if (typeof window !== "undefined") {\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'  window.__ReactStyle__ = \'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>classNames<span class="token punctuation">[</span>originName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\';\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'}\'</span>\n    <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\\n\'</span><span class="token punctuation">)</span> <span class="token operator">+</span> source<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> source<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#moduletemplate" id="moduletemplate"></a><span class="text">ModuleTemplate</span><a class="icon-link" href="#moduletemplate"></a></h2>\n<blockquote class="todo"><div class="tip-content"> Document the <code>ModuleTemplate</code>... </div></blockquote><h2 class="header"><a class="anchor" href="#chunktemplate" id="chunktemplate"></a><span class="text">ChunkTemplate</span><a class="icon-link" href="#chunktemplate"></a></h2>\n<blockquote class="todo"><div class="tip-content"> Document the <code>ChunkTemplate</code>... </div></blockquote><h2 class="header"><a class="anchor" href="#functionmoduletemplate" id="functionmoduletemplate"></a><span class="text">FunctionModuleTemplate</span><a class="icon-link" href="#functionmoduletemplate"></a></h2>\n<blockquote class="todo"><div class="tip-content"> Document the <code>FunctionModuleTemplate</code>... </div></blockquote><h2 class="header"><a class="anchor" href="#hotupdatechunktemplate" id="hotupdatechunktemplate"></a><span class="text">HotUpdateChunkTemplate</span><a class="icon-link" href="#hotupdatechunktemplate"></a></h2>\n<blockquote class="todo"><div class="tip-content"> Document the <code>HotUpdateChunkTemplate</code>... </div></blockquote>',title:"Templates"},title:"Templates",url:"/api/template/"}]},{title:"指南",url:"guides",pages:[{file:{attributes:{title:"安装",sort:1,contributors:["bebraw","pksjce","simon04"],group:"-",anchors:[{title:"前提条件",id:"-"},{title:"本地安装",id:"-"},{title:"全局安装",id:"-"},{title:"最新体验版本",id:"-"}],related:[]},body:'<p>本指南介绍了安装 webpack 的各种方法。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">前提条件</span><a class="icon-link" href="#-"></a></h3>\n<p>在开始之前，请确保安装了 <a href="https://nodejs.org/en/">Node.js</a> 的最新版本。使用 Node.js 最新的长期支持版本(LTS - Long Term Support)，是理想的起步。使用旧版本，你可能遇到各种问题，因为它们可能缺少 webpack 功能以及/或者缺少相关 package 包。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">本地安装</span><a class="icon-link" href="#-"></a></h3>\n<p>最新的webpack版本是：</p>\n<p><a href="https://github.com/webpack/webpack/releases"><img src="https://img.shields.io/npm/v/webpack.svg?label=webpack&amp;style=flat-square&amp;maxAge=3600" alt="GitHub release"></a></p>\n<p>要安装最新版本或特定版本，请运行以下命令之一：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack\nnpm <span class="token function">install</span> --save-dev webpack@<span class="token operator">&lt;</span>version<span class="token operator">></span>\n</code></pre>\n<p>对于大多数项目，我们建议本地安装。这可以使我们在引入破坏式变更(breaking change)的依赖时，更容易分别升级项目。通常，webpack 通过运行一个或多个 <a href="https://docs.npmjs.com/misc/scripts">npm scripts</a>，会在本地 <code>node_modules</code> 目录中查找安装的 webpack：</p>\n<pre><code class="lang-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack --config webpack.config.js"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 当你在本地安装 webpack 后，你能够从 <code>node_modules/.bin/webpack</code> 访问它的 bin 版本。 </div></blockquote><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">全局安装</span><a class="icon-link" href="#-"></a></h3>\n<p>以下的 NPM 安装方式，将使 <code>webpack</code> 在全局环境下可用：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --global webpack\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 不推荐全局安装 webpack。这会将你项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中，可能会导致构建失败。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">最新体验版本</span><a class="icon-link" href="#-"></a></h2>\n<p>如果你热衷于使用最新版本的 webpack，你可以使用以下命令，直接从 webpack 的仓库中安装：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> webpack@beta\nnpm <span class="token function">install</span> webpack/webpack<span class="token comment">#&lt;tagname/branchname></span>\n</code></pre>\n<p>安装这些最新体验版本时要小心！它们可能仍然包含 bug，因此不应该用于生产环境。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/installation/">https://webpack.js.org/guides/installation/</a></p>\n</blockquote>\n',title:"安装"},title:"安装",url:"/guides/installation/"},{file:{attributes:{title:"起步",sort:2,contributors:["TheDutchCoder","Vanguard90","aaronang","bebraw","chrisVillanueva","cntanglijun","jecoopr","johnstew","simon04","sudarsangp","varunjayaraman"],group:"-",anchors:[{title:"基本安装",id:"-"},{title:"创建一个 bundle 文件",id:"-bundle-"},{title:"模块",id:"-"},{title:"使用一个配置文件",id:"-"},{title:"NPM 脚本(NPM Scripts)",id:"npm-npm-scripts-"},{title:"结论",id:"-"}],related:[]},body:'<p>你可能已经知道，webpack 用于编译 JavaScript 模块。一旦完成<a href="/guides/installation">安装</a>，你就可以通过 webpack 的 <a href="/api/cli">CLI</a> 或 <a href="/api/node">API</a> 与其配合交互。如果你还不熟悉 webpack，请阅读<a href="/concepts">核心概念</a>和<a href="/comparison">打包器对比</a>，了解为什么你要使用 webpack，而不是社区中的其他工具。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">基本安装</span><a class="icon-link" href="#-"></a></h2>\n<p>首先我们创建一个目录，初始化 npm，以及<a href="/guides/installation#local-installation">在本地安装 webpack</a>：</p>\n<pre><code class="lang-bash"><span class="token function">mkdir</span> webpack-demo <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> webpack-demo\nnpm init -y\nnpm <span class="token function">install</span> --save-dev webpack\n</code></pre>\n<p>现在我们将创建以下目录结构和内容：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n<span class="token inserted">+ |- index.html</span>\n<span class="token inserted">+ |- /src</span>\n<span class="token inserted">+   |- index.js</span>\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Lodash（目前通过一个 script 脚本引入）对于执行这一行是必需的</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'Hello\'</span><span class="token punctuation">,</span> <span class="token string">\'webpack\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>index.html</strong></p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Getting Started<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/lodash@4.16.6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./src/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>在此示例中，<code>&lt;script&gt;</code> 标签之间存在隐式依赖关系。<code>index.js</code> 文件执行之前，还依赖于页面中引入的 <code>lodash</code>。之所以说是隐式的是因为 <code>index.js</code> 并未显式声明需要引入 <code>lodash</code>，只是假定推测已经存在一个全局变量 <code>_</code>。</p>\n<p>使用这种方式去管理 JavaScript 项目会有一些问题：</p>\n<ul>\n<li>无法立即体现，脚本的执行依赖于外部扩展库(external library)。</li>\n<li>如果依赖不存在，或者引入顺序错误，应用程序将无法正常运行。</li>\n<li>如果依赖被引入但是并没有使用，浏览器将被迫下载无用代码。</li>\n</ul>\n<p>让我们使用 webpack 来管理这些脚本。</p>\n<h2 class="header"><a class="anchor" href="#-bundle-" id="-bundle-"></a><span class="text">创建一个 bundle 文件</span><a class="icon-link" href="#-bundle-"></a></h2>\n<p>首先，我们稍微调整下目录结构，将“源”代码(<code>/src</code>)从我们的“分发”代码(<code>/dist</code>)中分离出来。“源”代码是用于书写和编辑的代码。“分发”代码是构建过程产生的代码最小化和优化后的“输出”目录，最终将在浏览器中加载：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n<span class="token inserted">+ |- /dist</span>\n<span class="token inserted">+   |- index.html</span>\n<span class="token deleted">- |- index.html</span>\n  |- /src\n    |- index.js\n</code></pre>\n<p>要在 <code>index.js</code> 中打包 <code>lodash</code> 依赖，我们需要在本地安装 library。</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save lodash\n</code></pre>\n<p>然后在我们的脚本中 import。</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ import _ from \'lodash\';</span>\n+\n  function component() {\n    var element = document.createElement(\'div\');\n\n<span class="token deleted">-   // Lodash, currently included via a script, is required for this line to work</span>\n<span class="token inserted">+   // Lodash, now imported by this script</span>\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>现在，由于通过打包来合成脚本，我们必须更新 <code>index.html</code> 文件。因为现在是通过 <code>import</code> 引入 lodash，所以将 lodash <code>&lt;script&gt;</code> 删除，然后修改另一个 <code>&lt;script&gt;</code> 标签来加载 bundle，而不是原始的 <code>/src</code> 文件：</p>\n<p><strong>dist/index.html</strong></p>\n<pre><code class="lang-diff">  &lt;html>\n   &lt;head>\n     &lt;title>Getting Started&lt;/title>\n<span class="token deleted">-    &lt;script src="https://unpkg.com/lodash@4.16.6">&lt;/script></span>\n   &lt;/head>\n   &lt;body>\n<span class="token deleted">-    &lt;script src="./src/index.js">&lt;/script></span>\n<span class="token inserted">+    &lt;script src="bundle.js">&lt;/script></span>\n   &lt;/body>\n  &lt;/html>\n</code></pre>\n<p>在这个设置中，<code>index.js</code> 显式要求引入的 <code>lodash</code> 必须存在，然后将它绑定为 <code>_</code>（没有全局作用域污染）。通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个优化过的，会以正确顺序执行的 bundle。</p>\n<p>可以这样说，执行 <code>npx webpack</code>，会将我们的脚本作为<a href="/concepts/entry-points">入口起点</a>，然后<a href="/concepts/output">输出</a>为 <code>bundle.js</code>。Node 8.2+ 版本提供的 <code>npx</code> 命令，可以运行在初始安装的 webpack 包(package)的 webpack 二进制文件（<code>./node_modules/.bin/webpack</code>）：</p>\n<pre><code class="lang-bash">npx webpack src/index.js dist/bundle.js\n\nHash: 857f878815ce63ad5b4f\nVersion: webpack 3.9.1\nTime: 332ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 222 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 输出可能会稍有不同，但是只要构建成功，那么你就可以继续。 </div></blockquote><p>在浏览器中打开 <code>index.html</code>，如果一切访问都正常，你应该能看到以下文本：&#39;Hello webpack&#39;。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">模块</span><a class="icon-link" href="#-"></a></h2>\n<p><a href="https://babeljs.io/learn-es2015/">ES2015</a> 中的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"><code>import</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"><code>export</code></a> 语句已经被标准化。虽然大多数浏览器还无法支持它们，但是 webpack 却能够提供开箱即用般的支持。</p>\n<p>事实上，webpack 在幕后会将代码“转译”，以便旧有浏览器可以执行。如果你检查 <code>dist/bundle.js</code>，你可以看到 webpack 具体如何实现，这是独创精巧的设计！除了 <code>import</code> 和 <code>export</code>，webpack 还能够很好地支持多种其他模块语法，更多信息请查看<a href="/api/module-methods">模块 API</a>。</p>\n<p>注意，webpack 不会更改代码中除 <code>import</code> 和 <code>export</code> 语句以外的部分。如果你在使用其它 <a href="http://es6-features.org/">ES2015 特性</a>，请确保你在 webpack 的 <a href="/concepts/loaders/">loader 系统</a>中使用了一个像是 <a href="https://babeljs.io/">Babel</a> 或 <a href="https://buble.surge.sh/guide/">Bublé</a> 的<a href="/loaders/#transpiling">转译器</a>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">使用一个配置文件</span><a class="icon-link" href="#-"></a></h2>\n<p>大多数项目会需要很复杂的设置，这就是为什么 webpack 要支持<a href="/concepts/configuration">配置文件</a>。这比在终端(terminal)中输入大量命令要高效的多，所以让我们创建一个取代以上使用 CLI 选项方式的配置文件：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n<span class="token inserted">+ |- webpack.config.js</span>\n  |- /dist\n    |- index.html\n  |- /src\n    |- index.js\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>现在，让我们通过新配置再次执行构建：</p>\n<pre><code class="lang-bash">npx webpack --config webpack.config.js\n\nHash: 857f878815ce63ad5b4f\nVersion: webpack 3.9.1\nTime: 298ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 222 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 注意，当在 windows 中通过调用路径去调用 <code>webpack</code> 时，必须使用反斜线()。例如 <code>node_modules\\.bin\\webpack --config webpack.config.js</code>。 </div></blockquote><blockquote class="tip"><div class="tip-content"> 如果 <code>webpack.config.js</code> 存在，则 <code>webpack</code> 命令将默认选择使用它。我们在这里使用 <code>--config</code> 选项只是向你表明，可以传递任何名称的配置文件。这对于需要拆分成多个文件的复杂配置是非常有用。 </div></blockquote><p>比起 CLI 这种简单直接的使用方式，配置文件具有更多的灵活性。我们可以通过配置方式指定 loader 规则(loader rules)、插件(plugins)、解析选项(resolve options)，以及许多其他增强功能。了解更多详细信息，请查看<a href="/configuration">配置文档</a>。</p>\n<h2 class="header"><a class="anchor" href="#npm-npm-scripts-" id="npm-npm-scripts-"></a><span class="text">NPM 脚本(NPM Scripts)</span><a class="icon-link" href="#npm-npm-scripts-"></a></h2>\n<p>考虑到用 CLI 这种方式来运行本地的 webpack 不是特别方便，我们可以设置一个快捷方式。在 <em>package.json</em> 添加一个 <a href="https://docs.npmjs.com/misc/scripts">npm 脚本(npm script)</a>：</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  ...\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  ...\n<span class="token punctuation">}</span>\n</code></pre>\n<p>现在，可以使用 <code>npm run build</code> 命令，来替代我们之前使用的 <code>npx</code> 命令。注意，使用 npm 的 <code>scripts</code>，我们可以像使用 <code>npx</code> 那样通过模块名引用本地安装的 npm 包。这是大多数基于 npm 的项目遵循的标准，因为它允许所有贡献者使用同一组通用脚本（如果必要，每个 flag 都带有 <code>--config</code> 标志）。</p>\n<p>现在运行以下命令，然后看看你的脚本别名是否正常运行：</p>\n<pre><code class="lang-bash">npm run build\n\nHash: 857f878815ce63ad5b4f\nVersion: webpack 3.9.1\nTime: 294ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 222 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 通过向 <code>npm run build</code> 命令和你的参数之间添加两个中横线，可以将自定义参数传递给 webpack，例如：<code>npm run build -- --colors</code>。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">结论</span><a class="icon-link" href="#-"></a></h2>\n<p>现在，你已经实现了一个基本的构建过程，你应该移至下一章节的 <a href="/guides/asset-management"><code>Asset Management</code></a> 指南，以了解如何通过 webpack 来管理资源，例如图片、字体。此刻你的项目应该和如下类似：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n  |- bundle.js\n  |- index.html\n|- /src\n  |- index.js\n|- /node_modules\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 如果你使用的是 npm 5，你可能还会在目录中看到一个 <code>package-lock.json</code> 文件。 </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/getting-started/">https://webpack.js.org/getting-started/</a></p>\n</blockquote>\n',title:"起步"},title:"起步",url:"/guides/getting-started/"},{file:{attributes:{title:"管理资源",sort:3,contributors:["TheDutchCoder","michael-ciniawsky","skipjack","sudarsangp"],group:"-",anchors:[{title:"安装",id:"-"},{title:"加载 CSS",id:"-css"},{title:"加载图片",id:"-"},{title:"加载字体",id:"-"},{title:"加载数据",id:"-"},{title:"全局资源",id:"-"},{title:"回退处理",id:"-"},{title:"下一章节指南",id:"-"},{title:"延伸阅读",id:"-"}],related:[]},body:'<p>如果你是从开始一直遵循着指南的示例，现在会有一个小项目，显示 &quot;Hello webpack&quot;。现在我们尝试整合一些其他资源，比如图像，看看 webpack 如何处理。</p>\n<p>在 webpack 出现之前，前端开发人员会使用 grunt 和 gulp 等工具来处理资源，并将它们从 <code>/src</code> 文件夹移动到 <code>/dist</code> 或 <code>/build</code> 目录中。同样方式也被用于 JavaScript 模块，但是，像 webpack 这样的工具，将<strong>动态打包(dynamically bundle)</strong>所有依赖项（创建所谓的<a href="/concepts/dependency-graph">依赖图(dependency graph)</a>）。这是极好的创举，因为现在每个模块都可以_明确表述它自身的依赖，我们将避免打包未使用的模块。</p>\n<p>webpack 最出色的功能之一就是，除了 JavaScript，还可以通过 loader <em>引入任何其他类型的文件</em>。也就是说，以上列出的那些 JavaScript 的优点（例如显式依赖），同样可以用来构建网站或 web 应用程序中的所有非 JavaScript 内容。让我们从 CSS 开始起步，或许你可能已经熟悉了这个设置过程。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<p>在开始之前，让我们对项目做一个小的修改：</p>\n<p><strong>dist/index.html</strong></p>\n<pre><code class="lang-diff">  &lt;html>\n    &lt;head>\n<span class="token deleted">-    &lt;title>Getting Started&lt;/title></span>\n<span class="token inserted">+    &lt;title>Asset Management&lt;/title></span>\n    &lt;/head>\n    &lt;body>\n      &lt;script src="./bundle.js">&lt;/script>\n    &lt;/body>\n  &lt;/html>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-css" id="-css"></a><span class="text">加载 CSS</span><a class="icon-link" href="#-css"></a></h2>\n<p>为了从 JavaScript 模块中 <code>import</code> 一个 CSS 文件，你需要在 <a href="/configuration/module"><code>module</code> 配置中</a> 安装并添加 <a href="/loaders/style-loader">style-loader</a> 和 <a href="/loaders/css-loader">css-loader</a>：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev style-loader css-loader\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n<span class="token inserted">+   module: {</span>\n<span class="token inserted">+     rules: [</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.css$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'style-loader\',</span>\n<span class="token inserted">+           \'css-loader\'</span>\n<span class="token inserted">+         ]</span>\n<span class="token inserted">+       }</span>\n<span class="token inserted">+     ]</span>\n<span class="token inserted">+   }</span>\n  };\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> webpack 根据正则表达式，来确定应该查找哪些文件，并将其提供给指定的 loader。在这种情况下，以 <code>.css</code> 结尾的全部文件，都将被提供给 <code>style-loader</code> 和 <code>css-loader</code>。 </div></blockquote><p>这使你可以在依赖于此样式的文件中 <code>import &#39;./style.css&#39;</code>。现在，当该模块运行时，含有 CSS 字符串的 <code>&lt;style&gt;</code> 标签，将被插入到 html 文件的 <code>&lt;head&gt;</code> 中。</p>\n<p>我们尝试一下，通过在项目中添加一个新的 <code>style.css</code> 文件，并将其导入到我们的 <code>index.js</code> 中：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token inserted">+   |- style.css</span>\n    |- index.js\n  |- /node_modules\n</code></pre>\n<p><strong>src/style.css</strong></p>\n<pre><code class="lang-css"><span class="token selector"><span class="token class">.hello</span> </span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n<span class="token inserted">+ import \'./style.css\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n\n    // lodash 是由当前 script 脚本 import 导入进来的\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token inserted">+   element.classList.add(\'hello\');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>现在运行构建命令：</p>\n<pre><code class="lang-bash">npm run build\n\nHash: 9a3abfc96300ef87880f\nVersion: webpack 2.6.1\nTime: 834ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  560 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/style.css 1 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> ./~/css-loader<span class="token operator">!</span>./src/style.css 191 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./~/css-loader/lib/css-base.js 2.26 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./~/style-loader/lib/addStyles.js 8.7 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>5<span class="token punctuation">]</span> ./~/style-loader/lib/urls.js 3.01 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>6<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>7<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>8<span class="token punctuation">]</span> ./src/index.js 351 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>再次在浏览器中打开 <code>index.html</code>，你应该看到 <code>Hello webpack</code> 现在的样式是红色。要查看 webpack 做了什么，请检查页面（不要查看页面源代码，因为它不会显示结果），并查看页面的 head 标签。它应该包含我们在 <code>index.js</code> 中导入的 style 块元素。</p>\n<blockquote class="tip"><div class="tip-content"> 请注意，在多数情况下，你也可以进行 <a href="/plugins/extract-text-webpack-plugin">CSS 分离</a>，以便在生产环境中节省加载时间。最重要的是，现有的 loader 可以支持任何你可以想到的 CSS 处理器风格 - <a href="/loaders/postcss-loader">postcss</a>, <a href="/loaders/sass-loader">sass</a> 和 <a href="/loaders/less-loader">less</a> 等。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">加载图片</span><a class="icon-link" href="#-"></a></h2>\n<p>假想，现在我们正在下载 CSS，但是我们的背景和图标这些图片，要如何处理呢？使用 <a href="/loaders/file-loader">file-loader</a>，我们可以轻松地将这些内容混合到 CSS 中：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev file-loader\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            \'style-loader\',\n            \'css-loader\'\n          ]\n        },\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.(png|svg|jpg|gif)$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'file-loader\'</span>\n<span class="token inserted">+         ]</span>\n<span class="token inserted">+       }</span>\n      ]\n    }\n  };\n</code></pre>\n<p>现在，当你 <code>import MyImage from &#39;./my-image.png&#39;</code>，该图像将被处理并添加到 <code>output</code> 目录，<em>并且</em> <code>MyImage</code> 变量将包含该图像在处理后的最终 url。当使用 <a href="/loaders/css-loader">css-loader</a> 时，如上所示，你的 CSS 中的 <code>url(&#39;./my-image.png&#39;)</code> 会使用类似的过程去处理。loader 会识别这是一个本地文件，并将 <code>&#39;./my-image.png&#39;</code> 路径，替换为<code>输出</code>目录中图像的最终路径。<a href="/loaders/html-loader">html-loader</a> 以相同的方式处理 <code>&lt;img src=&quot;./my-image.png&quot; /&gt;</code>。</p>\n<p>我们向项目添加一个图像，然后看它是如何工作的，你可以使用任何你喜欢的图像：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token inserted">+   |- icon.png</span>\n    |- style.css\n    |- index.js\n  |- /node_modules\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n  import \'./style.css\';\n<span class="token inserted">+ import Icon from \'./icon.png\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n\n    // Lodash，现在由此脚本导入\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n    element.classList.add(\'hello\');\n\n<span class="token inserted">+   // 将图像添加到我们现有的 div。</span>\n<span class="token inserted">+   var myIcon = new Image();</span>\n<span class="token inserted">+   myIcon.src = Icon;</span>\n+\n<span class="token inserted">+   element.appendChild(myIcon);</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p><strong>src/style.css</strong></p>\n<pre><code class="lang-diff">  .hello {\n    color: red;\n<span class="token inserted">+   background: url(\'./icon.png\');</span>\n  }\n</code></pre>\n<p>让我们重新构建，并再次打开 index.html 文件：</p>\n<pre><code class="lang-bash">npm run build\n\nHash: 854865050ea3c1c7f237\nVersion: webpack 2.6.1\nTime: 895ms\n                               Asset     Size  Chunks                    Chunk Names\n5c999da72346a995e7e2718865d019c8.png  11.3 kB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n                           bundle.js   561 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/icon.png 82 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> ./src/style.css 1 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./~/css-loader<span class="token operator">!</span>./src/style.css 242 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./~/css-loader/lib/css-base.js 2.26 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>5<span class="token punctuation">]</span> ./~/style-loader/lib/addStyles.js 8.7 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>6<span class="token punctuation">]</span> ./~/style-loader/lib/urls.js 3.01 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>7<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>8<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>9<span class="token punctuation">]</span> ./src/index.js 503 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>如果一切顺利，和 <code>Hello webpack</code> 文本旁边的 <code>img</code> 元素一样，现在看到的图标是重复的背景图片。如果你检查此元素，你将看到实际的文件名已更改为像 <code>5c999da72346a995e7e2718865d019c8.png</code> 一样。这意味着 webpack 在 <code>src</code> 文件夹中找到我们的文件，并成功处理过它！</p>\n<blockquote class="tip"><div class="tip-content"> 合乎逻辑下一步是，压缩和优化你的图像。查看 <a href="https://github.com/tcoopman/image-webpack-loader">image-webpack-loader</a> 和 <a href="/loaders/url-loader">url-loader</a>，以了解更多关于如果增强加载处理图片功能。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">加载字体</span><a class="icon-link" href="#-"></a></h2>\n<p>那么，像字体这样的其他资源如何处理呢？file-loader 和 url-loader 可以接收并加载任何文件，然后将其输出到构建目录。这就是说，我们可以将它们用于任何类型的文件，包括字体。让我们更新 <code>webpack.config.js</code> 来处理字体文件：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            \'style-loader\',\n            \'css-loader\'\n          ]\n        },\n        {\n          test: /\\.(png|svg|jpg|gif)$/,\n          use: [\n            \'file-loader\'\n          ]\n        },\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.(woff|woff2|eot|ttf|otf)$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'file-loader\'</span>\n<span class="token inserted">+         ]</span>\n<span class="token inserted">+       }</span>\n      ]\n    }\n  };\n</code></pre>\n<p>在项目中添加一些字体文件：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token inserted">+   |- my-font.woff</span>\n<span class="token inserted">+   |- my-font.woff2</span>\n    |- icon.png\n    |- style.css\n    |- index.js\n  |- /node_modules\n</code></pre>\n<p>通过配置好 loader 并将字体文件放在合适的地方，你可以通过一个 <code>@font-face</code> 声明引入。本地的 <code>url(...)</code> 指令会被 webpack 获取处理，就像它处理图片资源一样：</p>\n<p><strong>src/style.css</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ @font-face {</span>\n<span class="token inserted">+   font-family: \'MyFont\';</span>\n<span class="token inserted">+   src:  url(\'./my-font.woff2\') format(\'woff2\'),</span>\n<span class="token inserted">+         url(\'./my-font.woff\') format(\'woff\');</span>\n<span class="token inserted">+   font-weight: 600;</span>\n<span class="token inserted">+   font-style: normal;</span>\n<span class="token inserted">+ }</span>\n\n  .hello {\n    color: red;\n<span class="token inserted">+   font-family: \'MyFont\';</span>\n    background: url(\'./icon.png\');\n  }\n</code></pre>\n<p>现在让我们重新构建来看看 webpack 是否处理了我们的字体：</p>\n<pre><code class="lang-bash">npm run build\n\nHash: b4aef94169088c79ed1c\nVersion: webpack 2.6.1\nTime: 775ms\n                                Asset     Size  Chunks                    Chunk Names\n 5c999da72346a995e7e2718865d019c8.png  11.3 kB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n11aebbbd407bcc3ab1e914ca0238d24d.woff   221 kB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n                            bundle.js   561 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/icon.png 82 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> ./src/style.css 1 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./~/css-loader<span class="token operator">!</span>./src/style.css 420 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./~/css-loader/lib/css-base.js 2.26 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>5<span class="token punctuation">]</span> ./src/MyFont.woff 83 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>6<span class="token punctuation">]</span> ./~/style-loader/lib/addStyles.js 8.7 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>7<span class="token punctuation">]</span> ./~/style-loader/lib/urls.js 3.01 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>8<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>9<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n  <span class="token punctuation">[</span>10<span class="token punctuation">]</span> ./src/index.js 503 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>重新打开 <code>index.html</code> 看看我们的 <code>Hello webpack</code> 文本显示是否换上了新的字体。如果一切顺利，你应该能看到变化。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">加载数据</span><a class="icon-link" href="#-"></a></h2>\n<p>此外，可以加载的有用资源还有数据，如 JSON 文件，CSV、TSV 和 XML。类似于 NodeJS，JSON 支持实际上是内置的，也就是说 <code>import Data from &#39;./data.json&#39;</code> 默认将正常运行。要导入 CSV、TSV 和 XML，你可以使用 <a href="https://github.com/theplatapi/csv-loader">csv-loader</a> 和 <a href="https://github.com/gisikw/xml-loader">xml-loader</a>。让我们处理这三类文件：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev csv-loader xml-loader\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            \'style-loader\',\n            \'css-loader\'\n          ]\n        },\n        {\n          test: /\\.(png|svg|jpg|gif)$/,\n          use: [\n            \'file-loader\'\n          ]\n        },\n        {\n          test: /\\.(woff|woff2|eot|ttf|otf)$/,\n          use: [\n            \'file-loader\'\n          ]\n        },\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.(csv|tsv)$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'csv-loader\'</span>\n<span class="token inserted">+         ]</span>\n<span class="token inserted">+       },</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.xml$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'xml-loader\'</span>\n<span class="token inserted">+         ]</span>\n<span class="token inserted">+       }</span>\n      ]\n    }\n  };\n</code></pre>\n<p>给你的项目添加一些数据文件：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token inserted">+   |- data.xml</span>\n    |- my-font.woff\n    |- my-font.woff2\n    |- icon.png\n    |- style.css\n    |- index.js\n  |- /node_modules\n</code></pre>\n<p><strong>src/data.xml</strong></p>\n<pre><code class="lang-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>Mary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Call Cindy on Tuesday<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>现在，你可以 <code>import</code> 这四种类型的数据(JSON, CSV, TSV, XML)中的任何一种，所导入的 <code>Data</code> 变量将包含可直接使用的已解析 JSON：</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n  import \'./style.css\';\n  import Icon from \'./icon.png\';\n<span class="token inserted">+ import Data from \'./data.xml\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n\n    // Lodash, now imported by this script\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n    element.classList.add(\'hello\');\n\n    // Add the image to our existing div.\n    var myIcon = new Image();\n    myIcon.src = Icon;\n\n    element.appendChild(myIcon);\n\n<span class="token inserted">+   console.log(Data);</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>当你打开 <code>index.html</code> 并查看开发者工具中的控制台，你应该能够看到你导入的数据被打印在了上面！</p>\n<blockquote class="tip"><div class="tip-content"> 在使用 <a href="https://github.com/d3">d3</a> 等工具来实现某些数据可视化时，预加载数据会非常有用。我们可以不用再发送 ajax 请求，然后于运行时解析数据，而是在构建过程中将其提前载入并打包到模块中，以便浏览器加载模块后，可以立即从模块中解析数据。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">全局资源</span><a class="icon-link" href="#-"></a></h2>\n<p>上述所有内容中最出色之处是，以这种方式加载资源，你可以以更直观的方式将模块和资源组合在一起。无需依赖于含有全部资源的 <code>/assets</code> 目录，而是将资源与代码组合在一起。例如，类似这样的结构会非常有用：</p>\n<pre><code class="lang-diff"><span class="token deleted">- |- /assets</span>\n<span class="token inserted">+ |– /components</span>\n<span class="token inserted">+ |  |– /my-component</span>\n<span class="token inserted">+ |  |  |– index.jsx</span>\n<span class="token inserted">+ |  |  |– index.css</span>\n<span class="token inserted">+ |  |  |– icon.svg</span>\n<span class="token inserted">+ |  |  |– img.png</span>\n</code></pre>\n<p>这种配置方式会使你的代码更具备可移植性，因为现有的统一放置的方式会造成所有资源紧密耦合在一起。假如你想在另一个项目中使用  <code>/my-component</code>，只需将其复制或移动到 <code>/components</code> 目录下。只要你已经安装了任何<em>扩展依赖(external dependencies)</em>，并且你<em>已经在配置中定义过相同的 loader</em>，那么项目应该能够良好运行。</p>\n<p>但是，假如你无法使用新的开发方式，只能被固定于旧有开发方式，或者你有一些在多个组件（视图、模板、模块等）之间共享的资源。你仍然可以将这些资源存储在公共目录(base directory)中，甚至配合使用 <a href="/configuration/resolve#resolve-alias">alias</a> 来使它们更方便 <code>import 导入</code>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">回退处理</span><a class="icon-link" href="#-"></a></h2>\n<p>对于接下来的指南，我们无需使用本指南中所有用到的资源，因此我们会进行一些清理工作，以便为下一部分指南中的<a href="/guides/output-management/">管理输出章节</a>做好准备：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token deleted">-   |- data.xml</span>\n<span class="token deleted">-   |- my-font.woff</span>\n<span class="token deleted">-   |- my-font.woff2</span>\n<span class="token deleted">-   |- icon.png</span>\n<span class="token deleted">-   |- style.css</span>\n    |- index.js\n  |- /node_modules\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n<span class="token deleted">-   module: {</span>\n<span class="token deleted">-     rules: [</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.css$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'style-loader\',</span>\n<span class="token deleted">-           \'css-loader\'</span>\n<span class="token deleted">-         ]</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.(png|svg|jpg|gif)$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'file-loader\'</span>\n<span class="token deleted">-         ]</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.(woff|woff2|eot|ttf|otf)$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'file-loader\'</span>\n<span class="token deleted">-         ]</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.(csv|tsv)$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'csv-loader\'</span>\n<span class="token deleted">-         ]</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.xml$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'xml-loader\'</span>\n<span class="token deleted">-         ]</span>\n<span class="token deleted">-       }</span>\n<span class="token deleted">-     ]</span>\n<span class="token deleted">-   }</span>\n  };\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n<span class="token deleted">- import \'./style.css\';</span>\n<span class="token deleted">- import Icon from \'./icon.png\';</span>\n<span class="token deleted">- import Data from \'./data.xml\';</span>\n-\n  function component() {\n    var element = document.createElement(\'div\');\n-\n<span class="token deleted">-   // Lodash，现在通过 script 标签导入</span>\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token deleted">-   element.classList.add(\'hello\');</span>\n-\n<span class="token deleted">-   // 将图像添加到我们已有的 div 中。</span>\n<span class="token deleted">-   var myIcon = new Image();</span>\n<span class="token deleted">-   myIcon.src = Icon;</span>\n-\n<span class="token deleted">-   element.appendChild(myIcon);</span>\n-\n<span class="token deleted">-   console.log(Data);</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">下一章节指南</span><a class="icon-link" href="#-"></a></h2>\n<p>让我们继续移步到<a href="/guides/output-management/">管理输出</a></p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">延伸阅读</span><a class="icon-link" href="#-"></a></h2>\n<ul>\n<li><a href="https://survivejs.com/webpack/loading/fonts/">加载字体</a> on SurviveJS</li>\n</ul>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/asset-management/">https://webpack.js.org/guides/asset-management/</a></p>\n</blockquote>\n',title:"管理资源"},title:"管理资源",url:"/guides/asset-management/"},{file:{attributes:{title:"管理输出",sort:4,contributors:["JGJP","TheDutchCoder","skipjack","sudarsangp"],group:"-",anchors:[{title:"预先准备",id:"-"},{title:"设定 HtmlWebpackPlugin",id:"-htmlwebpackplugin"},{title:"清理 /dist 文件夹",id:"-dist-"},{title:"Manifest",id:"manifest"},{title:"结论",id:"-"}],related:[]},body:'<blockquote class="tip"><div class="tip-content"> 本指南继续沿用<a href="/guides/asset-management"><code>管理资源</code></a>指南中的代码示例。 </div></blockquote><p>到目前为止，我们在 <code>index.html</code> 文件中手动引入所有资源，然而随着应用程序增长，并且一旦开始对<a href="/guides/caching">文件名使用哈希(hash)</a>]并输出<a href="/guides/code-splitting">多个 bundle</a>，手动地对 <code>index.html</code> 文件进行管理，一切就会变得困难起来。然而，可以通过一些插件，会使这个过程更容易操控。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">预先准备</span><a class="icon-link" href="#-"></a></h2>\n<p>首先，让我们调整一下我们的项目：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n<span class="token inserted">+   |- print.js</span>\n  |- /node_modules\n</code></pre>\n<p>我们在 <code>src/print.js</code> 文件中添加一些逻辑：</p>\n<p><strong>src/print.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">printMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'I get called from print.js!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>并且在 <code>src/index.js</code> 文件中使用这个函数：</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n<span class="token inserted">+ import printMe from \'./print.js\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n<span class="token inserted">+   var btn = document.createElement(\'button\');</span>\n\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n<span class="token inserted">+   btn.innerHTML = \'Click me and check the console!\';</span>\n<span class="token inserted">+   btn.onclick = printMe;</span>\n+\n<span class="token inserted">+   element.appendChild(btn);</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>我们还要更新 <code>dist/index.html</code> 文件，来为 webpack 分离入口做好准备：</p>\n<p><strong>dist/index.html</strong></p>\n<pre><code class="lang-diff">  &lt;html>\n    &lt;head>\n<span class="token deleted">-     &lt;title>Asset Management&lt;/title></span>\n<span class="token inserted">+     &lt;title>Output Management&lt;/title></span>\n<span class="token inserted">+     &lt;script src="./print.bundle.js">&lt;/script></span>\n    &lt;/head>\n    &lt;body>\n<span class="token deleted">-     &lt;script src="./bundle.js">&lt;/script></span>\n<span class="token inserted">+     &lt;script src="./app.bundle.js">&lt;/script></span>\n    &lt;/body>\n  &lt;/html>\n</code></pre>\n<p>现在调整配置。我们将在 entry 添加 <code>src/print.js</code> 作为新的入口起点（<code>print</code>），然后修改 output，以便根据入口起点名称动态生成 bundle 名称：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n<span class="token deleted">-   entry: \'./src/index.js\',</span>\n<span class="token inserted">+   entry: {</span>\n<span class="token inserted">+     app: \'./src/index.js\',</span>\n<span class="token inserted">+     print: \'./src/print.js\'</span>\n<span class="token inserted">+   },</span>\n    output: {\n<span class="token deleted">-     filename: \'bundle.js\',</span>\n<span class="token inserted">+     filename: \'[name].bundle.js\',</span>\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>执行 <code>npm run build</code>，然后看到生成如下：</p>\n<pre><code class="lang-bash">Hash: aa305b0f3373c63c9051\nVersion: webpack 3.0.0\nTime: 536ms\n          Asset     Size  Chunks                    Chunk Names\n  app.bundle.js   545 kB    0, 1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  app\nprint.bundle.js  2.74 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         print\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/print.js 84 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 403 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<p>我们可以看到，webpack 生成 <code>print.bundle.js</code> 和 <code>app.bundle.js</code> 文件，这也和我们在 <code>index.html</code> 文件中指定的文件名称相对应。如果你在浏览器中打开 <code>index.html</code>，就可以看到在点击按钮时会发生什么。</p>\n<p>但是，如果我们更改了我们的一个入口起点的名称，甚至添加了一个新的名称，会发生什么？生成的包将被重命名在一个构建中，但是我们的<code>index.html</code>文件仍然会引用旧的名字。我们用 <a href="/plugins/html-webpack-plugin"><code>HtmlWebpackPlugin</code></a> 来解决这个问题。</p>\n<h2 class="header"><a class="anchor" href="#-htmlwebpackplugin" id="-htmlwebpackplugin"></a><span class="text">设定 HtmlWebpackPlugin</span><a class="icon-link" href="#-htmlwebpackplugin"></a></h2>\n<p>首先安装插件，并且调整 <code>webpack.config.js</code> 文件：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev html-webpack-plugin\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n<span class="token inserted">+ const HtmlWebpackPlugin = require(\'html-webpack-plugin\');</span>\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n<span class="token inserted">+   plugins: [</span>\n<span class="token inserted">+     new HtmlWebpackPlugin({</span>\n<span class="token inserted">+       title: \'Output Management\'</span>\n<span class="token inserted">+     })</span>\n<span class="token inserted">+   ],</span>\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>在我们构建之前，你应该了解，虽然在 <code>dist/</code> 文件夹我们已经有 <code>index.html</code> 这个文件，然而 <code>HtmlWebpackPlugin</code> 还是会默认生成 <code>index.html</code> 文件。这就是说，它会用新生成的 <code>index.html</code> 文件，把我们的原来的替换。让我们看下在执行 <code>npm run build</code> 后会发生什么：</p>\n<pre><code class="lang-bash">Hash: 81f82697c19b5f49aebd\nVersion: webpack 2.6.1\nTime: 854ms\n           Asset       Size  Chunks                    Chunk Names\n print.bundle.js     544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  print\n   app.bundle.js    2.81 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         app\n      index.html  249 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./src/index.js 172 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> multi lodash 28 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n       <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./~/html-webpack-plugin/lib/loader.js<span class="token operator">!</span>./~/html-webpack-plugin/default_index.ejs 538 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>如果你在代码编辑器中将 <code>index.html</code> 打开，你就会看到 <code>HtmlWebpackPlugin</code> 创建了一个全新的文件，所有的 bundle 会自动添加到 html 中。</p>\n<p>如果你想要了解更多 <code>HtmlWebpackPlugin</code> 插件提供的全部功能和选项，那么你就应该多多熟悉 <a href="https://github.com/jantimon/html-webpack-plugin"><code>HtmlWebpackPlugin</code></a> 仓库。</p>\n<p>你还可以看一下 <a href="https://github.com/jaketrent/html-webpack-template"><code>html-webpack-template</code></a>，除了默认模板之外，还提供了一些额外的功能。</p>\n<h2 class="header"><a class="anchor" href="#-dist-" id="-dist-"></a><span class="text">清理 <code>/dist</code> 文件夹</span><a class="icon-link" href="#-dist-"></a></h2>\n<p>你可能已经注意到，由于过去的指南和代码示例遗留下来，导致我们的 <code>/dist</code> 文件夹相当杂乱。webpack 会生成文件，然后将这些文件放置在 <code>/dist</code> 文件夹中，但是 webpack 无法追踪到哪些文件是实际在项目中用到的。</p>\n<p>通常，在每次构建前清理 <code>/dist</code> 文件夹，是比较推荐的做法，因此只会生成用到的文件。让我们完成这个需求。</p>\n<p><a href="https://www.npmjs.com/package/clean-webpack-plugin"><code>clean-webpack-plugin</code></a> 是一个比较普及的管理插件，让我们安装和配置下。</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> clean-webpack-plugin --save-dev\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n<span class="token inserted">+ const CleanWebpackPlugin = require(\'clean-webpack-plugin\');</span>\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n    plugins: [\n<span class="token inserted">+     new CleanWebpackPlugin([\'dist\']),</span>\n      new HtmlWebpackPlugin({\n        title: \'Output Management\'\n      })\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>现在执行 <code>npm run build</code>，再检查 <code>/dist</code> 文件夹。如果一切顺利，你现在应该不会再看到旧的文件，只有构建后生成的文件！</p>\n<h2 class="header"><a class="anchor" href="#manifest" id="manifest"></a><span class="text">Manifest</span><a class="icon-link" href="#manifest"></a></h2>\n<p>你可能会感兴趣，webpack及其插件似乎“知道”应该哪些文件生成。答案是，通过 manifest，webpack 能够对「你的模块映射到输出 bundle 的过程」保持追踪。如果你对通过其他方式来管理 webpack 的<a href="/configuration/output">输出</a>更感兴趣，那么首先了解 manifest 是个好的开始。</p>\n<p>通过使用 <a href="https://github.com/danethurber/webpack-manifest-plugin"><code>WebpackManifestPlugin</code></a>，可以直接将数据提取到一个 json 文件，以供使用。</p>\n<p>我们不会在此展示一个关于如何在你的项目中使用此插件的完整示例，但是你可以仔细深入阅读 <a href="/concepts/manifest">manifest 的概念页面</a>，以及通过<a href="/guides/caching">缓存指南</a>来弄清如何与长期缓存相关联。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">结论</span><a class="icon-link" href="#-"></a></h2>\n<p>现在，你已经了解如何向 HTML 动态添加 bundle，让我们深入<a href="/guides/development">开发指南</a>。或者，如果你想要深入更多相关高级话题，我们推荐你前往<a href="/guides/code-splitting">代码分离指南</a>。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/output-management/">https://webpack.js.org/guides/output-management/</a></p>\n</blockquote>\n',title:"管理输出"},title:"管理输出",url:"/guides/output-management/"},{file:{attributes:{title:"开发",sort:5,contributors:["SpaceK33z","TheDutchCoder","fvgs","rafde"],group:"-",anchors:[{title:"使用 source map",id:"-source-map"},{title:"选择一个开发工具",id:"-"},{title:"使用观察模式",id:"-"},{title:"使用 webpack-dev-server",id:"-webpack-dev-server"},{title:"使用 webpack-dev-middleware",id:"-webpack-dev-middleware"},{title:"调整文本编辑器",id:"-"},{title:"结论",id:"-"}],related:[]},body:'<blockquote class="tip"><div class="tip-content"> 本指南继续沿用<a href="/guides/output-management">管理输出</a>指南中的代码示例。 </div></blockquote><p>如果你一直跟随之前的指南，应该对一些 webpack 基础知识有着很扎实的理解。在我们继续之前，先来看看如何建立一个开发环境，使我们的开发变得更容易一些。</p>\n<blockquote class="warning"><div class="tip-content"> 本指南中的工具<strong>仅用于开发环境</strong>，请<strong>不要</strong>在生产环境中使用它们！ </div></blockquote><h2 class="header"><a class="anchor" href="#-source-map" id="-source-map"></a><span class="text">使用 source map</span><a class="icon-link" href="#-source-map"></a></h2>\n<p>当 webpack 打包源代码时，可能会很难追踪到错误和警告在源代码中的原始位置。例如，如果将三个源文件（<code>a.js</code>, <code>b.js</code> 和 <code>c.js</code>）打包到一个 bundle（<code>bundle.js</code>）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会简单地指向到 <code>bundle.js</code>。这并通常没有太多帮助，因为你可能需要准确地知道错误来自于哪个源文件。</p>\n<p>为了更容易地追踪错误和警告，JavaScript 提供了 <a href="http://blog.teamtreehouse.com/introduction-source-maps">source map</a> 功能，将编译后的代码映射回原始源代码。如果一个错误来自于 <code>b.js</code>，source map 就会明确的告诉你。</p>\n<p>source map 有很多<a href="/configuration/devtool">不同的选项</a>可用，请务必仔细阅读它们，以便可以根据需要进行配置。</p>\n<p>对于本指南，我们使用 <code>inline-source-map</code> 选项，这有助于解释说明我们的目的（仅解释说明，不要用于生产环境）：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n<span class="token inserted">+   devtool: \'inline-source-map\',</span>\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Development\'\n      })\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>现在，让我们来做一些调试，在 <code>print.js</code> 文件中生成一个错误：</p>\n<p><strong>src/print.js</strong></p>\n<pre><code class="lang-diff">  export default function printMe() {\n<span class="token deleted">-   console.log(\'I get called from print.js!\');</span>\n<span class="token inserted">+   cosnole.error(\'I get called from print.js!\');</span>\n  }\n</code></pre>\n<p>运行 <code>npm run build</code>，就会编译为如下：</p>\n<pre><code class="lang-bash">Hash: 7bf68ca15f1f2690e2d1\nVersion: webpack 3.1.0\nTime: 1224ms\n          Asset       Size  Chunks                    Chunk Names\n  app.bundle.js    1.44 MB    0, 1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  app\nprint.bundle.js    6.43 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         print\n     index.html  248 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/print.js 84 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 403 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n        + 2 hidden modules\n</code></pre>\n<p>现在在浏览器打开最终生成的 <code>index.html</code> 文件，点击按钮，并且在控制台查看显示的错误。错误应该如下：</p>\n<pre><code class="lang-bash"> Uncaught ReferenceError: cosnole is not defined\n    at HTMLButtonElement.printMe <span class="token punctuation">(</span>print.js:2<span class="token punctuation">)</span>\n</code></pre>\n<p>我们可以看到，此错误包含有发生错误的文件（<code>print.js</code>）和行号（2）的引用。这是非常有帮助的，因为现在我们知道了，所要解决的问题的确切位置。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选择一个开发工具</span><a class="icon-link" href="#-"></a></h2>\n<blockquote class="warning"><div class="tip-content"> 一些文本编辑器具有“安全写入”功能，可能会干扰以下某些工具。阅读<a href="#adjusting-your-text-editor">调整文本编辑器</a>以解决这些问题。 </div></blockquote><p>每次要编译代码时，手动运行 <code>npm run build</code> 就会变得很麻烦。</p>\n<p>webpack 中有几个不同的选项，可以帮助你在代码发生变化后自动编译代码：</p>\n<ol>\n<li>webpack&#39;s Watch Mode</li>\n<li>webpack-dev-server</li>\n<li>webpack-dev-middleware</li>\n</ol>\n<p>多数场景中，你可能需要使用 <code>webpack-dev-server</code>，但是不妨探讨一下以上的所有选项。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">使用观察模式</span><a class="icon-link" href="#-"></a></h3>\n<p>你可以指示 webpack &quot;watch&quot; 依赖图中的所有文件以进行更改。如果其中一个文件被更新，代码将被重新编译，所以你不必手动运行整个构建。</p>\n<p>我们添加一个用于启动 webpack 的观察模式的 npm script 脚本：</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-diff">  {\n    "name": "development",\n    "version": "1.0.0",\n    "description": "",\n    "main": "webpack.config.js",\n    "scripts": {\n      "test": "echo \\"Error: no test specified\\" &amp;&amp; exit 1",\n<span class="token inserted">+     "watch": "webpack --watch",</span>\n      "build": "webpack"\n    },\n    "keywords": [],\n    "author": "",\n    "license": "ISC",\n    "devDependencies": {\n      "clean-webpack-plugin": "^0.1.16",\n      "css-loader": "^0.28.4",\n      "csv-loader": "^2.1.1",\n      "file-loader": "^0.11.2",\n      "html-webpack-plugin": "^2.29.0",\n      "style-loader": "^0.18.2",\n      "webpack": "^3.0.0",\n      "xml-loader": "^1.2.1"\n    }\n  }\n</code></pre>\n<p>现在，你可以在命令行中运行 <code>npm run watch</code>，就会看到 webpack 编译代码，然而却不会退出命令行。这是因为 script 脚本还在观察文件。</p>\n<p>现在，webpack 观察文件的同时，我们先移除我们之前引入的错误：</p>\n<p><strong>src/print.js</strong></p>\n<pre><code class="lang-diff">  export default function printMe() {\n<span class="token deleted">-   cosnole.log(\'I get called from print.js!\');</span>\n<span class="token inserted">+   console.log(\'I get called from print.js!\');</span>\n  }\n</code></pre>\n<p>现在,保存文件并检查终端窗口。应该可以看到 webpack 自动重新编译修改后的模块！</p>\n<p>唯一的缺点是，为了看到修改后的实际效果，你需要刷新浏览器。如果能够自动刷新浏览器就更好了，可以尝试使用 <code>webpack-dev-server</code>，恰好可以实现我们想要的功能。</p>\n<h3 class="header"><a class="anchor" href="#-webpack-dev-server" id="-webpack-dev-server"></a><span class="text">使用 webpack-dev-server</span><a class="icon-link" href="#-webpack-dev-server"></a></h3>\n<p><code>webpack-dev-server</code> 为你提供了一个简单的 web 服务器，并且能够实时重新加载(live reloading)。让我们设置以下：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack-dev-server\n</code></pre>\n<p>修改配置文件，告诉开发服务器(dev server)，在哪里查找文件：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n    devtool: \'inline-source-map\',\n<span class="token inserted">+   devServer: {</span>\n<span class="token inserted">+     contentBase: \'./dist\'</span>\n<span class="token inserted">+   },</span>\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Development\'\n      })\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>以上配置告知 <code>webpack-dev-server</code>，在 <code>localhost:8080</code> 下建立服务，将 <code>dist</code> 目录下的文件，作为可访问文件。</p>\n<p>让我们添加一个 script 脚本，可以直接运行开发服务器(dev server)：</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-diff">  {\n    "name": "development",\n    "version": "1.0.0",\n    "description": "",\n    "main": "webpack.config.js",\n    "scripts": {\n      "test": "echo \\"Error: no test specified\\" &amp;&amp; exit 1",\n      "watch": "webpack --progress --watch",\n<span class="token inserted">+     "start": "webpack-dev-server --open",</span>\n      "build": "webpack"\n    },\n    "keywords": [],\n    "author": "",\n    "license": "ISC",\n    "devDependencies": {\n      "clean-webpack-plugin": "^0.1.16",\n      "css-loader": "^0.28.4",\n      "csv-loader": "^2.1.1",\n      "file-loader": "^0.11.2",\n      "html-webpack-plugin": "^2.29.0",\n      "style-loader": "^0.18.2",\n      "webpack": "^3.0.0",\n      "xml-loader": "^1.2.1"\n    }\n  }\n</code></pre>\n<p>现在，我们可以在命令行中运行 <code>npm start</code>，就会看到浏览器自动加载页面。如果现在修改和保存任意源文件，web 服务器就会自动重新加载编译后的代码。试一下！</p>\n<p><code>webpack-dev-server</code> 带有许多可配置的选项。转到<a href="/configuration/dev-server">相关文档</a>以了解更多。</p>\n<blockquote class="tip"><div class="tip-content"> 现在，服务器正在运行，你可能需要尝试<a href="/guides/hot-module-replacement">模块热替换(Hot Module Replacement)</a>！ </div></blockquote><h3 class="header"><a class="anchor" href="#-webpack-dev-middleware" id="-webpack-dev-middleware"></a><span class="text">使用 webpack-dev-middleware</span><a class="icon-link" href="#-webpack-dev-middleware"></a></h3>\n<p><code>webpack-dev-middleware</code> 是一个中间件容器(wrapper)，它将通过 webpack 处理后的文件发布到一个服务器(server)。在内部 <code>webpack-dev-server</code> 它使用，然而，它可以作为一个单独的包来提供，可以进行更多的自定义设置来实现更多需求。接下来是一个 webpack-dev-middleware 配合 express server 的示例。</p>\n<p>首先，安装 <code>express</code> 和 <code>webpack-dev-middleware</code>：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev express webpack-dev-middleware\n</code></pre>\n<p>接下来我们需要对 webpack 的配置文件做一些调整，以确保中间件(middleware)功能能够正确启用：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n    devtool: \'inline-source-map\',\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Output Management\'\n      })\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\'),\n<span class="token inserted">+     publicPath: \'/\'</span>\n    }\n  };\n</code></pre>\n<p><code>publicPath</code> 也会在服务器脚本用到，以确保文件资源能够在 <code>http://localhost:3000</code> 下正确访问，我们稍后再设置端口号。下一步就是设置我们自定义的 <code>express</code> 服务：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n<span class="token inserted">+ |- server.js</span>\n  |- /dist\n  |- /src\n    |- index.js\n    |- print.js\n  |- /node_modules\n</code></pre>\n<p><strong>server.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpackDevMiddleware <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-dev-middleware\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Tell express to use the webpack-dev-middleware and use the webpack.config.js</span>\n<span class="token comment">// configuration file as a base.</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">webpackDevMiddleware</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  publicPath<span class="token punctuation">:</span> config<span class="token punctuation">.</span>output<span class="token punctuation">.</span>publicPath\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Serve the files on port 3000.</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Example app listening on port 3000!\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>现在，添加一个 npm script，以使我们更方便地运行服务：</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-diff">  {\n    "name": "development",\n    "version": "1.0.0",\n    "description": "",\n    "main": "webpack.config.js",\n    "scripts": {\n      "test": "echo \\"Error: no test specified\\" &amp;&amp; exit 1",\n      "watch": "webpack --progress --watch",\n      "start": "webpack-dev-server --open",\n<span class="token inserted">+     "server": "node server.js",</span>\n      "build": "webpack"\n    },\n    "keywords": [],\n    "author": "",\n    "license": "ISC",\n    "devDependencies": {\n      "clean-webpack-plugin": "^0.1.16",\n      "css-loader": "^0.28.4",\n      "csv-loader": "^2.1.1",\n      "express": "^4.15.3",\n      "file-loader": "^0.11.2",\n      "html-webpack-plugin": "^2.29.0",\n      "style-loader": "^0.18.2",\n      "webpack": "^3.0.0",\n      "webpack-dev-middleware": "^1.12.0",\n      "xml-loader": "^1.2.1"\n    }\n  }\n</code></pre>\n<p>现在，在你的终端执行 <code>npm run server</code>，将会有类似如下信息输出：</p>\n<pre><code class="lang-bash">Example app listening on port 3000<span class="token operator">!</span>\nwebpack built 27b137af6d9d8668c373 <span class="token keyword">in</span> 1198ms\nHash: 27b137af6d9d8668c373\nVersion: webpack 3.0.0\nTime: 1198ms\n          Asset       Size  Chunks                    Chunk Names\n  app.bundle.js    1.44 MB    0, 1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  app\nprint.bundle.js    6.57 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         print\n     index.html  306 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/print.js 116 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 403 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> ./node_modules/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n         Asset    Size  Chunks  Chunk Names\n    index.html  544 kB       0\n       <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./node_modules/html-webpack-plugin/lib/loader.js<span class="token operator">!</span>./node_modules/html-webpack-plugin/default_index.ejs 538 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./node_modules/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\nwebpack: Compiled successfully.\n</code></pre>\n<p>现在，打开浏览器，跳转到 <code>http://localhost:3000</code>，你应该看到你的webpack 应用程序已经运行！</p>\n<blockquote class="tip"><div class="tip-content"> 如果想要了解更多关于模块热替换(Hot Module Replacement)的机制，我们推荐你查看<a href="/guides/hot-module-replacement/">模块热替换(Hot Module Replacement)</a>指南。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">调整文本编辑器</span><a class="icon-link" href="#-"></a></h2>\n<p>使用自动编译代码时，可能会在保存文件时遇到一些问题。某些编辑器具有“安全写入”功能，可能会影响重新编译。</p>\n<p>要在一些常见的编辑器中禁用此功能，请查看以下列表：</p>\n<ul>\n<li><strong>Sublime Text 3</strong> - 在用户首选项(user preferences)中添加 <code>atomic_save: &quot;false&quot;</code>。</li>\n<li><strong>IntelliJ</strong> - 在首选项(preferences)中使用搜索，查找到 &quot;safe write&quot; 并且禁用它。</li>\n<li><strong>Vim</strong> - 在设置(settings)中增加 <code>:set backupcopy=yes</code>。</li>\n<li><strong>WebStorm</strong> - 在 <code>Preferences &gt; Appearance &amp; Behavior &gt; System Settings</code> 中取消选中 Use <code>&quot;safe write&quot;</code>。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">结论</span><a class="icon-link" href="#-"></a></h2>\n<p>现在，你已经学会了如何自动编译代码，并运行一个简单的开发服务器(development server)，你可以查看下一个指南，其中将介绍 <a href="/guides/hot-module-replacement">模块热替换(Hot Module Replacement)</a>。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/development/">https://webpack.js.org/guides/development/</a></p>\n</blockquote>\n',title:"开发"},title:"开发",url:"/guides/development/"},{file:{attributes:{title:"模块热替换",sort:6,contributors:["aiduryagin","bdwain","caryli","drpicox","gdi2290","jhnns","jmreidy","joshsantos","rohannair","sararubin","sbaidon","skipjack","xgirma"],related:[{title:"概念 - 模块热替换(Hot Module Replacement)",url:"/concepts/hot-module-replacement"},{title:"API - 模块热替换(Hot Module Replacement)",url:"/api/hot-module-replacement"}],group:"-",anchors:[{title:"启用 HMR",id:"-hmr"},{title:"通过 Node.js API",id:"-node-js-api"},{title:"问题",id:"-"},{title:"HMR 修改样式表",id:"hmr-"},{title:"其他代码和框架",id:"-"}]},body:'<blockquote class="tip"><div class="tip-content"> 本指南继续沿用<a href="/guides/development">开发指南</a>中的代码示例。 </div></blockquote><p>模块热替换(Hot Module Replacement 或 HMR)是 webpack 提供的最有用的功能之一。它允许在运行时更新各种模块，而无需进行完全刷新。本页面重点介绍<strong>实现</strong>，而<a href="/concepts/hot-module-replacement">概念页面</a>提供了更多关于它的工作原理以及为什么它有用的细节。</p>\n<blockquote class="warning"><div class="tip-content"> <strong>HMR</strong> 不适用于生产环境，这意味着它应当只在开发环境使用。更多详细信息，请查看<a href="/guides/production">生产环境构建指南</a>。 </div></blockquote><h2 class="header"><a class="anchor" href="#-hmr" id="-hmr"></a><span class="text">启用 HMR</span><a class="icon-link" href="#-hmr"></a></h2>\n<p>启用此功能实际上相当简单。而我们要做的，就是更新 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 的配置，和使用 webpack 内置的 HMR 插件。我们还要删除掉 <code>print.js</code> 的入口起点，因为它现在正被 <code>index.js</code> 模式使用。</p>\n<blockquote class="tip"><div class="tip-content"> 如果你使用了 <code>webpack-dev-middleware</code> 而没有使用 <code>webpack-dev-server</code>，请使用 <a href="https://github.com/glenjamin/webpack-hot-middleware"><code>webpack-hot-middleware</code></a> package 包，以在你的自定义服务或应用程序上启用 HMR。 </div></blockquote><p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n<span class="token inserted">+ const webpack = require(\'webpack\');</span>\n\n  module.exports = {\n    entry: {\n<span class="token deleted">-      app: \'./src/index.js\',</span>\n<span class="token deleted">-      print: \'./src/print.js\'</span>\n<span class="token inserted">+      app: \'./src/index.js\'</span>\n    },\n    devtool: \'inline-source-map\',\n    devServer: {\n      contentBase: \'./dist\',\n<span class="token inserted">+     hot: true</span>\n    },\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Hot Module Replacement\'\n      }),\n<span class="token inserted">+     new webpack.NamedModulesPlugin(),</span>\n<span class="token inserted">+     new webpack.HotModuleReplacementPlugin()</span>\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 你可以通过命令来修改 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 的配置：<code>webpack-dev-server --hotOnly</code>。 </div></blockquote><p>注意，我们还添加了 <code>NamedModulesPlugin</code>，以便更容易查看要修补(patch)的依赖。在起步阶段，我们将通过在命令行中运行 <code>npm start</code> 来启动并运行 dev server。</p>\n<p>现在，我们来修改 <code>index.js</code> 文件，以便当 <code>print.js</code> 内部发生变更时可以告诉 webpack 接受更新的模块。</p>\n<p><strong>index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n  import printMe from \'./print.js\';\n\n  function component() {\n    var element = document.createElement(\'div\');\n    var btn = document.createElement(\'button\');\n\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    btn.innerHTML = \'Click me and check the console!\';\n    btn.onclick = printMe;\n\n    element.appendChild(btn);\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n+\n<span class="token inserted">+ if (module.hot) {</span>\n<span class="token inserted">+   module.hot.accept(\'./print.js\', function() {</span>\n<span class="token inserted">+     console.log(\'Accepting the updated printMe module!\');</span>\n<span class="token inserted">+     printMe();</span>\n<span class="token inserted">+   })</span>\n<span class="token inserted">+ }</span>\n</code></pre>\n<p>更改 <code>print.js</code> 中 <code>console.log</code> 的输出内容，你将会在浏览器中看到如下的输出。</p>\n<p><strong>print.js</strong></p>\n<pre><code class="lang-diff">  export default function printMe() {\n<span class="token deleted">-   console.log(\'I get called from print.js!\');</span>\n<span class="token inserted">+   console.log(\'Updating print.js...\')</span>\n  }\n</code></pre>\n<p><strong>console</strong></p>\n<pre><code class="lang-diff">[HMR] Waiting for update signal from WDS...\nmain.js:4395 [WDS] Hot Module Replacement enabled.\n<span class="token inserted">+ 2main.js:4395 [WDS] App updated. Recompiling...</span>\n<span class="token inserted">+ main.js:4395 [WDS] App hot update...</span>\n<span class="token inserted">+ main.js:4330 [HMR] Checking for updates on the server...</span>\n<span class="token inserted">+ main.js:10024 Accepting the updated printMe module!</span>\n<span class="token inserted">+ 0.4b8ee77….hot-update.js:10 Updating print.js...</span>\n<span class="token inserted">+ main.js:4330 [HMR] Updated modules:</span>\n<span class="token inserted">+ main.js:4330 [HMR]  - 20</span>\n<span class="token inserted">+ main.js:4330 [HMR] Consider using the NamedModulesPlugin for module names.</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-node-js-api" id="-node-js-api"></a><span class="text">通过 Node.js API</span><a class="icon-link" href="#-node-js-api"></a></h2>\n<p>当使用 webpack dev server 和 Node.js API 时，不要将 dev server 选项放在 webpack 配置对象(webpack config object)中。而是，在创建选项时，将其作为第二个参数传递。例如：</p>\n<p><code>new WebpackDevServer(compiler, options)</code></p>\n<p>想要启用 HMR，还需要修改 webpack 配置对象，使其包含 HMR 入口起点。<code>webpack-dev-server</code> package 中具有一个叫做 <code>addDevServerEntrypoints</code> 的方法，你可以通过使用这个方法来实现。这是关于如何使用的一个小例子：</p>\n<p><strong>dev-server.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> webpackDevServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-dev-server\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  contentBase<span class="token punctuation">:</span> <span class="token string">\'./dist\'</span><span class="token punctuation">,</span>\n  hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  host<span class="token punctuation">:</span> <span class="token string">\'localhost\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nwebpackDevServer<span class="token punctuation">.</span><span class="token function">addDevServerEntrypoints</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">webpackDevServer</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'dev server listening on port 5000\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> If you&#39;re <a href="/guides/development#using-webpack-dev-middleware">using <code>webpack-dev-middleware</code></a>, check out the <a href="https://github.com/glenjamin/webpack-hot-middleware"><code>webpack-hot-middleware</code></a> package to enable HMR on your custom dev server. </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">问题</span><a class="icon-link" href="#-"></a></h2>\n<p>模块热替换可能比较难掌握。为了说明这一点，我们回到刚才的示例中。如果你继续点击示例页面上的按钮，你会发现控制台仍在打印这旧的 <code>printMe</code> 功能。</p>\n<p>这是因为按钮的 <code>onclick</code> 事件仍然绑定在旧的 <code>printMe</code> 函数上。</p>\n<p>为了让它与 HRM 正常工作，我们需要使用 <code>module.hot.accept</code> 更新绑定到新的 <code>printMe</code> 函数上：</p>\n<p><strong>index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n  import printMe from \'./print.js\';\n\n  function component() {\n    var element = document.createElement(\'div\');\n    var btn = document.createElement(\'button\');\n\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    btn.innerHTML = \'Click me and check the console!\';\n    btn.onclick = printMe;  // onclick 事件绑定原始的 printMe 函数上\n\n    element.appendChild(btn);\n\n    return element;\n  }\n\n<span class="token deleted">- document.body.appendChild(component());</span>\n<span class="token inserted">+ let element = component(); // 当 print.js 改变导致页面重新渲染时，重新获取渲染的元素</span>\n<span class="token inserted">+ document.body.appendChild(element);</span>\n\n  if (module.hot) {\n    module.hot.accept(\'./print.js\', function() {\n      console.log(\'Accepting the updated printMe module!\');\n<span class="token deleted">-     printMe();</span>\n<span class="token inserted">+     document.body.removeChild(element);</span>\n<span class="token inserted">+     element = component(); // 重新渲染页面后，component 更新 click 事件处理</span>\n<span class="token inserted">+     document.body.appendChild(element);</span>\n    })\n  }\n</code></pre>\n<p>这只是一个例子，但还有很多其他地方可以轻松地让人犯错。幸运的是，存在很多 loader（其中一些在下面提到），使得模块热替换的过程变得更容易。</p>\n<h2 class="header"><a class="anchor" href="#hmr-" id="hmr-"></a><span class="text">HMR 修改样式表</span><a class="icon-link" href="#hmr-"></a></h2>\n<p>借助于 <code>style-loader</code> 的帮助，CSS 的模块热替换实际上是相当简单的。当更新 CSS 依赖模块时，此 loader 在后台使用 <code>module.hot.accept</code> 来修补(patch) <code>&lt;style&gt;</code> 标签。</p>\n<p>所以，可以使用以下命令安装两个 loader ：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev style-loader css-loader\n</code></pre>\n<p>接下来我们来更新 webpack 的配置，让这两个 loader 生效。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const webpack = require(\'webpack\');\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\'\n    },\n    devtool: \'inline-source-map\',\n    devServer: {\n      contentBase: \'./dist\',\n      hot: true\n    },\n<span class="token inserted">+   module: {</span>\n<span class="token inserted">+     rules: [</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.css$/,</span>\n<span class="token inserted">+         use: [\'style-loader\', \'css-loader\']</span>\n<span class="token inserted">+       }</span>\n<span class="token inserted">+     ]</span>\n<span class="token inserted">+   },</span>\n    plugins: [\n      new CleanWebpackPlugin([\'dist\'])\n      new HtmlWebpackPlugin({\n        title: \'Hot Module Replacement\'\n      }),\n      new webpack.HotModuleReplacementPlugin()\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>热加载样式表，与将其导入模块一样简单：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  | - package.json\n  | - webpack.config.js\n  | - /dist\n    | - bundle.js\n  | - /src\n    | - index.js\n    | - print.js\n<span class="token inserted">+   | - styles.css</span>\n</code></pre>\n<p><strong>styles.css</strong></p>\n<pre><code class="lang-css"><span class="token selector">body </span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n  import printMe from \'./print.js\';\n<span class="token inserted">+ import \'./styles.css\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n    var btn = document.createElement(\'button\');\n\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    btn.innerHTML = \'Click me and check the console!\';\n    btn.onclick = printMe;  // onclick event is bind to the original printMe function\n\n    element.appendChild(btn);\n\n    return element;\n  }\n\n  let element = component();\n  document.body.appendChild(element);\n\n  if (module.hot) {\n    module.hot.accept(\'./print.js\', function() {\n      console.log(\'Accepting the updated printMe module!\');\n      document.body.removeChild(element);\n      element = component(); // Re-render the "component" to update the click handler\n      document.body.appendChild(element);\n    })\n  }\n</code></pre>\n<p>将 <code>body</code> 上的样式修改为 <code>background: red;</code>，你应该可以立即看到页面的背景颜色随之更改，而无需完全刷新。</p>\n<p><strong>styles.css</strong></p>\n<pre><code class="lang-diff">  body {\n<span class="token deleted">-   background: blue;</span>\n<span class="token inserted">+   background: red;</span>\n  }\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">其他代码和框架</span><a class="icon-link" href="#-"></a></h2>\n<p>社区还有许多其他 loader 和示例，可以使 HMR 与各种框架和库(library)平滑地进行交互……</p>\n<ul>\n<li><a href="https://github.com/gaearon/react-hot-loader">React Hot Loader</a>：实时调整 react 组件。</li>\n<li><a href="https://github.com/vuejs/vue-loader">Vue Loader</a>：此 loader 支持用于 vue 组件的 HMR，提供开箱即用体验。</li>\n<li><a href="https://github.com/fluxxu/elm-hot-loader">Elm Hot Loader</a>：支持用于 Elm 程序语言的 HMR。</li>\n<li><a href="https://survivejs.com/webpack/appendices/hmr-with-react/#configuring-hmr-with-redux">Redux HMR</a>：无需 loader 或插件！只需对 main store 文件进行简单的修改。</li>\n<li><a href="https://github.com/AngularClass/angular-hmr">Angular HMR</a>：No loader necessary! A simple change to your main NgModule file is all that&#39;s required to have full control over the HMR APIs.没有必要使用 loader！只需对主要的 NgModule 文件进行简单的修改，由 HMR API 完全控制。</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> 如果你知道任何其他 loader 或插件，能够有助于或增强模块热替换(Hot Module Replacement)，请提交一个 pull request 以添加到此列表中！ </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/hot-module-replacement/">https://webpack.js.org/guides/hot-module-replacement/</a></p>\n</blockquote>\n',title:"模块热替换"},title:"模块热替换",url:"/guides/hot-module-replacement/"},{file:{attributes:{title:"Tree Shaking",sort:7,contributors:["MijaelWatts","alexjoverm","avant1","dmitriid","simon04","zacanger"],related:[{title:"Tree shaking with webpack 2, TypeScript and Babel",url:"https://alexjoverm.github.io/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/"},{title:"Tree-shaking with webpack 2 and Babel 6",url:"http://www.2ality.com/2015/12/webpack-tree-shaking.html"},{title:"webpack 2 Tree Shaking Configuration",url:"https://medium.com/modus-create-front-end-development/webpack-2-tree-shaking-configuration-9f1de90f3233#.15tuaw71x"},{title:"Issue 2867",url:"https://github.com/webpack/webpack/issues/2867"},{title:"Issue 4784",url:"https://github.com/webpack/webpack/issues/4784"}],group:"-",anchors:[{title:"添加一个通用模块",id:"-"},{title:"精简输出",id:"-"},{title:"警告",id:"-"},{title:"结论",id:"-"}]},body:'<p><em>tree shaking</em> 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)。它依赖于 ES2015 模块系统中的<a href="http://exploringjs.com/es6/ch_modules.html#static-module-structure">静态结构特性</a>，例如 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"><code>import</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"><code>export</code></a>。这个术语和概念实际上是兴起于 ES2015 模块打包工具 <a href="https://github.com/rollup/rollup">rollup</a>。</p>\n<p>webpack 2 内置支持 ES2015 模块（别名 <em>harmony modules</em>），并能检测出未使用的模块导出。</p>\n<blockquote class="tip"><div class="tip-content"> 本指南的继承自<a href="/guides/getting-started">起步指南</a>。如果你尚未阅读该指南，请先行阅读。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">添加一个通用模块</span><a class="icon-link" href="#-"></a></h2>\n<p>在我们的项目中添加一个新的通用模块文件 <code>src/math.js</code>，此文件导出两个函数：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n  |- bundle.js\n  |- index.html\n|- /src\n  |- index.js\n  |- math.js\n|- /node_modules\n</code></pre>\n<p><strong>src/math.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cube</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>接着，更新入口脚本，使用其中一个新方法，并且为了简单，将 <code>lodash</code> 删除：</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token deleted">- import _ from \'lodash\';</span>\n<span class="token inserted">+ import { cube } from \'./math.js\';</span>\n\n  function component() {\n<span class="token deleted">-   var element = document.createElement(\'div\');</span>\n<span class="token inserted">+   var element = document.createElement(\'pre\');</span>\n\n<span class="token deleted">-   // lodash 是由当前 script 脚本 import 导入进来的</span>\n<span class="token deleted">-   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');</span>\n<span class="token inserted">+   element.innerHTML = [</span>\n<span class="token inserted">+     \'Hello webpack!\',</span>\n<span class="token inserted">+     \'5 cubed is equal to \' + cube(5)</span>\n<span class="token inserted">+   ].join(\'\\n\\n\');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>注意，我们<strong>并未从 <code>src/math.js</code> 模块中 <code>import</code> 导入 <code>square</code> 方法</strong>。这个功能是所谓的“未引用代码(dead code)”，也就是说，应该删除掉未被引用的 <code>export</code>。现在让我们运行我们的npm 脚本 <code>npm run build</code>，并检查输出的 bundle：</p>\n<p><strong>dist/bundle.js (around lines 90 - 100)</strong></p>\n<pre><code class="lang-js"><span class="token comment">/* 1 */</span>\n<span class="token comment">/***/</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token string">"use strict"</span><span class="token punctuation">;</span>\n<span class="token comment">/* unused harmony export square */</span>\n<span class="token comment">/* harmony export (immutable) */</span> __webpack_exports__<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> cube<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">cube</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>注意，上面的 <code>unused harmony export square</code> 注释。如果你看下面的代码，你会注意到 <code>square</code> 没有被导出，但是，它仍然被包含在 bundle 中。我们将在下一节中解决这个问题。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">精简输出</span><a class="icon-link" href="#-"></a></h2>\n<p>我们已经通过 <code>import</code> and <code>export</code> 语法，标识出了那些“未引用代码(dead code)”，但是我们仍然需要从 bundle 中删除它们。要做到这一点，我们将添加一个能够删除未引用代码(dead code)的压缩工具(minifier) -  <a href="/plugins/uglifyjs-webpack-plugin"><code>UglifyJSPlugin</code></a> - 在配置对象中添加……</p>\n<p>我们先来安装它：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev uglifyjs-webpack-plugin\n</code></pre>\n<p>然后将其添加到我们的配置中：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">const path = require(\'path\');\n<span class="token inserted">+ const UglifyJSPlugin = require(\'uglifyjs-webpack-plugin\');</span>\n\nmodule.exports = {\n  entry: \'./src/index.js\',\n  output: {\n    filename: \'bundle.js\',\n    path: path.resolve(__dirname, \'dist\')\n<span class="token deleted">- }</span>\n<span class="token inserted">+ },</span>\n<span class="token inserted">+ plugins: [</span>\n<span class="token inserted">+   new UglifyJSPlugin()</span>\n<span class="token inserted">+ ]</span>\n};\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 注意，也可以在命令行接口中使用 <code>--optimize-minimize</code> 标记，来使用 <code>UglifyJsPlugin</code>。 </div></blockquote><p>准备就绪后，然后运行另一个命令 <code>npm run build</code>，看看输出结果有没有发生改变。</p>\n<p>你发现 <code>dist/bundle.js</code> 中的差异了吗？显然，现在整个 bundle 都已经被精简过，但是如果仔细观察，则不会看到 <code>square</code> 函数被引入，但会看到 <code>cube</code> 函数的修改版本（<code>function r(e){return e*e*e}n.a=r</code>）。现在，随着 tree shaking 和代码压缩，我们的 bundle 减小几个字节！虽然，在这个特定示例中，可能看起来没有减少很多，但是，在具有复杂的依赖树的大型应用程序上运行时，tree shaking 或许会对 bundle 产生显著的体积优化。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">警告</span><a class="icon-link" href="#-"></a></h2>\n<p>请注意，webpack 本身并不会执行 tree-shaking。它需要依赖于像 <a href="/plugins/uglifyjs-webpack-plugin/">UglifyJS</a> 这样的第三方工具来执行实际的未引用代码(dead code)删除工作。有些情况下，tree-shaking 可能不会生效。例如，考虑以下模块：</p>\n<p><strong>transforms.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> mylib <span class="token keyword">from</span> <span class="token string">\'mylib\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> someVar <span class="token operator">=</span> mylib<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> someOtherVar <span class="token operator">=</span> mylib<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>index.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> someVar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./transforms.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用 `someVar`...</span>\n</code></pre>\n<p>在上面的代码中，webpack 不能确定是否调用 <code>mylib.transform</code> 会引发任何副作用(side-effects)。因此，为保险起见，将在 bundle 代码中保留 <code>someOtherVar</code>。</p>\n<p>一般来说，当一个工具不能保证某些特定的代码路径(path)不会导致副作用(side-effects)时，即使你确信它不应该存在生成的 bundle 中，但这个代码仍然会保留。常见的情况有：从第三方模块中调用一个函数，webpack 和/或 压缩工具(minifier)无法检查此模块；从第三方模块导入的函数被重新导出，等等。</p>\n<p>本指南中使用的代码假设你使用 UglifyJS 插件来执行 tree-shaking。然而，还有其他工具，如 <a href="https://github.com/erikdesjardins/webpack-rollup-loader">webpack-rollup-loader</a> 或 <a href="/plugins/babel-minify-webpack-plugin">Babel Minify Webpack Plugin</a>，根据你的设置它们可能产生不同的结果。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">结论</span><a class="icon-link" href="#-"></a></h2>\n<p>为了学会使用 <em>tree shaking</em>，你必须……</p>\n<ul>\n<li>使用 ES2015 模块语法（即 <code>import</code> 和 <code>export</code>）。</li>\n<li>引入一个能够删除未引用代码(dead code)的压缩工具(minifier)（例如 <code>UglifyJSPlugin</code>）。</li>\n</ul>\n<p>你可以将应用程序想象成一棵树。绿色表示实际用到的源码和 library，是树上活的树叶。灰色表示无用的代码，是秋天树上枯萎的树叶。为了除去死去的树叶，你必须摇动这棵树，使它们落下。</p>\n<p>如果你对优化输出很感兴趣的话，请进入到下一个指南，来了解<a href="/guides/production">生产环境</a>中进行构建的详细细节。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/tree-shaking/">https://webpack.js.org/guides/tree-shaking/</a></p>\n</blockquote>\n',title:"Tree Shaking"},title:"Tree Shaking",url:"/guides/tree-shaking/"},{file:{attributes:{title:"生产环境构建",sort:8,contributors:["bring2dip","chrisVillanueva","henriquea","kelset","kisnows","markerikson","rajagopal4890","redian","simon04","skipjack","swapnilmishra","xgirma","xgqfrms"],group:"-",anchors:[{title:"配置",id:"-"},{title:"NPM Scripts",id:"npm-scripts"},{title:"Minification",id:"minification"},{title:"source map",id:"source-map"},{title:"指定环境",id:"-"},{title:"Split CSS",id:"split-css"},{title:"CLI 替代选项",id:"cli-"}],related:[]},body:'<p>在本指南中，我们将深入一些最佳实践，并且使用工具，将网站或应用程序构建到生产环境中。</p>\n<blockquote class="tip"><div class="tip-content"> 以下示例来源于 <a href="/guides/tree-shaking">tree shaking</a> 和 <a href="/guides/development">开发</a>。在继续之前，请确保你已经熟悉这些指南中所介绍的概念/配置。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">配置</span><a class="icon-link" href="#-"></a></h2>\n<p><em>开发环境(development)</em>和<em>生产环境(production)</em>的构建目标差异很大。在<em>开发环境</em>中，我们需要具有强大的、具有实时重新加载(live reloading)或热模块替换(hot module replacement)能力的 source map 和 localhost server。而在<em>生产环境</em>中，我们的目标则转向于关注更小的 bundle，更轻量的 source map，以及更优化的资源，以改善加载时间。由于要遵循逻辑分离，我们通常建议为每个环境编写<strong>彼此独立的 webpack 配置</strong>。</p>\n<p>虽然，以上我们将<em>生产环境</em>和<em>开发环境</em>做了略微区分，但是，请注意，我们还是会遵循不重复原则(Don&#39;t repeat yourself - DRY)，保留一个“通用”配置。为了将这些配置合并在一起，我们将使用一个名为 <a href="https://github.com/survivejs/webpack-merge"><code>webpack-merge</code></a> 的工具。通过“通用”配置，我们不必在环境特定(environment-specific)的配置中重复代码。</p>\n<p>我们先从安装 <code>webpack-merge</code> 开始，并将之前指南中已经成型的那些代码再次进行分离：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack-merge\n</code></pre>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n<span class="token deleted">- |- webpack.config.js</span>\n<span class="token inserted">+ |- webpack.common.js</span>\n<span class="token inserted">+ |- webpack.dev.js</span>\n<span class="token inserted">+ |- webpack.prod.js</span>\n  |- /dist\n  |- /src\n    |- index.js\n    |- math.js\n  |- /node_modules\n</code></pre>\n<p><strong>webpack.common.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ const path = require(\'path\');</span>\n<span class="token inserted">+ const CleanWebpackPlugin = require(\'clean-webpack-plugin\');</span>\n<span class="token inserted">+ const HtmlWebpackPlugin = require(\'html-webpack-plugin\');</span>\n+\n<span class="token inserted">+ module.exports = {</span>\n<span class="token inserted">+   entry: {</span>\n<span class="token inserted">+     app: \'./src/index.js\'</span>\n<span class="token inserted">+   },</span>\n<span class="token inserted">+   plugins: [</span>\n<span class="token inserted">+     new CleanWebpackPlugin([\'dist\']),</span>\n<span class="token inserted">+     new HtmlWebpackPlugin({</span>\n<span class="token inserted">+       title: \'Production\'</span>\n<span class="token inserted">+     })</span>\n<span class="token inserted">+   ],</span>\n<span class="token inserted">+   output: {</span>\n<span class="token inserted">+     filename: \'[name].bundle.js\',</span>\n<span class="token inserted">+     path: path.resolve(__dirname, \'dist\')</span>\n<span class="token inserted">+   }</span>\n<span class="token inserted">+ };</span>\n</code></pre>\n<p><strong>webpack.dev.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ const merge = require(\'webpack-merge\');</span>\n<span class="token inserted">+ const common = require(\'./webpack.common.js\');</span>\n+\n<span class="token inserted">+ module.exports = merge(common, {</span>\n<span class="token inserted">+   devtool: \'inline-source-map\',</span>\n<span class="token inserted">+   devServer: {</span>\n<span class="token inserted">+     contentBase: \'./dist\'</span>\n<span class="token inserted">+   }</span>\n<span class="token inserted">+ });</span>\n</code></pre>\n<p><strong>webpack.prod.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ const merge = require(\'webpack-merge\');</span>\n<span class="token inserted">+ const UglifyJSPlugin = require(\'uglifyjs-webpack-plugin\');</span>\n<span class="token inserted">+ const common = require(\'./webpack.common.js\');</span>\n+\n<span class="token inserted">+ module.exports = merge(common, {</span>\n<span class="token inserted">+   plugins: [</span>\n<span class="token inserted">+     new UglifyJSPlugin()</span>\n<span class="token inserted">+   ]</span>\n<span class="token inserted">+ });</span>\n</code></pre>\n<p>现在，在 <code>webpack.common.js</code> 中，我们设置了 <code>entry</code> 和 <code>output</code> 配置，并且在其中引入这两个环境公用的全部插件。在 <code>webpack.dev.js</code> 中，我们为此环境添加了推荐的 <code>devtool</code>（强大的 source map）和简单的 <code>devServer</code> 配置。最后，在 <code>webpack.prod.js</code> 中，我们引入了之前在 <a href="/guides/tree-shaking">tree shaking</a> 指南中介绍过的 <code>UglifyJSPlugin</code>。</p>\n<p>注意，在环境特定的配置中使用 <code>merge()</code> 很容易地包含我们在 <code>dev</code> 和 <code>prod</code> 中的常见配置。<code>webpack-merge</code> 工具提供了多种合并(merge)的高级功能，但是在我们的用例中，无需用到这些功能。</p>\n<h2 class="header"><a class="anchor" href="#npm-scripts" id="npm-scripts"></a><span class="text">NPM Scripts</span><a class="icon-link" href="#npm-scripts"></a></h2>\n<p>现在，我们把 <code>scripts</code> 重新指向到新配置。我们将 <code>npm start</code> 定义为<em>开发环境</em>脚本，并在其中使用 <code>webpack-dev-server</code>，将 <code>npm run build</code> 定义为<em>生产环境</em>脚本：</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-diff">  {\n    "name": "development",\n    "version": "1.0.0",\n    "description": "",\n    "main": "webpack.config.js",\n    "scripts": {\n<span class="token deleted">-     "start": "webpack-dev-server --open",</span>\n<span class="token inserted">+     "start": "webpack-dev-server --open --config webpack.dev.js",</span>\n<span class="token deleted">-     "build": "webpack"</span>\n<span class="token inserted">+     "build": "webpack --config webpack.prod.js"</span>\n    },\n    "keywords": [],\n    "author": "",\n    "license": "ISC",\n    "devDependencies": {\n      "clean-webpack-plugin": "^0.1.17",\n      "css-loader": "^0.28.4",\n      "csv-loader": "^2.1.1",\n      "express": "^4.15.3",\n      "file-loader": "^0.11.2",\n      "html-webpack-plugin": "^2.29.0",\n      "style-loader": "^0.18.2",\n      "webpack": "^3.0.0",\n      "webpack-dev-middleware": "^1.12.0",\n      "webpack-dev-server": "^2.9.1",\n      "webpack-merge": "^4.1.0",\n      "xml-loader": "^1.2.1"\n    }\n  }\n</code></pre>\n<p>随意运行这些脚本，然后查看输出结果的变化，然后我们继续添加一些<em>生产环境</em>配置。</p>\n<h2 class="header"><a class="anchor" href="#minification" id="minification"></a><span class="text">Minification</span><a class="icon-link" href="#minification"></a></h2>\n<p>注意，虽然 <a href="/plugins/uglifyjs-webpack-plugin"><code>UglifyJSPlugin</code></a> 是代码压缩方面比较好的选择，但是还有一些其他可选择项。以下有几个同样很受欢迎的插件：</p>\n<ul>\n<li><a href="https://github.com/webpack-contrib/babel-minify-webpack-plugin"><code>BabelMinifyWebpackPlugin</code></a></li>\n<li><a href="https://github.com/roman01la/webpack-closure-compiler"><code>ClosureCompilerPlugin</code></a></li>\n</ul>\n<p>如果决定尝试以上这些，只要确保新插件也会按照 <a href="/guides/tree-shaking">tree shake</a> 指南中所陈述的，具有删除未引用代码(dead code)的能力足矣。</p>\n<h2 class="header"><a class="anchor" href="#source-map" id="source-map"></a><span class="text">source map</span><a class="icon-link" href="#source-map"></a></h2>\n<p>我们鼓励你在生产环境中启用 source map，因为它们对调试源码(debug)和运行基准测试(benchmark tests)很有帮助。虽然有如此强大的功能，然而还是应该针对生成环境用途，选择一个构建快速的推荐配置（具体细节请查看 <a href="/configuration/devtool"><code>devtool</code></a>）。对于本指南，我们将在<em>生产环境</em>中使用 <code>source-map</code> 选项，而不是我们在<em>开发环境</em>中用到的 <code>inline-source-map</code>：</p>\n<p><strong>webpack.prod.js</strong></p>\n<pre><code class="lang-diff">  const merge = require(\'webpack-merge\');\n  const UglifyJSPlugin = require(\'uglifyjs-webpack-plugin\');\n  const common = require(\'./webpack.common.js\');\n\n  module.exports = merge(common, {\n<span class="token inserted">+   devtool: \'source-map\',</span>\n    plugins: [\n<span class="token deleted">-     new UglifyJSPlugin()</span>\n<span class="token inserted">+     new UglifyJSPlugin({</span>\n<span class="token inserted">+       sourceMap: true</span>\n<span class="token inserted">+     })</span>\n    ]\n  })\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 避免在生产中使用 <code>inline-***</code> 和 <code>eval-***</code>，因为它们可以增加 bundle 大小，并降低整体性能。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">指定环境</span><a class="icon-link" href="#-"></a></h2>\n<p>许多 library 将通过与 <code>process.env.NODE_ENV</code> 环境变量关联，以决定 library 中应该引用哪些内容。例如，当不处于<em>生产环境</em>中时，某些 library 为了使调试变得容易，可能会添加额外的日志记录(log)和测试(test)。其实，当使用 <code>process.env.NODE_ENV === &#39;production&#39;</code> 时，一些 library 可能针对具体用户的环境进行代码优化，从而删除或添加一些重要代码。我们可以使用 webpack 内置的 <a href="/plugins/define-plugin"><code>DefinePlugin</code></a> 为所有的依赖定义这个变量：</p>\n<p><strong>webpack.prod.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ const webpack = require(\'webpack\');</span>\n  const merge = require(\'webpack-merge\');\n  const UglifyJSPlugin = require(\'uglifyjs-webpack-plugin\');\n  const common = require(\'./webpack.common.js\');\n\n  module.exports = merge(common, {\n    devtool: \'source-map\',\n    plugins: [\n      new UglifyJSPlugin({\n        sourceMap: true\n      }),\n<span class="token inserted">+     new webpack.DefinePlugin({</span>\n<span class="token inserted">+       \'process.env.NODE_ENV\': JSON.stringify(\'production\')</span>\n<span class="token inserted">+     })</span>\n    ]\n  })\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 技术上讲，<code>NODE_ENV</code> 是一个由 Node.js 暴露给执行脚本的系统环境变量。通常用于决定在开发环境与生产环境(dev-vs-prod)下，服务器工具、构建脚本和客户端 library 的行为。然而，与预期不同的是，无法在构建脚本 <code>webpack.config.js</code> 中，将 <code>process.env.NODE_ENV</code> 设置为 <code>&quot;production&quot;</code>，请查看 <a href="https://github.com/webpack/webpack/issues/2537">#2537</a>。因此，例如 <code>process.env.NODE_ENV === &#39;production&#39; ? &#39;[name].[hash].bundle.js&#39; : &#39;[name].bundle.js&#39;</code> 这样的条件语句，在 webpack 配置文件中，无法按照预期运行。 </div></blockquote><p>如果你正在使用像 <a href="https://facebook.github.io/react/"><code>react</code></a> 这样的 library，那么在添加此 DefinePlugin 插件后，你应该看到 bundle 大小显著下降。还要注意，任何位于 <code>/src</code> 的本地代码都可以关联到 process.env.NODE_ENV 环境变量，所以以下检查也是有效的：</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import { cube } from \'./math.js\';\n+\n<span class="token inserted">+ if (process.env.NODE_ENV !== \'production\') {</span>\n<span class="token inserted">+   console.log(\'Looks like we are in development mode!\');</span>\n<span class="token inserted">+ }</span>\n\n  function component() {\n    var element = document.createElement(\'pre\');\n\n    element.innerHTML = [\n      \'Hello webpack!\',\n      \'5 cubed is equal to \' + cube(5)\n    ].join(\'\\n\\n\');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<h2 class="header"><a class="anchor" href="#split-css" id="split-css"></a><span class="text">Split CSS</span><a class="icon-link" href="#split-css"></a></h2>\n<p>正如在<strong>管理资源</strong>中最后的 <a href="/guides/asset-management#loading-css">加载 CSS</a> 小节中所提到的，通常最好的做法是使用 <code>ExtractTextPlugin</code> 将 CSS 分离成单独的文件。在插件<a href="/plugins/extract-text-webpack-plugin">文档</a>中有一些很好的实现例子。<code>disable</code> 选项可以和 <code>--env</code> 标记结合使用，以允许在开发中进行内联加载，推荐用于热模块替换和构建速度。</p>\n<h2 class="header"><a class="anchor" href="#cli-" id="cli-"></a><span class="text">CLI 替代选项</span><a class="icon-link" href="#cli-"></a></h2>\n<p>以上描述也可以通过命令行实现。例如，<code>--optimize-minimize</code> 标记将在后台引用 <code>UglifyJSPlugin</code>。和以上描述的 <code>DefinePlugin</code> 实例相同，<code>--define process.env.NODE_ENV=&quot;&#39;production&#39;&quot;</code> 也会做同样的事情。并且，<code>webpack -p</code> 将自动地调用上述这些标记，从而调用需要引入的插件。</p>\n<p>这些简便方式虽然都很不错，但是我们通常建议只使用配置方式，因为在这两种场景中下，配置方式能够更好地帮助你了解自己正在做的事情。配置方式还可以让你更方便地控制这两个插件中的其他选项。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/production/">https://webpack.js.org/guides/production/</a></p>\n</blockquote>\n',title:"生产环境构建"},title:"生产环境构建",url:"/guides/production/"},{file:{attributes:{title:"代码分离",sort:9,contributors:["TheDutchCoder","bartushek","chrisVillanueva","jakearchibald","johnstew","jonwheeler","levy9527","pastelsky","pksjce","rafde","rahulcs","rouzbeh84","shaodahong","shaunwallace","shinxi","simon04","skipjack","sudarsangp","tomtasche"],group:"-",anchors:[{title:"入口起点(entry points)",id:"-entry-points-"},{title:"防止重复(prevent duplication)",id:"-prevent-duplication-"},{title:"动态导入(dynamic imports)",id:"-dynamic-imports-"},{title:"bundle 分析(bundle analysis)",id:"bundle-bundle-analysis-"},{title:"下一步",id:"-"}],related:[]},body:'<blockquote class="tip"><div class="tip-content"> 本指南继续沿用<a href="/guides/getting-started">起步</a>和<a href="/guides/output-management">管理输出</a>中的代码示例。。请确保你至少已熟悉其中提供的示例。 </div></blockquote><p>代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。</p>\n<p>有三种常用的代码分离方法：</p>\n<ul>\n<li>入口起点：使用 <a href="/configuration/entry-context"><code>entry</code></a> 配置手动地分离代码。</li>\n<li>防止重复：使用 <a href="/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a> 去重和分离 chunk。</li>\n<li>动态导入：通过模块的内联函数调用来分离代码。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#-entry-points-" id="-entry-points-"></a><span class="text">入口起点(entry points)</span><a class="icon-link" href="#-entry-points-"></a></h2>\n<p>这是迄今为止最简单、最直观的分离代码的方式。不过，这种方式手动配置较多，并有一些陷阱，我们将会解决这些问题。先来看看如何从 main bundle 中分离另一个模块：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n<span class="token inserted">+ |- another-module.js</span>\n|- /node_modules\n</code></pre>\n<p><strong>another-module.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  _<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'Another\'</span><span class="token punctuation">,</span> <span class="token string">\'module\'</span><span class="token punctuation">,</span> <span class="token string">\'loaded!\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\' \'</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> HTMLWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    index<span class="token punctuation">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n    another<span class="token punctuation">:</span> <span class="token string">\'./src/another-module.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HTMLWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      title<span class="token punctuation">:</span> <span class="token string">\'Code Splitting\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'[name].bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>这将生成如下构建结果：</p>\n<pre><code class="lang-bash">Hash: 309402710a14167f42a8\nVersion: webpack 2.6.1\nTime: 570ms\n            Asset    Size  Chunks                    Chunk Names\n  index.bundle.js  544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  index\nanother.bundle.js  544 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  another\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./src/another-module.js 87 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./src/index.js 216 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>正如前面提到的，这种方法存在一些问题:</p>\n<ul>\n<li>如果入口 chunks 之间包含重复的模块，那些重复模块都会被引入到各个 bundle 中。</li>\n<li>这种方法不够灵活，并且不能将核心应用程序逻辑进行动态拆分代码。</li>\n</ul>\n<p>以上两点中，第一点对我们的示例来说无疑是个问题，因为之前我们在 <code>./src/index.js</code> 中也引入过 <code>lodash</code>，这样就在两个 bundle 中造成重复引用。接着，我们通过使用 <code>CommonsChunkPlugin</code> 来移除重复的模块。</p>\n<h2 class="header"><a class="anchor" href="#-prevent-duplication-" id="-prevent-duplication-"></a><span class="text">防止重复(prevent duplication)</span><a class="icon-link" href="#-prevent-duplication-"></a></h2>\n<p><a href="/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a> 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk。让我们使用这个插件，将之前的示例中重复的 <code>lodash</code> 模块去除：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n<span class="token inserted">+ const webpack = require(\'webpack\');</span>\n  const HTMLWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n      index: \'./src/index.js\',\n      another: \'./src/another-module.js\'\n    },\n    plugins: [\n      new HTMLWebpackPlugin({\n        title: \'Code Splitting\'\n<span class="token deleted">-     })</span>\n<span class="token inserted">+     }),</span>\n<span class="token inserted">+     new webpack.optimize.CommonsChunkPlugin({</span>\n<span class="token inserted">+       name: \'common\' // 指定公共 bundle 的名称。</span>\n<span class="token inserted">+     })</span>\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>这里我们使用 <a href="/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a> 之后，现在应该可以看出，<code>index.bundle.js</code> 中已经移除了重复的依赖模块。需要注意的是，CommonsChunkPlugin 插件将 <code>lodash</code> 分离到单独的 chunk，并且将其从 main bundle 中移除，减轻了大小。执行 <code>npm run build</code> 查看效果：</p>\n<pre><code class="lang-bash">Hash: 70a59f8d46ff12575481\nVersion: webpack 2.6.1\nTime: 510ms\n            Asset       Size  Chunks                    Chunk Names\n  index.bundle.js  665 bytes       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         index\nanother.bundle.js  537 bytes       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         another\n common.bundle.js     547 kB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  common\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>2<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>2<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>2<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./src/another-module.js 87 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./src/index.js 216 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>以下是由社区提供的，一些对于代码分离很有帮助的插件和 loaders：</p>\n<ul>\n<li><a href="/plugins/extract-text-webpack-plugin"><code>ExtractTextPlugin</code></a>: 用于将 CSS 从主应用程序中分离。</li>\n<li><a href="/loaders/bundle-loader"><code>bundle-loader</code></a>: 用于分离代码和延迟加载生成的 bundle。</li>\n<li><a href="https://github.com/gaearon/promise-loader"><code>promise-loader</code></a>: 类似于 <code>bundle-loader</code> ，但是使用的是 promises。</li>\n</ul>\n<p><a href="/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a> 插件还可以通过使用<a href="/plugins/commons-chunk-plugin/#explicit-vendor-chunk">显式的 vendor chunks</a> 功能，从应用程序代码中分离 vendor 模块。</p>\n<h2 class="header"><a class="anchor" href="#-dynamic-imports-" id="-dynamic-imports-"></a><span class="text">动态导入(dynamic imports)</span><a class="icon-link" href="#-dynamic-imports-"></a></h2>\n<p>当涉及到动态代码拆分时，webpack 提供了两个类似的技术。对于动态导入，第一种，也是优先选择的方式是，使用符合 <a href="https://github.com/tc39/proposal-dynamic-import">ECMAScript 提案</a> 的 <a href="/api/module-methods#import-"><code>import()</code> 语法</a>。第二种，则是使用 webpack 特定的 <a href="/api/module-methods#require-ensure"><code>require.ensure</code></a>。让我们先尝试使用第一种……</p>\n<blockquote class="warning"><div class="tip-content"> <code>import()</code> 调用会在内部用到 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">promises</a>。如果在旧有版本浏览器中使用 <code>import()</code>，记得使用 一个 polyfill 库（例如 <a href="https://github.com/stefanpenner/es6-promise">es6-promise</a> 或 <a href="https://github.com/taylorhakes/promise-polyfill">promise-polyfill</a>），来 shim <code>Promise</code>。 </div></blockquote><p>在我们开始本节之前，先从配置中移除掉多余的 <a href="/concepts/entry-points/"><code>entry</code></a> 和 <a href="/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a>，因为接下来的演示中并不需要它们：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n<span class="token deleted">- const webpack = require(\'webpack\');</span>\n  const HTMLWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n<span class="token inserted">+     index: \'./src/index.js\'</span>\n<span class="token deleted">-     index: \'./src/index.js\',</span>\n<span class="token deleted">-     another: \'./src/another-module.js\'</span>\n    },\n    plugins: [\n      new HTMLWebpackPlugin({\n        title: \'Code Splitting\'\n<span class="token deleted">-     }),</span>\n<span class="token inserted">+     })</span>\n<span class="token deleted">-     new webpack.optimize.CommonsChunkPlugin({</span>\n<span class="token deleted">-       name: \'common\' // 指定公共 bundle 的名称。</span>\n<span class="token deleted">-     })</span>\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n<span class="token inserted">+     chunkFilename: \'[name].bundle.js\',</span>\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>注意，这里使用了 <code>chunkFilename</code>，它决定非入口 chunk 的名称。想了解 <code>chunkFilename</code> 更多信息，请查看 <a href="/configuration/output/#output-chunkfilename">output 相关文档</a>。接着，更新我们的项目，移除掉那些现在不会用到的文件:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n<span class="token deleted">- |- another-module.js</span>\n|- /node_modules\n</code></pre>\n<p>现在，我们不再使用静态导入 <code>lodash</code>，而是通过使用动态导入来分离一个 chunk：</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token deleted">- import _ from \'lodash\';</span>\n-\n<span class="token deleted">- function component() {</span>\n<span class="token inserted">+ function getComponent() {</span>\n<span class="token deleted">-   var element = document.createElement(\'div\');</span>\n-\n<span class="token deleted">-   // Lodash, now imported by this script</span>\n<span class="token deleted">-   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');</span>\n<span class="token inserted">+   return import(/* webpackChunkName: "lodash" */ \'lodash\').then(_ => {</span>\n<span class="token inserted">+     var element = document.createElement(\'div\');</span>\n+\n<span class="token inserted">+     element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');</span>\n+\n<span class="token inserted">+     return element;</span>\n+\n<span class="token inserted">+   }).catch(error => \'An error occurred while loading the component\');</span>\n  }\n\n<span class="token deleted">- document.body.appendChild(component());</span>\n<span class="token inserted">+ getComponent().then(component => {</span>\n<span class="token inserted">+   document.body.appendChild(component);</span>\n<span class="token inserted">+ })</span>\n</code></pre>\n<p>注意，在注释中使用了 <code>webpackChunkName</code>。这样做会导致我们的 bundle 被命名为 <code>lodash.bundle.js</code> ，而不是 <code>[id].bundle.js</code> 。想了解更多关于 <code>webpackChunkName</code> 和其他可用选项，请查看 <a href="/api/module-methods#import-"><code>import()</code> 相关文档</a>。让我们执行 webpack，查看 <code>lodash</code> 是否会分离到一个单独的 bundle：</p>\n<pre><code class="lang-bash">Hash: a27e5bf1dd73c675d5c9\nVersion: webpack 2.6.1\nTime: 544ms\n           Asset     Size  Chunks                    Chunk Names\nlodash.bundle.js   541 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  lodash\n index.bundle.js  6.35 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         index\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 377 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>如果你已经通过类似 babel 的预处理器(pre-processor)启用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"><code>async</code> 函数</a>，请注意，你可以像下面那样简化代码，因为 <code>import()</code> 语句恰好会返回 promises：</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token deleted">- function getComponent() {</span>\n<span class="token inserted">+ async function getComponent() {</span>\n<span class="token deleted">-   return import(/* webpackChunkName: "lodash" */ \'lodash\').then(_ => {</span>\n<span class="token deleted">-     var element = document.createElement(\'div\');</span>\n-\n<span class="token deleted">-     element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');</span>\n-\n<span class="token deleted">-     return element;</span>\n-\n<span class="token deleted">-   }).catch(error => \'An error occurred while loading the component\');</span>\n<span class="token inserted">+   var element = document.createElement(\'div\');</span>\n<span class="token inserted">+   const _ = await import(/* webpackChunkName: "lodash" */ \'lodash\');</span>\n+\n<span class="token inserted">+   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');</span>\n+\n<span class="token inserted">+   return element;</span>\n  }\n\n  getComponent().then(component => {\n    document.body.appendChild(component);\n  });\n</code></pre>\n<h2 class="header"><a class="anchor" href="#bundle-bundle-analysis-" id="bundle-bundle-analysis-"></a><span class="text">bundle 分析(bundle analysis)</span><a class="icon-link" href="#bundle-bundle-analysis-"></a></h2>\n<p>如果我们以分离代码作为开始，那么就以检查模块作为结束，分析输出结果是很有用处的。<a href="https://github.com/webpack/analyse">官方分析工具</a> 是一个好的初始选择。下面是一些社区支持(community-supported)的可选工具：</p>\n<ul>\n<li><a href="https://alexkuz.github.io/webpack-chart/">webpack-chart</a>: webpack 数据交互饼图。</li>\n<li><a href="https://chrisbateman.github.io/webpack-visualizer/">webpack-visualizer</a>: 可视化并分析你的 bundle，检查哪些模块占用空间，哪些可能是重复使用的。</li>\n<li><a href="https://github.com/th0r/webpack-bundle-analyzer">webpack-bundle-analyzer</a>: 一款分析 bundle 内容的插件及 CLI 工具，以便捷的、交互式、可缩放的树状图形式展现给用户。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">下一步</span><a class="icon-link" href="#-"></a></h2>\n<p>关于「如何在真正的应用程序和<a href="/guides/caching">缓存</a>中 <code>import()</code> 导入」以及学习「如何更加高效地分离代码」的具体示例，请查看<a href="/guides/lazy-loading">懒加载</a>。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/code-splitting/">https://webpack.js.org/guides/code-splitting/</a></p>\n</blockquote>\n',title:"代码分离"},title:"代码分离",url:"/guides/code-splitting/"},{file:{attributes:{title:"懒加载",sort:10,contributors:["chrisVillanueva","iammerrick","skipjack"],related:[{title:"Lazy Loading ES2015 Modules in the Browser",url:"https://dzone.com/articles/lazy-loading-es2015-modules-in-the-browser"}],group:"-",anchors:[{title:"示例",id:"-"},{title:"框架",id:"-"}]},body:'<blockquote class="tip"><div class="tip-content"> 本指南的继承自<a href="/guides/code-splitting">代码分离</a>。如果你尚未阅读该指南，请先行阅读。 </div></blockquote><p>懒加载或者按需加载，是一种很好的优化网页或应用的方式。这种方式实际上是先把你的代码在一些逻辑断点处分离开，然后在一些代码块中完成某些操作后，立即引用或即将引用另外一些新的代码块。这样加快了应用的初始加载速度，减轻了它的总体体积，因为某些代码块可能永远不会被加载。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p>我们在<a href="/guides/code-splitting#dynamic-imports">代码分离</a>中的例子基础上，进一步做些调整来说明这个概念。那里的代码确实会在脚本运行的时候产生一个分离的代码块 <code>lodash.bundle.js</code> ，在技术概念上“懒加载”它。问题是加载这个包并不需要用户的交互 -- 意思是每次加载页面的时候都会请求它。这样做并没有对我们有很多帮助，还会对性能产生负面影响。</p>\n<p>我们试试不同的做法。我们增加一个交互，当用户点击按钮的时候用 console 打印一些文字。但是会等到第一次交互的时候再加载那个代码块（<code>print.js</code>）。为此，我们返回到代码分离的例子中，把 <code>lodash</code> 放到主代码块中，重新运行<em>代码分离</em>中的代码 <a href="/guides/code-splitting#dynamic-imports">final <em>Dynamic Imports</em> example</a>。</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n<span class="token inserted">+ |- print.js</span>\n|- /node_modules\n</code></pre>\n<p><strong>src/print.js</strong></p>\n<pre><code class="lang-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'The print.js module has loaded! See the network tab in dev tools...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Button Clicked: Here\\\'s "some text"!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ import _ from \'lodash\';</span>\n+\n<span class="token deleted">- async function getComponent() {</span>\n<span class="token inserted">+ function component() {</span>\n    var element = document.createElement(\'div\');\n<span class="token deleted">-   const _ = await import(/* webpackChunkName: "lodash" */ \'lodash\');</span>\n<span class="token inserted">+   var button = document.createElement(\'button\');</span>\n<span class="token inserted">+   var br = document.createElement(\'br\');</span>\n\n<span class="token inserted">+   button.innerHTML = \'Click me and look at the console!\';</span>\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token inserted">+   element.appendChild(br);</span>\n<span class="token inserted">+   element.appendChild(button);</span>\n+\n<span class="token inserted">+   // Note that because a network request is involved, some indication</span>\n<span class="token inserted">+   // of loading would need to be shown in a production-level site/app.</span>\n<span class="token inserted">+   button.onclick = e => import(/* webpackChunkName: "print" */ \'./print\').then(module => {</span>\n<span class="token inserted">+     var print = module.default;</span>\n+\n<span class="token inserted">+     print();</span>\n<span class="token inserted">+   });</span>\n\n    return element;\n  }\n\n<span class="token deleted">- getComponent().then(component => {</span>\n<span class="token deleted">-   document.body.appendChild(component);</span>\n<span class="token deleted">- });</span>\n<span class="token inserted">+ document.body.appendChild(component());</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 注意当调用 ES6 模块的 <code>import()</code> 方法（引入模块）时，必须指向模块的 <code>.default</code> 值，因为它才是 promise 被处理后返回的实际的 <code>module</code> 对象。 </div></blockquote><p>现在运行 webpack 来验证一下我们的懒加载功能：</p>\n<pre><code class="lang-bash">Hash: e0f95cc0bda81c2a1340\nVersion: webpack 3.0.0\nTime: 1378ms\n          Asset       Size  Chunks                    Chunk Names\nprint.bundle.js  417 bytes       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         print\nindex.bundle.js     548 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  index\n     index.html  189 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 742 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./src/print.js 165 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n        + 2 hidden modules\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">框架</span><a class="icon-link" href="#-"></a></h2>\n<p>许多框架和类库对于如何用它们自己的方式来实现（懒加载）都有自己的建议。这里有一些例子：</p>\n<ul>\n<li>React: <a href="https://reacttraining.com/react-router/web/guides/code-splitting">Code Splitting and Lazy Loading</a></li>\n<li>Vue: <a href="https://alexjoverm.github.io/2017/07/16/Lazy-load-in-Vue-using-Webpack-s-code-splitting/">Lazy Load in Vue using Webpack&#39;s code splitting</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/lazy-loading/">https://webpack.js.org/guides/lazy-loading/</a></p>\n</blockquote>\n',title:"懒加载"},title:"懒加载",url:"/guides/lazy-loading/"},{file:{attributes:{title:"缓存",sort:11,contributors:["dannycjones","jouni-kantola","okonet","skipjack"],related:[{title:"可预测的长效缓存",url:"https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31"},{title:"Long Term Caching of Static Assets",url:"https://medium.com/@okonetchnikov/long-term-caching-of-static-assets-with-webpack-1ecb139adb95#.vtwnssps4"},{title:"Webpack & Caching",url:"https://gist.github.com/sokra/ff1b0290282bfa2c037bdb6dcca1a7aa"},{title:"Advanced Webpack Presentation",url:"https://presentations.survivejs.com/advanced-webpack/"},{title:"Issue 1315",url:"https://github.com/webpack/webpack/issues/1315"},{title:"Issue 652",url:"https://github.com/webpack/webpack.js.org/issues/652"}],group:"-",anchors:[{title:"输出文件的文件名(Output Filenames)",id:"-output-filenames-"},{title:"提取模板(Extracting Boilerplate)",id:"-extracting-boilerplate-"},{title:"模块标识符(Module Identifiers)",id:"-module-identifiers-"},{title:"结论",id:"-"},{title:"译注",id:"-"}]},body:'<blockquote class="tip"><div class="tip-content"> 本指南继续沿用<a href="/guides/getting-started">起步</a>、<a href="/guides/output-management">管理输出</a>和<a href="/guides/code-splitting">代码分离</a>中的代码示例。 </div></blockquote><p>以上，我们使用 webpack 来打包我们的模块化后的应用程序，webpack 会生成一个可部署的 <code>/dist</code> 目录，然后把打包后的内容放置在此目录中。只要 <code>/dist</code> 目录中的内容部署到服务器上，客户端（通常是浏览器）就能够访问网站此服务器的网站及其资源。而最后一步获取资源是比较耗费时间的，这就是为什么浏览器使用一种名为<a href="http://searchstorage.techtarget.com/definition/cache">缓存</a>的技术。可以通过命中缓存，以降低网络流量，使网站加载速度更快，然而，如果我们在部署新版本时不更改资源的文件名，浏览器可能会认为它没有被更新，就会使用它的缓存版本。由于缓存的存在，当你需要获取新的代码时，就会显得很棘手。</p>\n<p>此指南的重点在于通过必要的配置，以确保 webpack 编译生成的文件能够被客户端缓存，而在文件内容变化后，能够请求到新的文件。</p>\n<h2 class="header"><a class="anchor" href="#-output-filenames-" id="-output-filenames-"></a><span class="text">输出文件的文件名(Output Filenames)</span><a class="icon-link" href="#-output-filenames-"></a></h2>\n<p>通过使用 <code>output.filename</code> 进行<a href="/configuration/output#output-filename">文件名替换</a>，可以确保浏览器获取到修改后的文件。<code>[hash]</code> 替换可以用于在文件名中包含一个构建相关(build-specific)的 hash，但是更好的方式是使用 <code>[chunkhash]</code> 替换，在文件名中包含一个 chunk 相关(chunk-specific)的哈希。</p>\n<p>让我们使用<a href="/guides/getting-started">起步</a> 中的示例，以及<a href="/guides/output-management">管理输出</a> 中的 <code>plugins</code> 来作为项目的基础，所以我们不必手动处理维护 <code>index.html</code> 文件：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n|- /node_modules\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n<span class="token deleted">-       title: \'Output Management\'</span>\n<span class="token inserted">+       title: \'Caching\'</span>\n      })\n    ],\n    output: {\n<span class="token deleted">-     filename: \'bundle.js\',</span>\n<span class="token inserted">+     filename: \'[name].[chunkhash].js\',</span>\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>使用此配置，然后运行我们的构建脚本 <code>npm run build</code>，应该产生以下输出：</p>\n<pre><code class="lang-bash">Hash: f7a289a94c5e4cd1e566\nVersion: webpack 3.5.1\nTime: 835ms\n                       Asset       Size  Chunks                    Chunk Names\nmain.7e2c49a622975ebd9b7e.js     544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n                  index.html  197 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 216 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n     1 asset\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n        + 2 hidden modules\n</code></pre>\n<p>可以看到，bundle 的名称是它内容（通过 hash）的映射。如果我们不做修改，然后再次运行构建，我们的文件名按照期望，依然保持不变。然而，如果我们再次运行，可能会发现情况并非如此：</p>\n<pre><code class="lang-bash">Hash: f7a289a94c5e4cd1e566\nVersion: webpack 3.5.1\nTime: 835ms\n                       Asset       Size  Chunks                    Chunk Names\nmain.205199ab45963f6a62ec.js     544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n                  index.html  197 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 216 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n     1 asset\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n        + 2 hidden modules\n</code></pre>\n<p>这也是因为 webpack 在入口 chunk 中，包含了某些样板(boilerplate)，特别是 runtime 和 manifest。（译注：样板(boilerplate)指 webpack 运行时的引导代码）</p>\n<blockquote class="warning"><div class="tip-content"> 输出可能会因当前的 webpack 版本而稍有差异。新版本不一定有和旧版本相同的 hash 问题，但我们以下推荐的步骤，仍然是可靠的。 </div></blockquote><h2 class="header"><a class="anchor" href="#-extracting-boilerplate-" id="-extracting-boilerplate-"></a><span class="text">提取模板(Extracting Boilerplate)</span><a class="icon-link" href="#-extracting-boilerplate-"></a></h2>\n<p>就像我们之前从<a href="/guides/code-splitting">代码分离</a>了解到的，<a href="/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a> 可以用于将模块分离到单独的文件中。然而 <code>CommonsChunkPlugin</code> 有一个较少有人知道的功能是，能够在每次修改后的构建结果中，将 webpack 的样板(boilerplate)和 manifest 提取出来。通过指定 <code>entry</code> 配置中未用到的名称，此插件会自动将我们需要的内容提取到单独的包中：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n<span class="token inserted">+ const webpack = require(\'webpack\');</span>\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Caching\'\n<span class="token deleted">-     })</span>\n<span class="token inserted">+     }),</span>\n<span class="token inserted">+     new webpack.optimize.CommonsChunkPlugin({</span>\n<span class="token inserted">+       name: \'manifest\'</span>\n<span class="token inserted">+     })</span>\n    ],\n    output: {\n      filename: \'[name].[chunkhash].js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>让我们再次构建，然后查看提取出来的 <code>manifest</code> bundle：</p>\n<pre><code class="lang-bash">Hash: 80552632979856ddab34\nVersion: webpack 3.3.0\nTime: 1512ms\n                           Asset       Size  Chunks                    Chunk Names\n    main.5ec8e954e32d66dee1aa.js     542 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\nmanifest.719796322be98041fff2.js    5.82 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         manifest\n                      index.html  275 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 336 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<p>将第三方库(library)（例如 <code>lodash</code> 或 <code>react</code>）提取到单独的 <code>vendor</code> chunk 文件中，是比较推荐的做法，这是因为，它们很少像本地的源代码那样频繁修改。因此通过实现以上步骤，利用客户端的长效缓存机制，可以通过命中缓存来消除请求，并减少向服务器获取资源，同时还能保证客户端代码和服务器端代码版本一致。这可以通过使用新的 <code>entry(入口)</code> 起点，以及再额外配置一个 <code>CommonsChunkPlugin</code> 实例的组合方式来实现：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  var path = require(\'path\');\n  const webpack = require(\'webpack\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n<span class="token deleted">-   entry: \'./src/index.js\',</span>\n<span class="token inserted">+   entry: {</span>\n<span class="token inserted">+     main: \'./src/index.js\',</span>\n<span class="token inserted">+     vendor: [</span>\n<span class="token inserted">+       \'lodash\'</span>\n<span class="token inserted">+     ]</span>\n<span class="token inserted">+   },</span>\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Caching\'\n      }),\n<span class="token inserted">+     new webpack.optimize.CommonsChunkPlugin({</span>\n<span class="token inserted">+       name: \'vendor\'</span>\n<span class="token inserted">+     }),</span>\n      new webpack.optimize.CommonsChunkPlugin({\n        name: \'manifest\'\n      })\n    ],\n    output: {\n      filename: \'[name].[chunkhash].js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 注意，引入顺序在这里很重要。<code>CommonsChunkPlugin</code> 的 <code>&#39;vendor&#39;</code> 实例，必须在 <code>&#39;manifest&#39;</code> 实例之前引入。 </div></blockquote><p>让我们再次构建，然后查看新的 <code>vendor</code> bundle：</p>\n<pre><code class="lang-bash">Hash: 69eb92ebf8935413280d\nVersion: webpack 3.3.0\nTime: 1502ms\n                           Asset       Size  Chunks                    Chunk Names\n  vendor.8196d409d2f988123318.js     541 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  vendor\n    main.0ac0ae2d4a11214ccd19.js  791 bytes       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\nmanifest.004a1114de8bcf026622.js    5.85 kB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         manifest\n                      index.html  352 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 336 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> multi lodash 28 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-module-identifiers-" id="-module-identifiers-"></a><span class="text">模块标识符(Module Identifiers)</span><a class="icon-link" href="#-module-identifiers-"></a></h2>\n<p>让我们向项目中再添加一个模块 <code>print.js</code>：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n<span class="token inserted">+ |- print.js</span>\n|- /node_modules\n</code></pre>\n<p><strong>print.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ export default function print(text) {</span>\n<span class="token inserted">+   console.log(text);</span>\n<span class="token inserted">+ };</span>\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n<span class="token inserted">+ import Print from \'./print\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n\n    // lodash 是由当前 script 脚本 import 导入进来的\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token inserted">+   element.onclick = Print.bind(null, \'Hello webpack!\');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>再次运行构建，然后我们期望的是，只有 <code>main</code> bundle 的 hash 发生变化，然而……</p>\n<pre><code class="lang-bash">Hash: d38a06644fdbb898d795\nVersion: webpack 3.3.0\nTime: 1445ms\n                           Asset       Size  Chunks                    Chunk Names\n  vendor.a7561fb0e9a071baadb9.js     541 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  vendor\n    main.b746e3eb72875af2caa9.js    1.22 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\nmanifest.1400d5af64fc1b7b3a45.js    5.85 kB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         manifest\n                      index.html  352 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 421 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./src/print.js 62 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>5<span class="token punctuation">]</span> multi lodash 28 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<p>……我们可以看到这三个文件的 hash 都变化了。这是因为每个 <a href="/api/module-variables#module-id-commonjs-"><code>module.id</code></a> 会基于默认的解析顺序(resolve order)进行增量。也就是说，当解析顺序发生变化，ID 也会随之改变。因此，简要概括：</p>\n<ul>\n<li><code>main</code> bundle 会随着自身的新增内容的修改，而发生变化。</li>\n<li><code>vendor</code> bundle 会随着自身的 <code>module.id</code> 的修改，而发生变化。</li>\n<li><code>manifest</code> bundle 会因为当前包含一个新模块的引用，而发生变化。</li>\n</ul>\n<p>第一个和最后一个都是符合预期的行为 -- 而 <code>vendor</code> 的 hash 发生变化是我们要修复的。幸运的是，可以使用两个插件来解决这个问题。第一个插件是 <a href="/plugins/named-modules-plugin"><code>NamedModulesPlugin</code></a>，将使用模块的路径，而不是数字标识符。虽然此插件有助于在开发过程中输出结果的可读性，然而执行时间会长一些。第二个选择是使用 <a href="/plugins/hashed-module-ids-plugin"><code>HashedModuleIdsPlugin</code></a>，推荐用于生产环境构建：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const webpack = require(\'webpack\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n      main: \'./src/index.js\',\n      vendor: [\n        \'lodash\'\n      ]\n    },\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Caching\'\n      }),\n<span class="token inserted">+     new webpack.HashedModuleIdsPlugin(),</span>\n      new webpack.optimize.CommonsChunkPlugin({\n        name: \'vendor\'\n      }),\n      new webpack.optimize.CommonsChunkPlugin({\n        name: \'manifest\'\n      })\n    ],\n    output: {\n      filename: \'[name].[chunkhash].js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>现在，不管再添加任何新的本地依赖，对于每次构建，<code>vendor</code> hash 都应该保持一致：</p>\n<pre><code class="lang-bash">Hash: 1f49b42afb9a5acfbaff\nVersion: webpack 3.3.0\nTime: 1372ms\n                           Asset       Size  Chunks                    Chunk Names\n  vendor.eed6dcc3b30cfa138aaa.js     541 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  vendor\n    main.d103ac311788fcb7e329.js    1.22 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\nmanifest.d2a6dc1ccece13f5a164.js    5.85 kB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         manifest\n                      index.html  352 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>3Di9<span class="token punctuation">]</span> ./src/print.js 62 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>3IRH<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>DuR2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> multi lodash 28 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>lVK7<span class="token punctuation">]</span> ./src/index.js 421 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<p>然后，修改我们的 <code>src/index.js</code>，临时移除额外的依赖：</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n<span class="token deleted">- import Print from \'./print\';</span>\n<span class="token inserted">+ // import Print from \'./print\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n\n    // lodash 是由当前 script 脚本 import 导入进来的\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token deleted">-   element.onclick = Print.bind(null, \'Hello webpack!\');</span>\n<span class="token inserted">+   // element.onclick = Print.bind(null, \'Hello webpack!\');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>最后，再次运行我们的构建：</p>\n<pre><code class="lang-bash">Hash: 37e1358f135c0b992f72\nVersion: webpack 3.3.0\nTime: 1557ms\n                           Asset       Size  Chunks                    Chunk Names\n  vendor.eed6dcc3b30cfa138aaa.js     541 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  vendor\n    main.fc7f38e648da79db2aba.js  891 bytes       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\nmanifest.bb5820632fb66c3fb357.js    5.85 kB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         manifest\n                      index.html  352 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>3IRH<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>DuR2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> multi lodash 28 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>lVK7<span class="token punctuation">]</span> ./src/index.js 427 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<p>我们可以看到，这两次构建中，<code>vendor</code> bundle 的文件名称，都是 <code>eed6dcc3b30cfa138aaa</code>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">结论</span><a class="icon-link" href="#-"></a></h2>\n<p>缓存从凌乱变得清晰直接。然而以上预先演示，只能帮助你在部署一致性(deploying consistent)和资源可缓存(cachable assets)方面，有个好的开始。想要了解更多信息，请查看以下的<em>进一步阅读</em>部分。</p>\n<hr>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">译注</span><a class="icon-link" href="#-"></a></h2>\n<p>章节示例：<a href="https://github.com/dear-lizhihua/webpack.js.org-demos/tree/webpack.js.org/guides/caching">dear-lizhihua/webpack.js.org-demos</a></p>\n<hr>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/caching/">https://webpack.js.org/guides/caching/</a></p>\n</blockquote>\n',title:"缓存"},title:"缓存",url:"/guides/caching/"},{file:{attributes:{title:"创建 Library",sort:12,contributors:["5angel","johnstew","marioacc","pksjce","simon04"],group:"-",anchors:[{title:"创建一个 library",id:"-library"},{title:"基本配置",id:"-"},{title:"外部化 lodash",id:"-lodash"},{title:"外部扩展的限制",id:"-"},{title:"暴露 library",id:"-library"},{title:"最终步骤",id:"-"}],related:[]},body:'<p>除了打包应用程序代码，webpack 还可以用于打包 JavaScript library。以下指南适用于希望流水线化(streamline)打包策略的 library 作者。</p>\n<h2 class="header"><a class="anchor" href="#-library" id="-library"></a><span class="text">创建一个 library</span><a class="icon-link" href="#-library"></a></h2>\n<p>假设你正在编写一个名为 <code>webpack-numbers</code> 的小的 library，可以将数字 1 到 5 转换为文本表示，反之亦然，例如将 2 转换为 &#39;two&#39;。</p>\n<p>基本的项目结构可能如下所示：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+  |- webpack.config.js</span>\n<span class="token inserted">+  |- package.json</span>\n<span class="token inserted">+  |- /src</span>\n<span class="token inserted">+    |- index.js</span>\n<span class="token inserted">+    |- ref.json</span>\n</code></pre>\n<p>初始化 npm，安装 webpack 和 lodash：</p>\n<pre><code class="lang-bash">npm init -y\nnpm <span class="token function">install</span> --save-dev webpack lodash\n</code></pre>\n<p><strong>src/ref.json</strong></p>\n<pre><code class="lang-javascript"><span class="token punctuation">[</span><span class="token punctuation">{</span>\n  <span class="token string">"num"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token string">"word"</span><span class="token punctuation">:</span> <span class="token string">"One"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">"num"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token string">"word"</span><span class="token punctuation">:</span> <span class="token string">"Two"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">"num"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token string">"word"</span><span class="token punctuation">:</span> <span class="token string">"Three"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">"num"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token string">"word"</span><span class="token punctuation">:</span> <span class="token string">"Four"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">"num"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  <span class="token string">"word"</span><span class="token punctuation">:</span> <span class="token string">"Five"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">"num"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">"word"</span><span class="token punctuation">:</span> <span class="token string">"Zero"</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> numRef <span class="token keyword">from</span> <span class="token string">\'./ref.json\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">numToWord</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>numRef<span class="token punctuation">,</span> <span class="token punctuation">(</span>accum<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ref<span class="token punctuation">.</span>num <span class="token operator">===</span> num <span class="token operator">?</span> ref<span class="token punctuation">.</span>word <span class="token punctuation">:</span> accum<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">wordToNum</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>numRef<span class="token punctuation">,</span> <span class="token punctuation">(</span>accum<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ref<span class="token punctuation">.</span>word <span class="token operator">===</span> word <span class="token operator">&amp;&amp;</span> word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> ref<span class="token punctuation">.</span>num <span class="token punctuation">:</span> accum<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>该 library 的使用方式如下：</p>\n<pre><code class="lang-js"><span class="token comment">// ES2015 模块引入</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> webpackNumbers <span class="token keyword">from</span> <span class="token string">\'webpack-numbers\'</span><span class="token punctuation">;</span>\n<span class="token comment">// CommonJS 模块引入</span>\n<span class="token keyword">var</span> webpackNumbers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-numbers\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n<span class="token comment">// ES2015 和 CommonJS 模块调用</span>\nwebpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Two\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n<span class="token comment">// AMD 模块引入</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'webpackNumbers\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> webpackNumbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// AMD 模块调用</span>\n  webpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Two\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>用户还可以通过 script 标签来加载和使用此 library：</p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/webpack-numbers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>\n  // ...\n  // 全局变量\n  webpackNumbers.wordToNum(\'Five\')\n  // window 对象中的属性\n  window.webpackNumbers.wordToNum(\'Five\')\n  // ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>注意，我们还可以通过以下配置方式，将 library 暴露：</p>\n<ul>\n<li>global 对象中的属性，用于 Node.js。</li>\n<li><code>this</code> 对象中的属性。</li>\n</ul>\n<p>完整的 library 配置和相关代码请参阅 <a href="https://github.com/kalcifer/webpack-library-example">webpack library 示例</a>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">基本配置</span><a class="icon-link" href="#-"></a></h2>\n<p>现在，让我们以某种方式打包这个 library，能够实现以下几个目标：</p>\n<ul>\n<li>不打包 <code>lodash</code>，而是使用 <code>externals</code> 来 require 用户加载好的 lodash。</li>\n<li>设置 library 的名称为 <code>webpack-numbers</code>.</li>\n<li>将 library 暴露为一个名为 <code>webpackNumbers</code>的变量。</li>\n<li>能够访问其他 Node.js 中的 library。</li>\n</ul>\n<p>此外，用户应该能够通过以下方式访问 library：</p>\n<ul>\n<li>ES2015 模块。例如 <code>import webpackNumbers from &#39;webpack-numbers&#39;</code>。</li>\n<li>CommonJS 模块。例如 <code>require(&#39;webpack-numbers&#39;)</code>.</li>\n<li>全局变量，当通过 <code>script</code> 脚本引入时</li>\n</ul>\n<p>我们可以从这个基本的 webpack 配置开始：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'webpack-numbers.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-lodash" id="-lodash"></a><span class="text">外部化 lodash</span><a class="icon-link" href="#-lodash"></a></h2>\n<p>现在，如果执行 <code>webpack</code>，你会发现创建了一个非常巨大的文件。如果你查看这个文件，会看到 lodash 也被打包到代码中。在这种场景中，我们更倾向于把 <code>lodash</code> 当作 <code>peerDependency</code>。也就是说，用户应该已经将 <code>lodash</code> 安装好。因此，你可以放弃对外部 library 的控制，而是将控制权让给使用 library 的用户。</p>\n<p>这可以使用 <code>externals</code> 配置来完成：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  var path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      path: path.resolve(__dirname, \'dist\'),\n      filename: \'webpack-numbers.js\'\n<span class="token deleted">-   }</span>\n<span class="token inserted">+   },</span>\n<span class="token inserted">+   externals: {</span>\n<span class="token inserted">+     lodash: {</span>\n<span class="token inserted">+       commonjs: \'lodash\',</span>\n<span class="token inserted">+       commonjs2: \'lodash\',</span>\n<span class="token inserted">+       amd: \'lodash\',</span>\n<span class="token inserted">+       root: \'_\'</span>\n<span class="token inserted">+     }</span>\n<span class="token inserted">+   }</span>\n  };\n</code></pre>\n<p>这意味着你的 library 需要一个名为 <code>lodash</code> 的依赖，这个依赖在用户的环境中必须存在且可用。</p>\n<blockquote class="tip"><div class="tip-content"> 注意，如果你计划只是将 library 用作另一个 webpack bundle 中的依赖模块，则可以将 <code>externals</code> 指定为数组。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">外部扩展的限制</span><a class="icon-link" href="#-"></a></h2>\n<p>对于从一个依赖目录中，调用多个文件的 library：</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> A <span class="token keyword">from</span> <span class="token string">\'library/one\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> B <span class="token keyword">from</span> <span class="token string">\'library/two\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n</code></pre>\n<p>无法通过在 externals 中指定 <code>library</code> 目录的方式，将它们从 bundle 中排除。你需要逐个排除它们，或者使用正则表达式排除。</p>\n<pre><code class="lang-js">externals<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token string">\'library/one\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'library/two\'</span><span class="token punctuation">,</span>\n  <span class="token comment">// Everything that starts with "library/"</span>\n  <span class="token regex">/^library\\/.+$/</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-library" id="-library"></a><span class="text">暴露 library</span><a class="icon-link" href="#-library"></a></h2>\n<p>对于用途广泛的 library，我们希望它能够兼容不同的环境，例如 CommonJS，AMD，Node.js 或者作为一个全局变量。为了让你的 library 能够在各种用户环境(consumption)中可用，需要在 <code>output</code> 中添加 <code>library</code> 属性：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  var path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      path: path.resolve(__dirname, \'dist\'),\n<span class="token deleted">-     filename: \'webpack-numbers.js\'</span>\n<span class="token inserted">+     filename: \'webpack-numbers.js\',</span>\n<span class="token inserted">+     library: \'webpackNumbers\'</span>\n    },\n    externals: {\n      lodash: {\n        commonjs: \'lodash\',\n        commonjs2: \'lodash\',\n        amd: \'lodash\',\n        root: \'_\'\n      }\n    }\n  };\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 注意，<code>library</code> 设置绑定到 <code>entry</code> 配置。对于大多数库，指定一个入口起点就足够了。虽然<a href="https://github.com/webpack/webpack/tree/master/examples/multi-part-library">构建多个库</a>也是也可以的，然而还可以直接通过将<a href="https://stackoverflow.com/questions/34072598/es6-exporting-importing-in-index-file">主入口脚本(index script)</a>暴露部分导出，来作为单个入口起点则相对简单。<strong>不推荐</strong>使用<code>数组</code>作为库的 <code>entry</code>。 </div></blockquote><p>当你在 import 引入模块时，这可以将你的 library bundle 暴露为名为 <code>webpackNumbers</code> 的全局变量。为了让 library 和其他环境兼容，还需要在配置文件中添加 <code>libraryTarget</code> 属性。这是可以控制 library 如何以不同方式暴露的选项。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  var path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      path: path.resolve(__dirname, \'dist\'),\n      filename: \'webpack-numbers.js\',\n<span class="token deleted">-     library: \'webpackNumbers\'</span>\n<span class="token inserted">+     library: \'webpackNumbers\',</span>\n<span class="token inserted">+     libraryTarget: \'umd\'</span>\n    },\n    externals: {\n      lodash: {\n        commonjs: \'lodash\',\n        commonjs2: \'lodash\',\n        amd: \'lodash\',\n        root: \'_\'\n      }\n    }\n  };\n</code></pre>\n<p>可以通过以下方式暴露 library：</p>\n<ul>\n<li>遍历：作为一个全局变量，通过 <code>script</code> 标签来访问（<code>libraryTarget:&#39;var&#39;</code>）。</li>\n<li>this：通过 <code>this</code> 对象访问（<code>libraryTarget:&#39;this&#39;</code>）。</li>\n<li>window：通过 <code>window</code> 对象访问，在浏览器中（<code>libraryTarget:&#39;window&#39;</code>）。</li>\n<li>UMD：在 AMD 或 CommonJS 的 <code>require</code> 之后可访问（<code>libraryTarget:&#39;umd&#39;</code>）。</li>\n</ul>\n<p>如果设置了 <code>library</code> 但没设置 <code>libraryTarget</code>，则 <code>libraryTarget</code> 默认为 <code>var</code>，详细说明请查看 <a href="/configuration/output">output 配置文档</a>。查看 <a href="/configuration/output#output-librarytarget"><code>output.libraryTarget</code></a>，以获取所有可用选项的详细列表。</p>\n<blockquote class="warning"><div class="tip-content"> 在 webpack 3.5.5 中，使用 <code>libraryTarget: { root:&#39;_&#39; }</code> 将无法正常工作（参考 <a href="https://github.com/webpack/webpack/issues/4824">issue 4824</a>) 所述）。然而，可以设置 <code>libraryTarget: { var: &#39;_&#39; }</code> 来将 library 作为全局变量。 </div></blockquote><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">最终步骤</span><a class="icon-link" href="#-"></a></h3>\n<p>遵循<a href="/guides/production">生产环境指南</a>中的步骤，来优化生产环境下的输出。那么，我们还需要通过设置 <code>package.json</code> 中的 <code>main</code> 字段，添加生成 bundle 的文件路径。</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  ...\n  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"dist/webpack-numbers.js"</span><span class="token punctuation">,</span>\n  ...\n<span class="token punctuation">}</span>\n</code></pre>\n<p>或者，按照这里的<a href="https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md#typical-usage">指南</a>添加为标准模块：</p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  ...\n  <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"src/index.js"</span><span class="token punctuation">,</span>\n  ...\n<span class="token punctuation">}</span>\n</code></pre>\n<p>键(key) <code>main</code> 是指 <a href="https://docs.npmjs.com/files/package.json#main"><code>package.json</code> 标准</a>，以及<code>module</code> 是<a href="https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md">一个</a><a href="https://github.com/rollup/rollup/wiki/pkg.module">提案</a>，此提案允许 JavaScript 生态系统升级使用 ES2015 模块，而不会破坏向后兼容性。</p>\n<blockquote class="warning"><div class="tip-content"> <code>module</code> 属性应指向一个使用 ES2015 模块语法的脚本，但不包括浏览器或 Node.js 尚不支持的其他语法特性。 </div></blockquote><p>现在你可以<a href="https://docs.npmjs.com/getting-started/publishing-npm-packages">将其发布为一个 npm 包</a>，并且在 <a href="https://unpkg.com/#/">unpkg.com</a> 找到它并分发给你的用户。</p>\n<blockquote class="tip"><div class="tip-content"> 为了暴露和 library 关联着的样式表，你应该使用 <a href="/plugins/extract-text-webpack-plugin"><code>ExtractTextPlugin</code></a>。然后，用户可以像使用其他样式表一样使用和加载这些样式表。 </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/author-libraries/">https://webpack.js.org/guides/author-libraries/</a></p>\n</blockquote>\n',title:"创建 Library"},title:"创建 Library",url:"/guides/author-libraries/"},{file:{attributes:{title:"Shimming",sort:13,contributors:["jeremenichelli","jhnns","pksjce","simon04","svyandun"],related:[{title:"Reward modern browser users script",url:"https://hackernoon.com/10-things-i-learned-making-the-fastest-site-in-the-world-18a0e1cdf4a7#c665"},{title:"useBuiltIns in babel-preset-env",url:"https://github.com/babel/babel-preset-env#usebuiltins"}],group:"-",anchors:[{title:"shimming 全局变量",id:"shimming-"},{title:"细粒度 shimming",id:"-shimming"},{title:"全局 exports",id:"-exports"},{title:"加载 polyfills",id:"-polyfills"},{title:"深度优化",id:"-"},{title:"Node 内置",id:"node-"},{title:"其他工具",id:"-"}]},body:'<p><code>webpack</code> 编译器(compiler)能够识别遵循 ES2015 模块语法、CommonJS 或 AMD 规范编写的模块。然而，一些第三方的库(library)可能会引用一些全局依赖（例如 <code>jQuery</code> 中的 <code>$</code>）。这些库也可能创建一些需要被导出的全局变量。这些“不符合规范的模块”就是 <em>shimming</em> 发挥作用的地方。</p>\n<blockquote class="warning"><div class="tip-content"> <strong>我们不推荐使用全局的东西！</strong>在 webpack 背后的整个概念是让前端开发更加模块化。也就是说，需要编写具有良好的封闭性(well contained)、彼此隔离的模块，以及不要依赖于那些隐含的依赖模块（例如，全局变量）。请只在必要的时候才使用本文所述的这些特性。 </div></blockquote><p><em>shimming</em> 另外一个使用场景就是，当你希望 <a href="https://en.wikipedia.org/wiki/Polyfill">polyfill</a> 浏览器功能以支持更多用户时。在这种情况下，你可能只想要将这些 polyfills 提供给到需要修补(patch)的浏览器（也就是实现按需加载）。</p>\n<p>下面的文章将向我们展示这两种用例。</p>\n<blockquote class="tip"><div class="tip-content"> 为了方便，本指南继续沿用<a href="/guides/getting-started">起步</a>中的代码示例。在继续之前，请确保你已经熟悉那些配置。 </div></blockquote><h2 class="header"><a class="anchor" href="#shimming-" id="shimming-"></a><span class="text">shimming 全局变量</span><a class="icon-link" href="#shimming-"></a></h2>\n<p>让我们开始第一个 shimming 全局变量的用例。在此之前，我们先看看我们的项目：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n|- /node_modules\n</code></pre>\n<p>还记得我们之前用过的 <code>lodash</code> 吗？出于演示的目的，让我们把这个模块作为我们应用程序中的一个全局变量。要实现这些，我们需要使用 <code>ProvidePlugin</code> 插件。</p>\n<p>使用 <a href="/plugins/provide-plugin"><code>ProvidePlugin</code></a> 后，能够在通过 webpack 编译的每个模块中，通过访问一个变量来获取到 package 包。如果 webpack 知道这个变量在某个模块中被使用了，那么 webpack 将在最终 bundle 中引入我们给定的 package。让我们先移除 <code>lodash</code> 的 <code>import</code> 语句，并通过插件提供它：</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token deleted">- import _ from \'lodash\';</span>\n-\n  function component() {\n    var element = document.createElement(\'div\');\n\n<span class="token deleted">-   // Lodash, now imported by this script</span>\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n<span class="token inserted">+ const webpack = require(\'webpack\');</span>\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n<span class="token deleted">-   }</span>\n<span class="token inserted">+   },</span>\n<span class="token inserted">+   plugins: [</span>\n<span class="token inserted">+     new webpack.ProvidePlugin({</span>\n<span class="token inserted">+       _: \'lodash\'</span>\n<span class="token inserted">+     })</span>\n<span class="token inserted">+   ]</span>\n  };\n</code></pre>\n<p>本质上，我们所做的，就是告诉 webpack……</p>\n<blockquote>\n<p>如果你遇到了至少一处用到 <code>lodash</code> 变量的模块实例，那请你将 <code>lodash</code> package 包引入进来，并将其提供给需要用到它的模块。</p>\n</blockquote>\n<p>如果我们 run build，将会看到同样的输出：</p>\n<pre><code class="lang-bash">Hash: f450fa59fa951c68c416\nVersion: webpack 2.2.0\nTime: 343ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./src/index.js 189 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>我们还可以使用 <code>ProvidePlugin</code> 暴露某个模块中单个导出值，只需通过一个“数组路径”进行配置（例如 <code>[module, child, ...children?]</code>）。所以，让我们做如下设想，无论 <code>join</code> 方法在何处调用，我们都只会得到的是 <code>lodash</code> 中提供的 <code>join</code> 方法。</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  function component() {\n    var element = document.createElement(\'div\');\n\n<span class="token deleted">-   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');</span>\n<span class="token inserted">+   element.innerHTML = join([\'Hello\', \'webpack\'], \' \');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const webpack = require(\'webpack\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n<span class="token deleted">-       _: \'lodash\'</span>\n<span class="token inserted">+       join: [\'lodash\', \'join\']</span>\n      })\n    ]\n  };\n</code></pre>\n<p>这样就能很好的与 <a href="/guides/tree-shaking">tree shaking</a> 配合，将 <code>lodash</code> 库中的其他没用到的部分去除。</p>\n<h2 class="header"><a class="anchor" href="#-shimming" id="-shimming"></a><span class="text">细粒度 shimming</span><a class="icon-link" href="#-shimming"></a></h2>\n<p>一些传统的模块依赖的 <code>this</code> 指向的是 <code>window</code> 对象。在接下来的用例中，调整我们的 <code>index.js</code>：</p>\n<pre><code class="lang-diff">  function component() {\n    var element = document.createElement(\'div\');\n\n    element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n+\n<span class="token inserted">+   // Assume we are in the context of `window`</span>\n<span class="token inserted">+   this.alert(\'Hmmm, this probably isn\\\'t a great idea...\')</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>当模块运行在 CommonJS 环境下这将会变成一个问题，也就是说此时的 <code>this</code> 指向的是 <code>module.exports</code>。在这个例子中，你可以通过使用 <a href="/loaders/imports-loader/"><code>imports-loader</code></a> 覆写 <code>this</code>：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const webpack = require(\'webpack\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n<span class="token inserted">+   module: {</span>\n<span class="token inserted">+     rules: [</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: require.resolve(\'index.js\'),</span>\n<span class="token inserted">+         use: \'imports-loader?this=>window\'</span>\n<span class="token inserted">+       }</span>\n<span class="token inserted">+     ]</span>\n<span class="token inserted">+   },</span>\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: [\'lodash\', \'join\']\n      })\n    ]\n  };\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-exports" id="-exports"></a><span class="text">全局 exports</span><a class="icon-link" href="#-exports"></a></h2>\n<p>让我们假设，某个库(library)创建出一个全局变量，它期望用户使用这个变量。为此，我们可以在项目配置中，添加一个小模块来演示说明：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n<span class="token inserted">+   |- globals.js</span>\n  |- /node_modules\n</code></pre>\n<p><strong>src/globals.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token string">\'blah.txt\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> helpers <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'test something\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  parse<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'parse something\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>你可能从来没有在自己的源码中做过这些事情，但是你也许遇到过一个老旧的库(library)，和上面所展示的代码类似。在这个用例中，我们可以使用 <a href="/loaders/exports-loader/"><code>exports-loader</code></a>，将一个全局变量作为一个普通的模块来导出。例如，为了将 <code>file</code> 导出为 <code>file</code> 以及将 <code>helpers.parse</code> 导出为 <code>parse</code>，做如下调整：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const webpack = require(\'webpack\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve(\'index.js\'),\n          use: \'imports-loader?this=>window\'\n<span class="token deleted">-       }</span>\n<span class="token inserted">+       },</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: require.resolve(\'globals.js\'),</span>\n<span class="token inserted">+         use: \'exports-loader?file,parse=helpers.parse\'</span>\n<span class="token inserted">+       }</span>\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: [\'lodash\', \'join\']\n      })\n    ]\n  };\n</code></pre>\n<p>现在从我们的 entry 入口文件中(即 <code>src/index.js</code>)，我们能 <code>import { file, parse } from &#39;./globals.js&#39;;</code> ，然后一切将顺利进行。</p>\n<h2 class="header"><a class="anchor" href="#-polyfills" id="-polyfills"></a><span class="text">加载 polyfills</span><a class="icon-link" href="#-polyfills"></a></h2>\n<p>目前为止我们所讨论的所有内容都是处理那些遗留的 package 包，让我们进入到下一个话题：<strong>polyfills</strong>。</p>\n<p>有很多方法来载入 polyfills。例如，要引入 <a href="https://babeljs.io/docs/usage/polyfill/"><code>babel-polyfill</code></a> 我们只需要如下操作：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save babel-polyfill\n</code></pre>\n<p>然后使用 <code>import</code> 将其添加到我们的主 bundle 文件：</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ import \'babel-polyfill\';</span>\n+\n  function component() {\n    var element = document.createElement(\'div\');\n\n    element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 请注意，我们没有将 <code>import</code> 绑定到变量。这是因为只需在基础代码(code base)之外，再额外执行 polyfills，这样我们就可以假定代码中已经具有某些原生功能。 </div></blockquote><p>polyfills 虽然是一种模块引入方式，但是<strong>并不推荐在主 bundle 中引入 polyfills</strong>，因为这不利于具备这些模块功能的现代浏览器用户，会使他们下载体积很大、但却不需要的脚本文件。</p>\n<p>让我们把 <code>import</code> 放入一个新文件，并加入 <a href="https://github.com/github/fetch"><code>whatwg-fetch</code></a> polyfill：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save whatwg-fetch\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token deleted">- import \'babel-polyfill\';</span>\n-\n  function component() {\n    var element = document.createElement(\'div\');\n\n    element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n    |- globals.js\n<span class="token inserted">+   |- polyfills.js</span>\n  |- /node_modules\n</code></pre>\n<p><strong>src/polyfills.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">import</span> <span class="token string">\'babel-polyfill\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'whatwg-fetch\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const webpack = require(\'webpack\');\n\n  module.exports = {\n<span class="token deleted">-   entry: \'./src/index.js\',</span>\n<span class="token inserted">+   entry: {</span>\n<span class="token inserted">+     polyfills: \'./src/polyfills.js\',</span>\n<span class="token inserted">+     index: \'./src/index.js\'</span>\n<span class="token inserted">+   },</span>\n    output: {\n<span class="token deleted">-     filename: \'bundle.js\',</span>\n<span class="token inserted">+     filename: \'[name].bundle.js\',</span>\n      path: path.resolve(__dirname, \'dist\')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve(\'index.js\'),\n          use: \'imports-loader?this=>window\'\n        },\n        {\n          test: require.resolve(\'globals.js\'),\n          use: \'exports-loader?file,parse=helpers.parse\'\n        }\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: [\'lodash\', \'join\']\n      })\n    ]\n  };\n</code></pre>\n<p>如此之后，我们可以在代码中添加一些逻辑，根据条件去加载新的 <code>polyfills.bundle.js</code> 文件。你该如何决定，依赖于那些需要支持的技术以及浏览器。我们将做一些简单的试验，来确定是否需要引入这些 polyfills：</p>\n<p><strong>dist/index.html</strong></p>\n<pre><code class="lang-diff">  &lt;html>\n    &lt;head>\n      &lt;title>Getting Started&lt;/title>\n<span class="token inserted">+     &lt;script></span>\n<span class="token inserted">+       var modernBrowser = (</span>\n<span class="token inserted">+         \'fetch\' in window &amp;&amp;</span>\n<span class="token inserted">+         \'assign\' in Object</span>\n<span class="token inserted">+       );</span>\n+\n<span class="token inserted">+       if ( !modernBrowser ) {</span>\n<span class="token inserted">+         var scriptElement = document.createElement(\'script\');</span>\n+\n<span class="token inserted">+         scriptElement.async = false;</span>\n<span class="token inserted">+         scriptElement.src = \'/polyfills.bundle.js\';</span>\n<span class="token inserted">+         document.head.appendChild(scriptElement);</span>\n<span class="token inserted">+       }</span>\n<span class="token inserted">+     &lt;/script></span>\n    &lt;/head>\n    &lt;body>\n      &lt;script src="index.bundle.js">&lt;/script>\n    &lt;/body>\n  &lt;/html>\n</code></pre>\n<p>现在，我们能在 entry 入口文件中，通过 <code>fetch</code> 获取一些数据：</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  function component() {\n    var element = document.createElement(\'div\');\n\n    element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n+\n<span class="token inserted">+ fetch(\'https://jsonplaceholder.typicode.com/users\')</span>\n<span class="token inserted">+   .then(response => response.json())</span>\n<span class="token inserted">+   .then(json => {</span>\n<span class="token inserted">+     console.log(\'We retrieved some data! AND we\\\'re confident it will work on a variety of browser distributions.\')</span>\n<span class="token inserted">+     console.log(json)</span>\n<span class="token inserted">+   })</span>\n<span class="token inserted">+   .catch(error => console.error(\'Something went wrong when fetching this data: \', error))</span>\n</code></pre>\n<p>当我们开始执行构建时，<code>polyfills.bundle.js</code> 文件将会被载入到浏览器中，然后所有代码将正确无误的在浏览器中执行。请注意，以上的这些设定可能还会有所改进，我们只是对于如何解决「将 polyfills 提供给那些需要引入它的用户」这个问题，向你提供一个很棒的想法。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">深度优化</span><a class="icon-link" href="#-"></a></h2>\n<p><code>babel-preset-env</code> package 使用 <a href="https://github.com/ai/browserslist">browserslist</a> 来转译那些你浏览器中不支持的特性。这里预设了 <code>useBuiltIns</code> 选项，默认值是 <code>false</code>，能将你的全局 <code>babel-polyfill</code> 导入方式，改进为更细粒度的 <code>import</code> 格式：</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token string">\'core-js/modules/es7.string.pad-start\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/es7.string.pad-end\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/web.timers\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/web.immediate\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/web.dom.iterable\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p>查看<a href="https://github.com/babel/babel-preset-env">仓库</a>以获取更多信息。</p>\n<h2 class="header"><a class="anchor" href="#node-" id="node-"></a><span class="text">Node 内置</span><a class="icon-link" href="#node-"></a></h2>\n<p>像 <code>process</code> 这种 Node 内置模块，能直接根据配置文件(configuration file)进行正确的 polyfills，且不需要任何特定的 loaders 或者 plugins。查看 <a href="/configuration/node">node 配置页面</a>获取更多信息。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">其他工具</span><a class="icon-link" href="#-"></a></h2>\n<p>还有一些其他的工具能够帮助我们处理这些老旧的模块。</p>\n<p><a href="/loaders/script-loader/"><code>script-loader</code></a> 会在全局上下文中对代码进行取值，类似于通过一个 <code>script</code> 标签引入脚本。在这种模式下，每一个标准的库(library)都应该能正常运行。<code>require</code>, <code>module</code> 等的取值是 undefined。</p>\n<blockquote class="warning"><div class="tip-content"> 当使用 <code>script-loader</code> 时，模块将转化为字符串，然后添加到 bundle 中。它不会被 <code>webpack</code> 压缩，所以你应该选择一个 min 版本。同时，使用此 loader 将不会有 <code>devtool</code> 的支持。 </div></blockquote><p>这些老旧的模块如果没有 AMD/CommonJS 规范版本，但你也想将他们加入 <code>dist</code> 文件，你可以使用 <a href="/configuration/module/#module-noparse"><code>noParse</code></a> 来标识出这个模块。这样就能使 webpack 将引入这些模块，但是不进行转化(parse)，以及不解析(resolve) <code>require()</code> 和 <code>import</code> 语句。这个实践将提升构建性能。</p>\n<blockquote class="warning"><div class="tip-content"> 例如 <code>ProvidePlugin</code>，任何需要 AST 的功能，都无法正常运行。 </div></blockquote><p>最后，有一些模块支持不同的<a href="/concepts/modules">模块格式</a>，比如 AMD 规范、CommonJS 规范和遗留模块(legacy)。在大多数情况下，他们首先检查<code>define</code>，然后使用一些古怪的代码来导出一些属性。在这些情况下，可以通过<a href="/loaders/imports-loader/"><code>imports-loader</code></a>设置 <code>define=&gt;false</code> 来强制 CommonJS 路径。</p>\n<hr>\n<blockquote class="tip"><div class="tip-content"> 译者注：shim 是一个库(library)，它将一个新的 API 引入到一个旧的环境中，而且仅靠旧的环境中已有的手段实现。polyfill 就是一个用在浏览器 API 上的 shim。我们通常的做法是先检查当前浏览器是否支持某个 API，如果不支持的话就加载对应的 polyfill。然后新旧浏览器就都可以使用这个 API 了。 </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/shimming/">https://webpack.js.org/guides/shimming/</a></p>\n</blockquote>\n',title:"Shimming"},title:"Shimming",url:"/guides/shimming/"},{file:{attributes:{title:"TypeScript",sort:14,contributors:["kkamali","morsdyce","mtrivera"],group:"-",anchors:[{title:"基础安装",id:"-"},{title:"Loader",id:"loader"},{title:"source map",id:"source-map"},{title:"使用第三方库",id:"-"},{title:"导入其他资源",id:"-"},{title:"构建性能",id:"-"}],related:[]},body:'<blockquote class="tip"><div class="tip-content"> 本指南继续沿用<a href="/guides/getting-started/"><em>起步指南</em></a>中的代码示例。 </div></blockquote><p><a href="https://www.typescriptlang.org">TypeScript</a> 是 JavaScript 的超集，为其增加了类型系统，可以编译为普通的 JavaScript 代码。这篇指南里我们将会学习 webpack 是如何跟 TypeScript 进行集成。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">基础安装</span><a class="icon-link" href="#-"></a></h2>\n<p>首先，执行以下命令，安装 TypeScript 编译器(compiler)和 loader：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev typescript ts-loader\n</code></pre>\n<p>现在，我们将修改目录结构和配置文件：</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n<span class="token inserted">+ |- tsconfig.json</span>\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n    |- index.js\n<span class="token inserted">+   |- index.ts</span>\n  |- /node_modules\n</code></pre>\n<p><strong>tsconfig.json</strong></p>\n<p>这里我们设置一个基本的配置，来支持 JSX，并将 TypeScript 编译到 ES5……</p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist/"</span><span class="token punctuation">,</span>\n    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>\n    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>\n    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span>\n    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>查看 <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">TypeScript 官方文档</a>了解更多关于 <code>tsconfig.json</code> 的配置选项。</p>\n<p>想要了解 webpack 配置的更多信息，请查看<a href="/concepts/configuration/">配置相关概念</a>。</p>\n<p>现在让我们在 webpack 配置中处理 TypeScript：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./src/index.ts\'</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span><span class="token punctuation">,</span>\n        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'.tsx\'</span><span class="token punctuation">,</span> <span class="token string">\'.ts\'</span><span class="token punctuation">,</span> <span class="token string">\'.js\'</span> <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>这会直接将 webpack 的入口起点指定为 <code>./index.ts</code>，然后通过 <code>ts-loader</code> <em>加载</em>所有的 <code>.ts</code> 和 <code>.tsx</code> 文件，并且在当前目录<em>输出</em>一个 <code>bundle.js</code> 文件。</p>\n<h2 class="header"><a class="anchor" href="#loader" id="loader"></a><span class="text">Loader</span><a class="icon-link" href="#loader"></a></h2>\n<p><a href="https://github.com/TypeStrong/ts-loader"><code>ts-loader</code></a></p>\n<p>在本指南中，我们使用 <code>ts-loader</code>，因为它能够很方便地启用额外的 webpack 功能，例如将其他 web 资源导入到项目中。</p>\n<h2 class="header"><a class="anchor" href="#source-map" id="source-map"></a><span class="text">source map</span><a class="icon-link" href="#source-map"></a></h2>\n<p>想要了解 source map 的更多信息，请查看<a href="/guides/development">开发指南</a>。</p>\n<p>要启用 source map，我们必须配置 TypeScript，以将内联的 source map 输出到编译过的 JavaScript 文件。必须在 TypeScript 配置中添加下面这行：</p>\n<p><strong>tsconfig.json</strong></p>\n<pre><code class="lang-diff">  {\n    "compilerOptions": {\n      "outDir": "./dist/",\n<span class="token inserted">+     "sourceMap": true,</span>\n      "noImplicitAny": true,\n      "module": "commonjs",\n      "target": "es5",\n      "jsx": "react",\n      "allowJs": true\n    }\n  }\n</code></pre>\n<p>现在，我们需要告诉 webpack 提取这些 source map，并内联到最终的 bundle 中。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.ts\',\n<span class="token inserted">+   devtool: \'inline-source-map\',</span>\n    module: {\n      rules: [\n        {\n          test: /\\.tsx?$/,\n          use: \'ts-loader\',\n          exclude: /node_modules/\n        }\n      ]\n    },\n    resolve: {\n      extensions: [ \'.tsx\', \'.ts\', \'.js\' ]\n    },\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>查看 <a href="/configuration/devtool/">devtool 文档</a>以了解更多信息。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">使用第三方库</span><a class="icon-link" href="#-"></a></h2>\n<p>当从 npm 安装第三方库时，一定要牢记同时安装这个库的类型声明文件。你可以从 <a href="http://microsoft.github.io/TypeSearch/">TypeSearch</a> 中找到并安装这些第三方库的类型声明文件。</p>\n<p>举个例子，如果想安装 lodash 这个库的类型声明文件，我们可以运行下面的命令：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev @types/lodash\n</code></pre>\n<p>想了解更多，可以查看<a href="https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/">这篇文章</a>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">导入其他资源</span><a class="icon-link" href="#-"></a></h2>\n<p>要在 TypeScript 里使用非代码资源，我们需要告诉 TypeScript 如何兼容这些导入类型。那么首先，我们需要在项目里创建 <code>custom.d.ts</code> 文件，这个文件用来编写自定义的类型声明。让我们将 <code>.svg</code> 文件进行声明设置：</p>\n<p><strong>custom.d.ts</strong></p>\n<pre><code class="lang-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.svg"</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> content<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span> content<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这里，我们通过指定任何以 <code>.svg</code> 结尾的导入，并将模块的 <code>content</code> 定义为 <code>any</code>，将 SVG 声明一个新的模块。我们可以通过将类型定义为字符串，来更加显式地将它声明为一个 url。同样的理念适用于其他资源，包括 CSS, SCSS, JSON 等。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">构建性能</span><a class="icon-link" href="#-"></a></h2>\n<blockquote class="warning"><div class="tip-content"> 这可能会降低构建性能。 </div></blockquote><p>关于构建工具，请查看<a href="/guides/build-performance/">构建性能</a>指南。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/typescript/">https://webpack.js.org/guides/typescript/</a></p>\n</blockquote>\n',title:"TypeScript"},title:"TypeScript",url:"/guides/typescript/"},{file:{attributes:{title:"渐进式网络应用程序",sort:14,contributors:["johnnyreilly"],group:"-",anchors:[{title:"现在我们并没有离线环境下运行过",id:"-"},{title:"添加 Workbox",id:"-workbox"},{title:"注册我们的 Service Worker",id:"-service-worker"},{title:"结论",id:"-"}],related:[]},body:'<blockquote class="tip"><div class="tip-content"> 本指南继续沿用<a href="/guides/output-management">管理输出</a>中的代码示例。 </div></blockquote><p>渐进式网络应用程序(Progressive Web Application - PWA)，是一种可以提供类似于原生应用程序(native app)体验的网络应用程序(web app)。PWA 可以用来做很多事。其中最重要的是，在<strong>离线(offline)</strong>时应用程序能够继续运行功能。这是通过使用名为 <a href="https://developers.google.com/web/fundamentals/primers/service-workers/">Service Workers</a> 的网络技术来实现的。</p>\n<p>本章将重点介绍，如何为我们的应用程序添加离线体验。我们将使用名为 <a href="https://github.com/GoogleChrome/workbox">Workbox</a> 的 Google 项目来实现此目的，该项目提供的工具可帮助我们更轻松地配置 web app 的离线支持。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">现在我们并没有离线环境下运行过</span><a class="icon-link" href="#-"></a></h2>\n<p>到目前为止，我们一直是直接查看本地文件系统的输出结果。通常情况下，真正的用户是通过网络访问网络应用程序；用户的浏览器会与一个提供所需资源（例如，<code>.html</code>, <code>.js</code> 和 <code>.css</code> 文件）的<strong>服务器</strong>通讯。</p>\n<p>那么让我们来使用一个简易服务器，搭建出我们所需的离线体验。我们将使用 <a href="https://www.npmjs.com/package/http-server">http-server</a> package 包：<code>npm install http-server --save-dev</code>。还要修改 <code>package.json</code> 的 <code>scripts</code> 部分，来添加一个 <code>start</code> 脚本：</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-diff">{\n  ...\n  "scripts": {\n<span class="token deleted">-    "build": "webpack"</span>\n<span class="token inserted">+    "build": "webpack",</span>\n<span class="token inserted">+    "start": "http-server dist"</span>\n  },\n  ...\n}\n</code></pre>\n<p>如果你之前没有操作过，请运行命令 <code>npm run build</code> 来构建你的项目。然后运行命令 <code>npm start</code>。这应该输出以下：</p>\n<pre><code class="lang-bash"><span class="token operator">></span> http-server dist\n\n启动 http-server，服务目录是 dist\n可以访问：\n  http://xx.x.x.x:8080\n  http://127.0.0.1:8080\n  http://xxx.xxx.x.x:8080\n按下 CTRL-C 停止服务\n</code></pre>\n<p>如果你打开浏览器访问 <code>http://localhost:8080</code> (即 <code>http://127.0.0.1</code>)，你应该会看到在 <code>dist</code> 目录创建出服务，并可以访问 webpack 应用程序。如果停止服务器然后刷新，则 webpack 应用程序不再可访问。</p>\n<p>这就是我们最终要改变的现状。在本章结束时，我们应该要实现的是，停止服务器然后刷新，仍然可以查看应用程序正常运行。</p>\n<h2 class="header"><a class="anchor" href="#-workbox" id="-workbox"></a><span class="text">添加 Workbox</span><a class="icon-link" href="#-workbox"></a></h2>\n<p>添加 workbox-webpack-plugin 插件，并调整 <code>webpack.config.js</code> 文件：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> workbox-webpack-plugin --save-dev\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n<span class="token inserted">+ const WorkboxPlugin = require(\'workbox-webpack-plugin\');</span>\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n  plugins: [\n    new CleanWebpackPlugin([\'dist\']),\n    new HtmlWebpackPlugin({\n<span class="token deleted">-     title: \'Output Management\'</span>\n<span class="token inserted">+     title: \'Progressive Web Application\'</span>\n<span class="token deleted">-   })</span>\n<span class="token inserted">+   }),</span>\n<span class="token inserted">+   new WorkboxPlugin({</span>\n<span class="token inserted">+     // 这些选项帮助 ServiceWorkers 快速启用</span>\n<span class="token inserted">+     // 不允许遗留任何“旧的” ServiceWorkers</span>\n<span class="token inserted">+     clientsClaim: true,</span>\n<span class="token inserted">+     skipWaiting: true</span>\n<span class="token inserted">+   })</span>\n  ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>有了 Workbox，我们再看下执行 <code>npm run build</code> 时会发生什么：</p>\n<pre><code class="lang-bash">clean-webpack-plugin: /mnt/c/Source/webpack-follow-along/dist has been removed.\nHash: 6588e31715d9be04be25\nVersion: webpack 3.10.0\nTime: 782ms\n                                                Asset       Size  Chunks                    Chunk Names\n                                        app.bundle.js     545 kB    0, 1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  app\n                                      print.bundle.js    2.74 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         print\n                                           index.html  254 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nprecache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js  268 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n                                                sw.js       1 kB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/print.js 87 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 477 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n     1 asset\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n        + 2 hidden modules\n</code></pre>\n<p>现在你可以看到，生成了 2 个额外的文件：<code>sw.js</code> 和体积很大的 <code>precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js</code>。<code>sw.js</code> 是 Service Worker 文件，<code>precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js</code> 是 <code>sw.js</code> 引用的文件，所以它也可以运行。可能在你本地生成的文件会有所不同；但是你那里应该会有一个 <code>sw.js</code> 文件。</p>\n<p>所以，值得高兴的是，我们现在已经创建出 Service Worker 的高兴点。接下来该做什么？</p>\n<h2 class="header"><a class="anchor" href="#-service-worker" id="-service-worker"></a><span class="text">注册我们的 Service Worker</span><a class="icon-link" href="#-service-worker"></a></h2>\n<p>让我们将注册 Service Worker，使其出场并开始表演。通过添加以下注册代码来完成此操作：</p>\n<p><strong>index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n  import printMe from \'./print.js\';\n\n<span class="token inserted">+ if (\'serviceWorker\' in navigator) {</span>\n<span class="token inserted">+   window.addEventListener(\'load\', () => {</span>\n<span class="token inserted">+     navigator.serviceWorker.register(\'/sw.js\').then(registration => {</span>\n<span class="token inserted">+       console.log(\'SW registered: \', registration);</span>\n<span class="token inserted">+     }).catch(registrationError => {</span>\n<span class="token inserted">+       console.log(\'SW registration failed: \', registrationError);</span>\n<span class="token inserted">+     });</span>\n<span class="token inserted">+   });</span>\n<span class="token inserted">+ }</span>\n</code></pre>\n<p>再次运行 <code>npm build build</code> 来构建包含注册代码版本的应用程序。然后用 <code>npm start</code> 启动服务。访问 <code>http://localhost:8080</code> 并查看 console 控制台。在那里你应该看到：</p>\n<pre><code class="lang-bash">SW registered\n</code></pre>\n<p>现在来进行测试。停止服务器并刷新页面。如果浏览器能够支持 Service Worker，你应该可以看到你的应用程序还在正常运行。然而，服务器已经<strong>停止</strong>了服务，此刻是 Service Worker 在提供服务。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">结论</span><a class="icon-link" href="#-"></a></h2>\n<p>你已经使用 Workbox 项目构建了一个离线应用程序。开始进入将 web app 改造为 PWA 的旅程。你现在可能想要考虑下一步做什么。在这里的<a href="https://developers.google.com/web/progressive-web-apps/">谷歌文档</a>中可以找到一些不错的资源。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/progressive-web-application/">https://webpack.js.org/guides/progressive-web-application/</a></p>\n</blockquote>\n',title:"渐进式网络应用程序"},title:"渐进式网络应用程序",url:"/guides/progressive-web-application/"},{file:{attributes:{title:"迁移到新版本",sort:15,contributors:["bebraw","chrisVillanueva","domfarolino","frederikprijck","grgur","howdy39","jhnns","johnnyreilly","jouni-kantola","ndelangen","selbekk","sokra"],group:"-",anchors:[{title:"resolve.root, resolve.fallback, resolve.modulesDirectories",id:"resolve-root-resolve-fallback-resolve-modulesdirectories"},{title:"resolve.extensions",id:"resolve-extensions"},{title:"resolve.*",id:"resolve-"},{title:"module.loaders 改为 module.rules",id:"module-loaders-module-rules"},{title:"链式 loader",id:"-loader"},{title:"取消「在模块名中自动添加 -loader 后缀」",id:"-loader-"},{title:"json-loader 不再需要手动添加",id:"json-loader-"},{title:"配置中的 loader 默认相对于 context 进行解析",id:"-loader-context-"},{title:"移除 module.preLoaders 和 module.postLoaders",id:"-module-preloaders-module-postloaders"},{title:"UglifyJsPlugin sourceMap",id:"uglifyjsplugin-sourcemap"},{title:"UglifyJsPlugin warnings",id:"uglifyjsplugin-warnings"},{title:"UglifyJsPlugin 压缩 loaders",id:"uglifyjsplugin-loaders"},{title:"移除 DedupePlugin",id:"-dedupeplugin"},{title:"BannerPlugin - 破坏性改动",id:"bannerplugin-"},{title:"默认加载 OccurrenceOrderPlugin",id:"-occurrenceorderplugin"},{title:"ExtractTextWebpackPlugin - 破坏性改动",id:"extracttextwebpackplugin-"},{title:"ExtractTextPlugin.extract",id:"extracttextplugin-extract"},{title:"new ExtractTextPlugin({options})",id:"new-extracttextplugin-options-"},{title:"全动态 require 现在默认会失败",id:"-require-"},{title:"在 CLI 和配置中使用自定义参数",id:"-cli-"},{title:"require.ensure 以及 AMD require 将采用异步式调用",id:"require-ensure-amd-require-"},{title:"通过 options 配置 loader",id:"-options-loader"},{title:"什么是 options?",id:"-options-"},{title:"LoaderOptionsPlugin context",id:"loaderoptionsplugin-context"},{title:"debug",id:"debug"},{title:"ES2015 的代码分割",id:"es2015-"},{title:"动态表达式",id:"-"},{title:"混合使用 ES2015、AMD 和 CommonJS",id:"-es2015-amd-commonjs"},{title:"Hints",id:"hints"},{title:"模板字符串",id:"-"},{title:"配置中使用 Promise",id:"-promise"},{title:"高级 loader 匹配",id:"-loader-"},{title:"更多的 CLI 参数项",id:"-cli-"},{title:"Loader 变更",id:"loader-"},{title:"Cacheable",id:"cacheable"},{title:"复合 options",id:"-options"}],related:[]},body:'<p>以下各节描述从 webpack 1 到 webpack 2 的重大变化。</p>\n<blockquote class="tip"><div class="tip-content"> webpack 从 1 到 2 的变化，比从 2 到 3 要少很多，所以版本迁移起来难度应该不大。如果你遇到了问题，请查看 <a href="https://github.com/webpack/webpack/releases">更新日志</a> 以了解更多细节。 </div></blockquote><blockquote class="warning"><div class="tip-content"> 随着 webpack 2 版本已经发布一段时间，此章节的内容可能会在不久的将来被转移到博客文章中。最重要的是，webpack 3 版本最近发布，webpack 4 版本即将发布。如上所述，大家最好是参考 <a href="https://github.com/webpack/webpack/releases">更新日志</a> 去进行相应的版本迁移。 </div></blockquote><h2 class="header"><a class="anchor" href="#resolve-root-resolve-fallback-resolve-modulesdirectories" id="resolve-root-resolve-fallback-resolve-modulesdirectories"></a><span class="text"><code>resolve.root</code>, <code>resolve.fallback</code>, <code>resolve.modulesDirectories</code></span><a class="icon-link" href="#resolve-root-resolve-fallback-resolve-modulesdirectories"></a></h2>\n<p>这些选项被一个单独的选项 <code>resolve.modules</code> 取代。更多用法请查看<a href="/configuration/resolve">解析</a>。</p>\n<pre><code class="lang-diff">  resolve: {\n<span class="token deleted">-   root: path.join(__dirname, "src")</span>\n<span class="token inserted">+   modules: [</span>\n<span class="token inserted">+     path.join(__dirname, "src"),</span>\n<span class="token inserted">+     "node_modules"</span>\n<span class="token inserted">+   ]</span>\n  }\n</code></pre>\n<h2 class="header"><a class="anchor" href="#resolve-extensions" id="resolve-extensions"></a><span class="text"><code>resolve.extensions</code></span><a class="icon-link" href="#resolve-extensions"></a></h2>\n<p>此选项不再需要传一个空字符串。此行为被迁移到 <code>resolve.enforceExtension</code>。更多用法请查看<a href="/configuration/resolve">解析</a>。</p>\n<h2 class="header"><a class="anchor" href="#resolve-" id="resolve-"></a><span class="text"><code>resolve.*</code></span><a class="icon-link" href="#resolve-"></a></h2>\n<p>这里更改了几个 API。由于不常用，不在这里详细列出。更多用法请查看<a href="/configuration/resolve">解析</a>。</p>\n<h2 class="header"><a class="anchor" href="#module-loaders-module-rules" id="module-loaders-module-rules"></a><span class="text"><code>module.loaders</code> 改为 <code>module.rules</code></span><a class="icon-link" href="#module-loaders-module-rules"></a></h2>\n<p>旧的 loader 配置被更强大的 rules 系统取代，后者允许配置 loader 以及其他更多选项。\n为了兼容旧版，<code>module.loaders</code> 语法仍然有效，旧的属性名依然可以被解析。\n新的命名约定更易于理解，并且是升级配置使用 <code>module.rules</code> 的好理由。</p>\n<pre><code class="lang-diff">  module: {\n<span class="token deleted">-   loaders: [</span>\n<span class="token inserted">+   rules: [</span>\n      {\n        test: /\\.css$/,\n<span class="token deleted">-       loaders: [</span>\n<span class="token deleted">-         "style-loader",</span>\n<span class="token deleted">-         "css-loader?modules=true"</span>\n<span class="token inserted">+       use: [</span>\n<span class="token inserted">+         {</span>\n<span class="token inserted">+           loader: "style-loader"</span>\n<span class="token inserted">+         },</span>\n<span class="token inserted">+         {</span>\n<span class="token inserted">+           loader: "css-loader",</span>\n<span class="token inserted">+           options: {</span>\n<span class="token inserted">+             modules: true</span>\n<span class="token inserted">+           }</span>\n<span class="token inserted">+         }</span>\n        ]\n      },\n      {\n        test: /\\.jsx$/,\n        loader: "babel-loader", // 这里不再使用 "use"\n        options: {\n          // ...\n        }\n      }\n    ]\n  }\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-loader" id="-loader"></a><span class="text">链式 loader</span><a class="icon-link" href="#-loader"></a></h2>\n<p>就像在 webpack 1 中，loader 可以链式调用，上一个 loader 的输出被作为输入传给下一个 loader。\n使用 <a href="/configuration/module#rule-use">rule.use</a> 配置选项，<code>use</code> 可以设置为一个 loader 数组。\n在 webpack 1 中，loader 通常被用 <code>!</code> 连写。这一写法在 webpack 2 中只在使用旧的选项 <code>module.loaders</code> 时才有效。</p>\n<pre><code class="lang-diff">  module: {\n<span class="token deleted">-   loaders: [{</span>\n<span class="token inserted">+   rules: [{</span>\n      test: /\\.less$/,\n<span class="token deleted">-     loader: "style-loader!css-loader!less-loader"</span>\n<span class="token inserted">+     use: [</span>\n<span class="token inserted">+       "style-loader",</span>\n<span class="token inserted">+       "css-loader",</span>\n<span class="token inserted">+       "less-loader"</span>\n<span class="token inserted">+     ]</span>\n    }]\n  }\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-loader-" id="-loader-"></a><span class="text">取消「在模块名中自动添加 <code>-loader</code> 后缀」</span><a class="icon-link" href="#-loader-"></a></h2>\n<p>在引用 loader 时，不能再省略 <code>-loader</code> 后缀了:</p>\n<pre><code class="lang-diff">  module: {\n    rules: [\n      {\n        use: [\n<span class="token deleted">-         "style",</span>\n<span class="token inserted">+         "style-loader",</span>\n<span class="token deleted">-         "css",</span>\n<span class="token inserted">+         "css-loader",</span>\n<span class="token deleted">-         "less",</span>\n<span class="token inserted">+         "less-loader",</span>\n        ]\n      }\n    ]\n  }\n</code></pre>\n<p>你仍然可以通过配置 <code>resolveLoader.moduleExtensions</code> 配置选项，启用这一旧有行为，但是我们不推荐这么做。</p>\n<pre><code class="lang-diff"><span class="token inserted">+ resolveLoader: {</span>\n<span class="token inserted">+   moduleExtensions: ["-loader"]</span>\n<span class="token inserted">+ }</span>\n</code></pre>\n<p>了解这一改变背后的原因，请查看 <a href="https://github.com/webpack/webpack/issues/2986">#2986</a>。</p>\n<h2 class="header"><a class="anchor" href="#json-loader-" id="json-loader-"></a><span class="text"><code>json-loader</code> 不再需要手动添加</span><a class="icon-link" href="#json-loader-"></a></h2>\n<p>如果没有为 JSON 文件配置 loader，webpack 将自动尝试通过 <a href="https://github.com/webpack/json-loader"><code>json-loader</code></a> 加载 JSON 文件。</p>\n<pre><code class="lang-diff">  module: {\n    rules: [\n<span class="token deleted">-     {</span>\n<span class="token deleted">-       test: /\\.json/,</span>\n<span class="token deleted">-       loader: "json-loader"</span>\n<span class="token deleted">-     }</span>\n    ]\n  }\n</code></pre>\n<p><a href="https://github.com/webpack/webpack/issues/3363">我们决定这么做</a>是为了消除 webpack、 node.js 和 browserify 之间的环境差异。</p>\n<h2 class="header"><a class="anchor" href="#-loader-context-" id="-loader-context-"></a><span class="text">配置中的 loader 默认相对于 context 进行解析</span><a class="icon-link" href="#-loader-context-"></a></h2>\n<p>在 <strong>webpack 1</strong> 中，默认配置下 loader 解析相对于被匹配的文件。然而，在 <strong>webpack 2</strong> 中，默认配置下 loader 解析相对于 <code>context</code> 选项。</p>\n<p>这解决了「在使用 <code>npm link</code> 或引用 <code>context</code> 上下文目录之外的模块时，loader 所导致的模块重复载入」的问题。</p>\n<p>你可以移除掉那些为解决此问题的 hack 方案了：</p>\n<pre><code class="lang-diff">  module: {\n    rules: [\n      {\n        // ...\n<span class="token deleted">-       loader: require.resolve("my-loader")</span>\n<span class="token inserted">+       loader: "my-loader"</span>\n      }\n    ]\n  },\n  resolveLoader: {\n<span class="token deleted">-   root: path.resolve(__dirname, "node_modules")</span>\n  }\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-module-preloaders-module-postloaders" id="-module-preloaders-module-postloaders"></a><span class="text">移除 <code>module.preLoaders</code> 和 <code>module.postLoaders</code></span><a class="icon-link" href="#-module-preloaders-module-postloaders"></a></h2>\n<pre><code class="lang-diff">  module: {\n<span class="token deleted">-   preLoaders: [</span>\n<span class="token inserted">+   rules: [</span>\n      {\n        test: /\\.js$/,\n<span class="token inserted">+       enforce: "pre",</span>\n        loader: "eslint-loader"\n      }\n    ]\n  }\n</code></pre>\n<h2 class="header"><a class="anchor" href="#uglifyjsplugin-sourcemap" id="uglifyjsplugin-sourcemap"></a><span class="text"><code>UglifyJsPlugin</code> sourceMap</span><a class="icon-link" href="#uglifyjsplugin-sourcemap"></a></h2>\n<p><code>UglifyJsPlugin</code> 的 <code>sourceMap</code> 选项现在默认为 <code>false</code> 而不是 <code>true</code>。这意味着如果你在压缩代码时启用了 source map，或者想要让 uglifyjs 的警告能够对应到正确的代码行，你需要将 <code>UglifyJsPlugin</code> 的 <code>sourceMap</code> 设为 <code>true</code>。</p>\n<pre><code class="lang-diff">  devtool: "source-map",\n  plugins: [\n    new UglifyJsPlugin({\n<span class="token inserted">+     sourceMap: true</span>\n    })\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#uglifyjsplugin-warnings" id="uglifyjsplugin-warnings"></a><span class="text"><code>UglifyJsPlugin</code> warnings</span><a class="icon-link" href="#uglifyjsplugin-warnings"></a></h2>\n<p><code>UglifyJsPlugin</code> 的 <code>compress.warnings</code> 选项现在默认为 <code>false</code> 而不是 <code>true</code>。\n这意味着如果你想要看到 uglifyjs 的警告信息，你需要将 <code>compress.warnings</code> 设为 <code>true</code>。</p>\n<pre><code class="lang-diff">  devtool: "source-map",\n  plugins: [\n    new UglifyJsPlugin({\n<span class="token inserted">+     compress: {</span>\n<span class="token inserted">+       warnings: true</span>\n<span class="token inserted">+     }</span>\n    })\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#uglifyjsplugin-loaders" id="uglifyjsplugin-loaders"></a><span class="text"><code>UglifyJsPlugin</code> 压缩 loaders</span><a class="icon-link" href="#uglifyjsplugin-loaders"></a></h2>\n<p><code>UglifyJsPlugin</code> 不再压缩 loaders。在未来很长一段时间里，需要通过设置 <code>minimize:true</code> 来压缩 loaders。参考 loader 文档里的相关选项。</p>\n<p>loaders 的压缩模式将在 webpack 3 或后续版本中取消。</p>\n<p>为了兼容旧的 loaders，loaders 可以通过插件来切换到压缩模式：</p>\n<pre><code class="lang-diff">  plugins: [\n<span class="token inserted">+   new webpack.LoaderOptionsPlugin({</span>\n<span class="token inserted">+     minimize: true</span>\n<span class="token inserted">+   })</span>\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-dedupeplugin" id="-dedupeplugin"></a><span class="text">移除 <code>DedupePlugin</code></span><a class="icon-link" href="#-dedupeplugin"></a></h2>\n<p>不再需要 <code>webpack.optimize.DedupePlugin</code>。请从配置中移除。</p>\n<h2 class="header"><a class="anchor" href="#bannerplugin-" id="bannerplugin-"></a><span class="text"><code>BannerPlugin</code> - 破坏性改动</span><a class="icon-link" href="#bannerplugin-"></a></h2>\n<p><code>BannerPlugin</code> 不再接受两个参数，而是只接受单独的 options 对象。</p>\n<pre><code class="lang-diff">  plugins: [\n<span class="token deleted">-    new webpack.BannerPlugin(\'Banner\', {raw: true, entryOnly: true});</span>\n<span class="token inserted">+    new webpack.BannerPlugin({banner: \'Banner\', raw: true, entryOnly: true});</span>\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-occurrenceorderplugin" id="-occurrenceorderplugin"></a><span class="text">默认加载 <code>OccurrenceOrderPlugin</code></span><a class="icon-link" href="#-occurrenceorderplugin"></a></h2>\n<p> <code>OccurrenceOrderPlugin</code> 现在默认启用，并已重命名（在 webpack 1 中为 <code>OccurenceOrderPlugin</code>）。\n因此，请确保从你的配置中删除该插件：</p>\n<pre><code class="lang-diff">  plugins: [\n    // webpack 1\n<span class="token deleted">-   new webpack.optimize.OccurenceOrderPlugin()</span>\n    // webpack 2\n<span class="token deleted">-   new webpack.optimize.OccurrenceOrderPlugin()</span>\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#extracttextwebpackplugin-" id="extracttextwebpackplugin-"></a><span class="text"><code>ExtractTextWebpackPlugin</code> - 破坏性改动</span><a class="icon-link" href="#extracttextwebpackplugin-"></a></h2>\n<p><a href="https://github.com/webpack/extract-text-webpack-plugin">ExtractTextPlugin</a> 需要使用版本 2，才能在 webpack 2 下正常运行。</p>\n<p><code>npm install --save-dev extract-text-webpack-plugin</code></p>\n<p>这一插件的配置变化主要体现在语法上。</p>\n<h3 class="header"><a class="anchor" href="#extracttextplugin-extract" id="extracttextplugin-extract"></a><span class="text"><code>ExtractTextPlugin.extract</code></span><a class="icon-link" href="#extracttextplugin-extract"></a></h3>\n<pre><code class="lang-diff">module: {\n  rules: [\n    {\n      test: /.css$/,\n<span class="token deleted">-      loader: ExtractTextPlugin.extract("style-loader", "css-loader", { publicPath: "/dist" })</span>\n<span class="token inserted">+      use: ExtractTextPlugin.extract({</span>\n<span class="token inserted">+        fallback: "style-loader",</span>\n<span class="token inserted">+        use: "css-loader",</span>\n<span class="token inserted">+        publicPath: "/dist"</span>\n<span class="token inserted">+      })</span>\n    }\n  ]\n}\n</code></pre>\n<h3 class="header"><a class="anchor" href="#new-extracttextplugin-options-" id="new-extracttextplugin-options-"></a><span class="text"><code>new ExtractTextPlugin({options})</code></span><a class="icon-link" href="#new-extracttextplugin-options-"></a></h3>\n<pre><code class="lang-diff">plugins: [\n<span class="token deleted">-  new ExtractTextPlugin("bundle.css", { allChunks: true, disable: false })</span>\n<span class="token inserted">+  new ExtractTextPlugin({</span>\n<span class="token inserted">+    filename: "bundle.css",</span>\n<span class="token inserted">+    disable: false,</span>\n<span class="token inserted">+    allChunks: true</span>\n<span class="token inserted">+  })</span>\n]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-require-" id="-require-"></a><span class="text">全动态 require 现在默认会失败</span><a class="icon-link" href="#-require-"></a></h2>\n<p>只有一个表达式的依赖（例如 <code>require(expr)</code>）将创建一个空的 context 而不是一个完整目录的 context。</p>\n<p>这样的代码应该进行重构，因为它不能与 ES2015 模块一起使用。如果你确定不会有 ES2015 模块，你可以使用 <code>ContextReplacementPlugin</code> 来指示 compiler 进行正确的解析。</p>\n<blockquote class="todo"><div class="tip-content"> Link to an article about dynamic dependencies. </div></blockquote><h3 class="header"><a class="anchor" href="#-cli-" id="-cli-"></a><span class="text">在 CLI 和配置中使用自定义参数</span><a class="icon-link" href="#-cli-"></a></h3>\n<p>如果你之前滥用 CLI 来传自定义参数到配置中，比如：</p>\n<p><code>webpack --custom-stuff</code></p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">var</span> customStuff <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"--custom-stuff"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token comment">/* ... */</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span>\n</code></pre>\n<p>你将会发现新版中不再允许这么做。CLI 现在更加严格了。</p>\n<p>替代地，现在提供了一个接口来传递参数给配置。我们应该采用这种新方式，在未来许多工具将可能依赖于此。</p>\n<p><code>webpack --env.customStuff</code></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> customStuff <span class="token operator">=</span> env<span class="token punctuation">.</span>customStuff<span class="token punctuation">;</span>\n  <span class="token comment">/* ... */</span>\n  <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>详见 <a href="/api/cli">CLI</a>。</p>\n<h2 class="header"><a class="anchor" href="#require-ensure-amd-require-" id="require-ensure-amd-require-"></a><span class="text"><code>require.ensure</code> 以及 AMD <code>require</code> 将采用异步式调用</span><a class="icon-link" href="#require-ensure-amd-require-"></a></h2>\n<p>现在这些函数总是异步的，而不是当 chunk 已经加载完成的时候同步调用它们的回调函数(callback)。</p>\n<p><strong><code>require.ensure</code> 现在依赖于原生的 <code>Promise</code>。如果在不支持 Promise 的环境里使用 <code>require.ensure</code>，你需要添加 polyfill。</strong></p>\n<h2 class="header"><a class="anchor" href="#-options-loader" id="-options-loader"></a><span class="text">通过 <code>options</code> 配置 loader</span><a class="icon-link" href="#-options-loader"></a></h2>\n<p>你不能再通过 <code>webpack.config.js</code> 的自定义属性来配置 loader。只能通过 <code>options</code> 来配置。下面配置的 <code>ts</code> 属性在 webpack 2 下不再有效：</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 在 webpack 2 中无效</span>\n  ts<span class="token punctuation">:</span> <span class="token punctuation">{</span> transpileOnly<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-options-" id="-options-"></a><span class="text">什么是 <code>options</code>?</span><a class="icon-link" href="#-options-"></a></h3>\n<p>好问题。严格来说，有两种办法，都可以用来配置 webpack 的 loader。典型的 <code>options</code> 被称为 <code>query</code>，是一个可以被添加到 loader 名之后的字符串。它比较像一个 query string，但是实际上有<a href="https://github.com/webpack/loader-utils#parsequery">更强大的能力</a>：</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'ts-loader?\'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> transpileOnly<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>不过它也可以分开来，写成一个单独的对象，紧跟在 loader 属性后面：</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span>  <span class="token punctuation">{</span> transpileOnly<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#loaderoptionsplugin-context" id="loaderoptionsplugin-context"></a><span class="text"><code>LoaderOptionsPlugin</code> context</span><a class="icon-link" href="#loaderoptionsplugin-context"></a></h2>\n<p>有的 loader 需要从配置中读取一些 context 信息。在未来很长一段时间里，这将需要通过 loader options 传入。详见 loader 文档的相关选项。</p>\n<p>为了保持对旧 loaders 的兼容，这些信息可以通过插件传进来：</p>\n<pre><code class="lang-diff">  plugins: [\n<span class="token inserted">+   new webpack.LoaderOptionsPlugin({</span>\n<span class="token inserted">+     options: {</span>\n<span class="token inserted">+       context: __dirname</span>\n<span class="token inserted">+     }</span>\n<span class="token inserted">+   })</span>\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#debug" id="debug"></a><span class="text"><code>debug</code></span><a class="icon-link" href="#debug"></a></h2>\n<p>在 webpack 1 中 <code>debug</code> 选项可以将 loader 切换到调试模式(debug mode)。在未来很长一段时间里，这将需要通过 loader 选项传递。详见 loader 文档的相关选项。</p>\n<p>loaders 的调试模式将在 webpack 3 或后续版本中取消。</p>\n<p>为了保持对旧 loaders 的兼容，loader 可以通过插件来切换到调试模式：</p>\n<pre><code class="lang-diff"><span class="token deleted">- debug: true,</span>\n  plugins: [\n<span class="token inserted">+   new webpack.LoaderOptionsPlugin({</span>\n<span class="token inserted">+     debug: true</span>\n<span class="token inserted">+   })</span>\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#es2015-" id="es2015-"></a><span class="text">ES2015 的代码分割</span><a class="icon-link" href="#es2015-"></a></h2>\n<p>在 webpack 1 中，可以使用 <a href="/api/module-methods#require-ensure"><code>require.ensure</code></a>作为实现应用程序的懒加载 chunks 的一种方法：</p>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./module"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>ES2015 模块加载规范定义了 <a href="/api/module-methods#import-"><code>import()</code></a> 方法，可以在运行时(runtime)动态地加载 ES2015 模块。webpack 将 <code>import()</code> 作为分割点(split-point)并将所要请求的模块(requested module)放置到一个单独的 chunk 中。<code>import()</code> 接收模块名作为参数，并返回一个 Promise。</p>\n<pre><code class="lang-js"><span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./module"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>module <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> module<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Chunk loading failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>好消息是：如果加载 chunk 失败，我们现在可以进行处理，因为现在它基于 <code>Promise</code>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">动态表达式</span><a class="icon-link" href="#-"></a></h2>\n<p>可以传递部分表达式给 <code>import()</code>。这与 CommonJS 对表达式的处理方式一致（webpack 为所有可能匹配的文件创建 context）。</p>\n<p><code>import()</code> 为每一个可能的模块创建独立的 chunk。</p>\n<pre><code class="lang-js"><span class="token keyword">function</span> <span class="token function">route</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./routes/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/route`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>route <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">route<span class="token punctuation">.</span>Route</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 上面代码为每个可能的路由创建独立的 chunk</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-es2015-amd-commonjs" id="-es2015-amd-commonjs"></a><span class="text">混合使用 ES2015、AMD 和 CommonJS</span><a class="icon-link" href="#-es2015-amd-commonjs"></a></h2>\n<p>你可以自由混合使用三种模块类型（甚至在同一个文件中）。在这个情况中 webpack 的行为和 babel 以及 node-eps 一致：</p>\n<pre><code class="lang-javascript"><span class="token comment">// CommonJS 调用 ES2015 模块</span>\n<span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nbook<span class="token punctuation">.</span>currentPage<span class="token punctuation">;</span>\nbook<span class="token punctuation">.</span><span class="token function">readPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbook<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">===</span> <span class="token string">"This is a book"</span><span class="token punctuation">;</span>\n</code></pre>\n<pre><code class="lang-javascript"><span class="token comment">// ES2015 模块调用 CommonJS</span>\n<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span> <span class="token comment">// module.exports 映射到 default</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> readFileSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span> <span class="token comment">// 从返回对象(returned object+)中读取命名的导出方法(named exports)</span>\n\n<span class="token keyword">typeof</span> fs<span class="token punctuation">.</span>readFileSync <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">;</span>\n<span class="token keyword">typeof</span> readFileSync <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">;</span>\n</code></pre>\n<p>值得注意的是，你需要让 Babel 不解析这些模块符号，从而让 webpack 可以使用它们。你可以通过设置如下配置到 .babelrc 或 babel-loader 来实现这一点。</p>\n<p><strong>.babelrc</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#hints" id="hints"></a><span class="text">Hints</span><a class="icon-link" href="#hints"></a></h2>\n<p>不需要改变什么，但有机会改变。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">模板字符串</span><a class="icon-link" href="#-"></a></h3>\n<p>webpack 现在支持表达式中的模板字符串了。这意味着你可以在 webpack 构建中使用它们：</p>\n<pre><code class="lang-diff"><span class="token deleted">- require("./templates/" + name);</span>\n<span class="token inserted">+ require(`./templates/${name}`);</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-promise" id="-promise"></a><span class="text">配置中使用 Promise</span><a class="icon-link" href="#-promise"></a></h3>\n<p>webpack 现在支持在配置文件中返回 <code>Promise</code> 了。这让你能在配置文件中做异步处理。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">fetchLangs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>lang <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    entry<span class="token punctuation">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> LANGUAGE<span class="token punctuation">:</span> lang <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-loader-" id="-loader-"></a><span class="text">高级 loader 匹配</span><a class="icon-link" href="#-loader-"></a></h3>\n<p>webpack 现在支持对 loader 进行更多方式的匹配。</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      resource<span class="token punctuation">:</span> <span class="token regex">/filename/</span><span class="token punctuation">,</span> <span class="token comment">// 匹配 "/path/filename.js"</span>\n      resourceQuery<span class="token punctuation">:</span> <span class="token regex">/^\\?querystring$/</span><span class="token punctuation">,</span> <span class="token comment">// 匹配 "?querystring"</span>\n      issuer<span class="token punctuation">:</span> <span class="token regex">/filename/</span><span class="token punctuation">,</span> <span class="token comment">// 如果请求 "/path/filename.js" 则匹配 "/path/something.js"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-cli-" id="-cli-"></a><span class="text">更多的 CLI 参数项</span><a class="icon-link" href="#-cli-"></a></h3>\n<p>你可以使用一些新的 CLI 参数项：</p>\n<p><code>--define process.env.NODE_ENV=&quot;production&quot;</code> 见 <a href="/plugins/define-plugin/"><code>DefinePlugin</code></a>。</p>\n<p><code>--display-depth</code> 显示每个模块到入口的距离。</p>\n<p><code>--display-used-exports</code> 显示一个模块中被使用的 exports 信息。</p>\n<p><code>--display-max-modules</code> 设置输出时显示的模块数量（默认是 15）。</p>\n<p><code>-p</code> 能够定义 <code>process.env.NODE_ENV</code> 为 <code>&quot;production&quot;</code>。</p>\n<h2 class="header"><a class="anchor" href="#loader-" id="loader-"></a><span class="text">Loader 变更</span><a class="icon-link" href="#loader-"></a></h2>\n<p>以下变更仅影响 loader 的开发者。</p>\n<h3 class="header"><a class="anchor" href="#cacheable" id="cacheable"></a><span class="text">Cacheable</span><a class="icon-link" href="#cacheable"></a></h3>\n<p>Loaders 现在默认可被缓存。Loaders 如果不想被缓存，需要选择不被缓存。</p>\n<pre><code class="lang-diff">  // 缓存 loader\n  module.exports = function(source) {\n<span class="token deleted">-   this.cacheable();</span>\n    return source;\n  }\n</code></pre>\n<pre><code class="lang-diff">  // 不缓存 loader\n  module.exports = function(source) {\n<span class="token inserted">+   this.cacheable(false);</span>\n    return source;\n  }\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-options" id="-options"></a><span class="text">复合 options</span><a class="icon-link" href="#-options"></a></h3>\n<p><strong>webpack 1</strong> 只支持能够「可 <code>JSON.stringify</code>的对象」作为 loader 的 options。</p>\n<p><strong>webpack 2</strong> 现在支持任意 JS 对象作为 loader 的 options.</p>\n<p>webpack <a href="https://github.com/webpack/webpack/releases/tag/v2.2.1">2.2.1</a>之前（即从 2.0.0 到 2.2.0），使用复合 options，需要在 <code>options</code> 对象上添加 <code>ident</code>，允许它能够被其他 loader 引用。<strong>这在 2.2.1</strong> 中被删除，因此目前的迁移不再需要使用 <code>ident</code> 键。</p>\n<pre><code class="lang-diff">{\n  test: /\\.ext/\n  use: {\n    loader: \'...\',\n    options: {\n<span class="token deleted">-     ident: \'id\',</span>\n      fn: () => require(\'./foo.js\')\n    }\n  }\n}\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/migrating/">https://webpack.js.org/guides/migrating/</a></p>\n</blockquote>\n',title:"迁移到新版本"},title:"迁移到新版本",url:"/guides/migrating/"},{file:{attributes:{title:"使用环境变量",sort:16,contributors:["grisanu","simon04","tbroadley"],related:[{title:"The Fine Art of the webpack 3 Config",url:"https://blog.flennik.com/the-fine-art-of-the-webpack-2-config-dc4d19d7f172#d60a"}],group:"-",anchors:[]},body:'<p>要在<a href="/guides/development">开发</a>和<a href="/guides/production">生产构建</a>之间，消除 <code>webpack.config.js</code> 的差异。你可能需要环境变量。</p>\n<p>webpack 命令行<a href="/api/cli/#environment-options">环境配置</a>中，通过设置 <code>--env</code> 可以使你根据需要，传入尽可能多的环境变量。在 <code>webpack.config.js</code> 文件中可以访问到这些环境变量。例如，<code>--env.production</code> 或 <code>--env.NODE_ENV=local</code>（<code>NODE_ENV</code> 通常约定用于定义环境类型，查看<a href="https://dzone.com/articles/what-you-should-know-about-node-env">这里</a>）。</p>\n<pre><code class="lang-bash">webpack --env.NODE_ENV<span class="token operator">=</span>local --env.production --progress\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 如果设置 <code>env</code> 变量，却没有赋值，<code>--env.production</code> 默认将 <code>--env.production</code> 设置为 <code>true</code>。还有其他可以使用的语法。有关详细信息，请查看 <a href="/api/cli/#environment-options">webpack CLI</a> 文档。 </div></blockquote><p>然而，你必须对 webpack 配置进行一处修改。通常，在 webpack config 中，<code>module.exports</code> 指向配置对象。要使用 <code>env</code> 变量，你必须将 <code>module.exports</code> 转换成一个函数：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> env <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Use env.&lt;YOUR VARIABLE> here:</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'NODE_ENV: \'</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span>NODE_ENV<span class="token punctuation">)</span> <span class="token comment">// \'local\'</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Production: \'</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span>production<span class="token punctuation">)</span> <span class="token comment">// true</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    entry<span class="token punctuation">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n      path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/environment-variables/">https://webpack.js.org/guides/environment-variables/</a></p>\n</blockquote>\n',title:"使用环境变量"},title:"使用环境变量",url:"/guides/environment-variables/"},{file:{attributes:{title:"构建性能",sort:17,contributors:["sokra","tbroadley"],group:"-",anchors:[{title:"常规",id:"-"},{title:"保持版本最新",id:"-"},{title:"Loaders",id:"loaders"},{title:"Bootstrap",id:"bootstrap"},{title:"解析",id:"-"},{title:"Dlls",id:"dlls"},{title:"Smaller = Faster",id:"smaller-faster"},{title:"Worker Pool",id:"worker-pool"},{title:"持久化缓存",id:"-"},{title:"自定义 plugins/loaders",id:"-plugins-loaders"},{title:"Development",id:"development"},{title:"增量编译",id:"-"},{title:"在内存中编译",id:"-"},{title:"Devtool",id:"devtool"},{title:"避免在生产环境下才会用到的工具",id:"-"},{title:"最小化入口 chunk",id:"-chunk"},{title:"Production",id:"production"},{title:"多个编译时",id:"-"},{title:"Source Maps",id:"source-maps"},{title:"工具相关问题",id:"-"},{title:"Babel",id:"babel"},{title:"Typescript",id:"typescript"},{title:"Sass",id:"sass"}],related:[]},body:'<p>本指南包含一些改进构建/编译性能的实用技巧。</p>\n<hr>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">常规</span><a class="icon-link" href="#-"></a></h2>\n<p>无论你正在 <a href="/guides/development">development</a> 或构建 <a href="/guides/production">production</a>，以下做法应该帮助到你达到最佳。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">保持版本最新</span><a class="icon-link" href="#-"></a></h3>\n<p>使用最新的 webpack 版本。我们会经常进行性能优化。 webpack 的最新稳定版本是：</p>\n<p><a href="https://github.com/webpack/webpack/releases"><img src="https://img.shields.io/npm/v/webpack.svg?label=webpack&amp;style=flat-square&amp;maxAge=3600" alt="latest webpack version"></a></p>\n<p>保持最新的 <strong>Node.js</strong> 也能够保证性能。除此之外，保证你的包管理工具 (例如 <code>npm</code> 或者 <code>yarn</code> ) 为最新也能保证性能。较新的版本能够建立更高效的模块树以及提高解析速度。</p>\n<h3 class="header"><a class="anchor" href="#loaders" id="loaders"></a><span class="text">Loaders</span><a class="icon-link" href="#loaders"></a></h3>\n<p>将 loaders 应用于最少数的必要模块中。而不是:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n  loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>使用 <code>include</code> 字段仅将 loader 模块应用在实际需要用其转换的位置中：</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#bootstrap" id="bootstrap"></a><span class="text">Bootstrap</span><a class="icon-link" href="#bootstrap"></a></h3>\n<p>每个额外的 loader/plugin 都有启动时间。尽量少使用不同的工具。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">解析</span><a class="icon-link" href="#-"></a></h3>\n<p>以下几步可以提供解析速度:</p>\n<ul>\n<li>尽量减少 <code>resolve.modules</code>, <code>resolve.extensions</code>, <code>resolve.mainFiles</code>, <code>resolve.descriptionFiles</code> 中类目的数量，因为他们会增加文件系统调用的次数。</li>\n<li>如果你不使用 symlinks ，可以设置 <code>resolve.symlinks: false</code> (例如 <code>npm link</code> 或者 <code>yarn link</code>).</li>\n<li>如果你使用自定义解析 plugins ，并且没有指定 context 信息，可以设置 <code>resolve.cacheWithContext: false</code> 。</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#dlls" id="dlls"></a><span class="text">Dlls</span><a class="icon-link" href="#dlls"></a></h3>\n<p>使用 <code>DllPlugin</code> 将更改不频繁的代码进行单独编译。这将改善引用程序的编译速度，即使它增加了构建过程的复杂性。</p>\n<h3 class="header"><a class="anchor" href="#smaller-faster" id="smaller-faster"></a><span class="text">Smaller = Faster</span><a class="icon-link" href="#smaller-faster"></a></h3>\n<p>减少编译的整体大小，以提高构建性能。尽量保持 chunks 小巧。</p>\n<ul>\n<li>使用 更少/更小 的库。</li>\n<li>在多页面应用程序中使用 <code>CommonsChunksPlugin</code>。</li>\n<li>在多页面应用程序中以 <code>async</code> 模式使用 <code>CommonsChunksPlugin</code> 。</li>\n<li>移除不使用的代码。</li>\n<li>只编译你当前正在开发部分的代码。</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#worker-pool" id="worker-pool"></a><span class="text">Worker Pool</span><a class="icon-link" href="#worker-pool"></a></h3>\n<p><code>thread-loader</code> 可以将非常消耗资源的 loaders 转存到 worker pool 中。</p>\n<blockquote class="warning"><div class="tip-content"> 不要使用太多的 workers ，因为 Node.js 的 runtime 和 loader 有一定的启动开销。最小化 workers 和主进程间的模块传输。进程间通讯(IPC)是非常消耗资源的。 </div></blockquote><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">持久化缓存</span><a class="icon-link" href="#-"></a></h3>\n<p>使用 <code>cache-loader</code> 启用持久化缓存。使用 <code>package.json</code> 中的 <code>&quot;postinstall&quot;</code> 清除缓存目录。</p>\n<h3 class="header"><a class="anchor" href="#-plugins-loaders" id="-plugins-loaders"></a><span class="text">自定义 plugins/loaders</span><a class="icon-link" href="#-plugins-loaders"></a></h3>\n<p>这里不对它们配置的性能问题作过多赘述。</p>\n<hr>\n<h2 class="header"><a class="anchor" href="#development" id="development"></a><span class="text">Development</span><a class="icon-link" href="#development"></a></h2>\n<p>下面步骤对于 <em>development</em> 特别有用。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">增量编译</span><a class="icon-link" href="#-"></a></h3>\n<p>使用 webpack 的监听模式。不要使用其他工具来监听你的文件和调用 webpack 。在监听模式下构建会记录时间戳并将信息传递给编译让缓存失效。</p>\n<p>在某些设置中，监听会回退到轮询模式。有许多监听文件会导致 CPU 大量负载。在这些情况下，你可以使用 <code>watchOptions.poll</code> 来增加轮询的间隔。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">在内存中编译</span><a class="icon-link" href="#-"></a></h3>\n<p>以下几个实用工具通过在内存中进行代码的编译和资源的提供，但并不写入磁盘来提高性能:</p>\n<ul>\n<li><code>webpack-dev-server</code></li>\n<li><code>webpack-hot-middleware</code></li>\n<li><code>webpack-dev-middleware</code></li>\n</ul>\n<h3 class="header"><a class="anchor" href="#devtool" id="devtool"></a><span class="text">Devtool</span><a class="icon-link" href="#devtool"></a></h3>\n<p>需要注意的是不同的 <code>devtool</code> 的设置，会导致不同的性能差异。</p>\n<ul>\n<li><code>&quot;eval&quot;</code> 具有最好的性能，但并不能帮助你转译代码。</li>\n<li>如果你能接受稍差一些的 mapping 质量，可以使用 <code>cheap-source-map</code> 选项来提高性能</li>\n<li>使用 <code>eval-source-map</code> 配置进行增量编译。</li>\n</ul>\n<p>=&gt; 在大多数情况下，<code>cheap-module-eval-source-map</code> 是最好的选择。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">避免在生产环境下才会用到的工具</span><a class="icon-link" href="#-"></a></h3>\n<p>某些实用工具， plugins 和 loaders 都只能在构建生产环境时才有用。例如，在开发时使用 <code>UglifyJsPlugin</code> 来压缩和修改代码是没有意义的。以下这些工具在开发中通常被排除在外:</p>\n<ul>\n<li><code>UglifyJsPlugin</code></li>\n<li><code>ExtractTextPlugin</code></li>\n<li><code>[hash]</code>/<code>[chunkhash]</code></li>\n<li><code>AggressiveSplittingPlugin</code></li>\n<li><code>AggressiveMergingPlugin</code></li>\n<li><code>ModuleConcatenationPlugin</code></li>\n</ul>\n<h3 class="header"><a class="anchor" href="#-chunk" id="-chunk"></a><span class="text">最小化入口 chunk</span><a class="icon-link" href="#-chunk"></a></h3>\n<p>webpack 只会在文件系统中生成已经更新的 chunk 。对于某些配置选项(HMR, <code>[name]</code>/<code>[chunkhash]</code> in <code>output.chunkFilename</code>, <code>[hash]</code>)来说，除了更新的 chunks 无效之外，入口 chunk 也不会生效。</p>\n<p>应当在生成入口 chunk 时，尽量减少入口 chunk 的体积，以提高性能。下述代码块将只提取包含 runtime 的 chunk ，<em>其他 chunk 都作为子模块</em>:</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"manifest"</span><span class="token punctuation">,</span>\n  minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<hr>\n<h2 class="header"><a class="anchor" href="#production" id="production"></a><span class="text">Production</span><a class="icon-link" href="#production"></a></h2>\n<p>以下步骤在 <em>production</em> 中非常有用。</p>\n<blockquote class="warning"><div class="tip-content"> <strong>不要为了非常小的性能增益，牺牲你应用程序的质量！</strong> 请注意，优化代码质量在大多数情况下比构建性能更重要。 </div></blockquote><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">多个编译时</span><a class="icon-link" href="#-"></a></h3>\n<p>当进行多个编译时，以下工具可以帮助到你:</p>\n<ul>\n<li><a href="https://github.com/trivago/parallel-webpack"><code>parallel-webpack</code></a>: 它允许编译工作在 worker 池中进行。</li>\n<li><code>cache-loader</code>: 缓存可以在多个编译时之间共享。</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#source-maps" id="source-maps"></a><span class="text">Source Maps</span><a class="icon-link" href="#source-maps"></a></h3>\n<p>Source maps 真的很消耗资源。你真的需要他们？</p>\n<hr>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">工具相关问题</span><a class="icon-link" href="#-"></a></h2>\n<p>下列工具存在某些可能会降低构建性能的问题。</p>\n<h3 class="header"><a class="anchor" href="#babel" id="babel"></a><span class="text">Babel</span><a class="icon-link" href="#babel"></a></h3>\n<ul>\n<li>项目中的 preset/plugins 数量最小化。</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#typescript" id="typescript"></a><span class="text">Typescript</span><a class="icon-link" href="#typescript"></a></h3>\n<ul>\n<li>在单独的进程中使用 <code>fork-ts-checker-webpack-plugin</code> 进行类型检查。</li>\n<li>配置 loaders 跳过类型检查。</li>\n<li>使用 <code>ts-loader</code> 时，设置 <code>happyPackMode: true</code> / <code>transpileOnly: true</code>。</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#sass" id="sass"></a><span class="text">Sass</span><a class="icon-link" href="#sass"></a></h3>\n<ul>\n<li><code>node-sass</code> 中有个来自 Node.js 线程池的阻塞线程的 bug。 当使用 <code>thread-loader</code> 时，需要设置 <code>workerParallelJobs: 2</code>。</li>\n</ul>\n',title:"构建性能"},title:"构建性能",url:"/guides/build-performance/"},{file:{attributes:{title:"开发 - Vagrant",sort:19,contributors:["SpaceK33z","chrisVillanueva"],group:"-",anchors:[{title:"项目配置",id:"-"},{title:"启动服务器",id:"-"},{title:"配合 nginx 的高级用法",id:"-nginx-"},{title:"小结",id:"-"}],related:[]},body:'<p>如果你在开发一个更高级的项目，并且使用 <a href="https://www.vagrantup.com/">Vagrant</a> 来实现在虚拟机(Virtual Machine)上运行你的开发环境(development environment)，那么你或许需要在虚拟机上运行 webpack。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">项目配置</span><a class="icon-link" href="#-"></a></h2>\n<p>首先，确保 <code>Vagrantfile</code> 拥有一个固定 IP。</p>\n<pre><code class="lang-ruby"><span class="token constant">Vagrant</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>\n  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>network <span class="token symbol">:private_network</span><span class="token punctuation">,</span> ip<span class="token punctuation">:</span> <span class="token string">"10.10.10.61"</span>\n<span class="token keyword">end</span>\n</code></pre>\n<p>接下来便是在项目中安装 webpack 和 webpack-dev-server。</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack webpack-dev-server\n</code></pre>\n<p>确保已经设好配置文件 <code>webpack.config.js</code>。如果没有的话，下面的示例代码可以作为入门的简单配置：</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  context<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n  entry<span class="token punctuation">:</span> <span class="token string">"./app.js"</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>然后创建一个 <code>index.html</code> 文件。其中的 <code>script</code> 标签应当指向你的 bundle。如果 <code>output.filename</code> 没有在配置里设定，它的默认值便是 <code>bundle.js</code>。</p>\n<pre><code class="lang-html"><span class="token doctype">&lt;!DOCTYPE html></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/bundle.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Heey!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>注意，你也需要创建一个 <code>app.js</code> 文件。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">启动服务器</span><a class="icon-link" href="#-"></a></h2>\n<p>现在我们可以启动服务器了：</p>\n<pre><code class="lang-bash">webpack-dev-server --host 0.0.0.0 --public 10.10.10.61:8080 --watch-poll\n</code></pre>\n<p>默认配置下，服务器只允许在它的本地访问。通过更改 <code>--host</code> 参数，便能够在我们的 PC 上访问它。</p>\n<p>webpack-dev-server 会在 bundle 中加上一段连接 WebSocket 的脚本，一旦你的文件被更改，服务器便会重新加载应用。<code>--public</code> 参数便是为了告诉脚本从哪里去找 WebSocket。服务器默认使用 <code>8080</code> 端口，我们也需要在这里标明。</p>\n<p><code>--watch-poll</code> 确保 webpack 能够检测到文件的更改。默认配置下，webpack 会监听文件系统触发的相关事件，但是 VirtualBox 总会有这样或那样的问题。</p>\n<p>现在服务器应该能够通过 <code>http://10.10.10.61:8080</code> 访问了。如果你改动了 <code>app.js</code>，应用便会重新加载。</p>\n<h2 class="header"><a class="anchor" href="#-nginx-" id="-nginx-"></a><span class="text">配合 nginx 的高级用法</span><a class="icon-link" href="#-nginx-"></a></h2>\n<p>为了更好的模拟类生产环境(production-like environment)，还可以用 nginx 来代理 webpack-dev-server。</p>\n<p>在你的 nginx 配置文件中，加入下面代码：</p>\n<pre><code class="lang-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>\n  <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>\n    <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>\n    <span class="token keyword">proxy_http_version</span> <span class="token number">1.1</span><span class="token punctuation">;</span>\n    <span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>\n    <span class="token keyword">proxy_set_header</span> Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>\n    <span class="token keyword">error_page</span> <span class="token number">502</span> @start<span class="token operator">-</span>webpack<span class="token operator">-</span>dev<span class="token operator">-</span><span class="token keyword">server</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">location</span> @start<span class="token operator">-</span>webpack<span class="token operator">-</span>dev<span class="token operator">-</span><span class="token keyword">server</span> <span class="token punctuation">{</span>\n    <span class="token keyword">default_type</span> text<span class="token operator">/</span>plain<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">502</span> <span class="token string">"Please start the webpack-dev-server first."</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>proxy_set_header</code> 这几行配置很重要，因为它们关系到 WebSocket 的正确运行。</p>\n<p>上一节中启动 webpack-dev-server 的命令可改为：</p>\n<pre><code class="lang-bash">webpack-dev-server --public 10.10.10.61 --watch-poll\n</code></pre>\n<p>现在服务器只能通过 <code>127.0.0.1</code> 访问，这点关系不大，因为 ngnix 能够使得你的 PC 能访问到服务器。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">小结</span><a class="icon-link" href="#-"></a></h2>\n<p>我们能够从固定 IP 访问 Vagrant box，然后由于公开了 webpack-dev-server，使浏览器可以直接访问到它。最后解决了 VirtualBox 不派发文件系统事件的常见问题，此问题会导致服务器不重新加载文件更改。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/development-vagrant/">https://webpack.js.org/guides/development-vagrant/</a></p>\n</blockquote>\n',title:"开发 - Vagrant"},title:"开发 - Vagrant",url:"/guides/development-vagrant/"},{file:{attributes:{title:"管理依赖",sort:20,contributors:["chrisVillanueva","ndelangen","sokra"],group:"-",anchors:[{title:"带表达式的 require 语句",id:"-require-"},{title:"require.context",id:"require-context"},{title:"上下文模块 API",id:"-api"}],related:[]},body:'<blockquote>\n<p>es6 modules</p>\n<p>commonjs</p>\n<p>amd</p>\n</blockquote>\n<h2 class="header"><a class="anchor" href="#-require-" id="-require-"></a><span class="text">带表达式的 require 语句</span><a class="icon-link" href="#-require-"></a></h2>\n<p>如果你的 request 含有表达式(expressions)，会创建一个上下文(context)，因为在编译时(compile time)并不清楚<strong>具体</strong>是哪一个模块被导入。</p>\n<p>示例：</p>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./template/"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">".ejs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>webpack 解析 <code>require()</code> 的调用，提取出来如下这些信息：</p>\n<pre><code class="lang-diff">Directory: ./template\nRegular expression: /^.*\\.ejs$/\n</code></pre>\n<p><strong>具有上下文的模块</strong></p>\n<p>（译者注：这里的 request 应该是指在 require() 语句中的表达式，如 &quot;./template/&quot; + name + &quot;.ejs&quot;）生成一个具有上下文的模块。它包含<strong>目录下的所有模块</strong>的引用(reference)，这些模块能够「通过从 request 匹配出来的正则表达式」所 require 进来。上下文模块包含一个 map 对象，会把 request 中所有模块转译成对应的模块 id。</p>\n<p>示例：</p>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n    <span class="token string">"./table.ejs"</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span>\n    <span class="token string">"./table-row.ejs"</span><span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span>\n    <span class="token string">"./directory/folder.ejs"</span><span class="token punctuation">:</span> <span class="token number">44</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>上下文模块还包含一些运行时(runtime)逻辑来访问这个 map 对象。</p>\n<p>这意味着 webpack 能够支持动态 require，但会导致所有可能用到的模块都包含在 bundle 中。</p>\n<h2 class="header"><a class="anchor" href="#require-context" id="require-context"></a><span class="text"><code>require.context</code></span><a class="icon-link" href="#require-context"></a></h2>\n<p>你还可以使用 <code>require.context()</code> 方法来创建自己的（模块）上下文。</p>\n<p>你可以给这个方法传 3 个参数：要搜索的文件夹目录，是否还应该搜索它的子目录，以及一个匹配文件的正则表达式。</p>\n<p>webpack 会在构建的时候解析代码中的 <code>require.context()</code> 。</p>\n<p>语法如下：</p>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> useSubdirectories <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> regExp <span class="token operator">=</span> <span class="token regex">/^\\.\\//</span><span class="token punctuation">)</span>\n</code></pre>\n<p>示例：</p>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex">/\\.test\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// （创建了）一个包含了 test 文件夹（不包含子目录）下面的、所有文件名以 `.test.js` 结尾的、能被 require 请求到的文件的上下文。</span>\n</code></pre>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">"../"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.stories\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// （创建了）一个包含了父级文件夹（包含子目录）下面，所有文件名以 `.stories.js` 结尾的文件的上下文。</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 传递给 <code>require.context</code> 的参数必须是字面量(literal)！ </div></blockquote><h3 class="header"><a class="anchor" href="#-api" id="-api"></a><span class="text">上下文模块 API</span><a class="icon-link" href="#-api"></a></h3>\n<p>一个上下文模块导出一个（require）函数，这个函数可以接收一个参数：request 函数。</p>\n<p>导出的方法有 3 个属性： <code>resolve</code>, <code>keys</code>, <code>id</code>。</p>\n<ul>\n<li><code>resolve</code> 是一个函数，它返回请求被解析后得到的模块 id。</li>\n<li><code>keys</code> 也是一个函数，它返回一个数组，由所有可能被上下文模块处理的请求（译者注：参考下面第二段代码中的 key）组成。</li>\n</ul>\n<p>比如，如果想引入一个文件夹下面的所有文件，或者引入能匹配正则表达式的文件，你可以这样：</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> importAll <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  r<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">importAll</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> importAll <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  r<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">importAll</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 在构建时，所有被 require 的模块都会被存到（上面代码中的）cache 里面。</span>\n</code></pre>\n<ul>\n<li><code>id</code> 是上下文模块里面所包含的模块 id. 它可能在你使用 <code>module.hot.accept</code> 的时候被用到。</li>\n</ul>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/dependency-management/">https://webpack.js.org/guides/dependency-management/</a></p>\n</blockquote>\n',title:"管理依赖"},title:"管理依赖",url:"/guides/dependency-management/"},{file:{attributes:{title:"公共路径(Public Path)",sort:24,contributors:["chrisVillanueva","gonzoyumo","rafaelrinaldi"],group:"-",anchors:[{title:"示例",id:"-"},{title:"在构建项目时设置路径值",id:"-"},{title:"即时设定路径值",id:"-"}],related:[]},body:'<p>webpack 提供一个非常有用的配置，该配置能帮助你为项目中的所有资源指定一个基础路径。它被称为<code>公共路径(publicPath)</code>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p>这里提供一些示例，在实际应用中，这些示例的特性在实现的同时，还能保持高度整洁。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">在构建项目时设置路径值</span><a class="icon-link" href="#-"></a></h3>\n<p>在开发模式中，我们通常有一个 <code>assets/</code> 文件夹，它往往存放在和首页一个级别的目录下。这样是挺方便；但是如果在生产环境下，你想把这些静态文件统一使用CDN加载，那该怎么办？</p>\n<p>想要解决这个问题，你可以使用有着悠久历史的环境变量。比如说，我们设置了一个名为 <code>ASSET_PATH</code> 的变量：</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> webpack <span class="token keyword">from</span> <span class="token string">\'webpack\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 如果预先定义过环境变量，就将其赋值给`ASSET_PATH`变量，否则赋值为根目录</span>\n<span class="token keyword">const</span> ASSET_PATH <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>ASSET_PATH <span class="token operator">||</span> <span class="token string">\'/\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    publicPath<span class="token punctuation">:</span> ASSET_PATH\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 该插件帮助我们安心地使用环境变量</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string">\'process.env.ASSET_PATH\'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ASSET_PATH<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">即时设定路径值</span><a class="icon-link" href="#-"></a></h3>\n<p>另一个可能出现的情况是，我们需要即时设置公共路径。webpack 提供一个全局变量供你设置，它名叫 <code>__webpack_public_path__</code>。所以在你的项目入口，你可以简单地设置如下：</p>\n<pre><code class="lang-js">__webpack_public_path__ <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>ASSET_PATH<span class="token punctuation">;</span>\n</code></pre>\n<p>一切设置完成。因为我们已经在我们的配置项中使用了<code>DefinePlugin</code>，\n<code>process.env.ASSET_PATH</code> 就已经被定义了，\n所以让我们能够安心地使用它了。</p>\n<p><strong>警告：</strong>请注意，如果你在入口文件中使用 ES6 模块导入，则在导入后对 <code>__webpack_public_path__</code> 进行赋值。在这种情况下，你必须将公共路径(public path)赋值移至自己的专属模块，然后将其导入到你的 entry.js 之上：</p>\n<pre><code class="lang-js"><span class="token comment">// entry.js</span>\n<span class="token keyword">import</span> <span class="token string">\'./public-path\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./app\'</span><span class="token punctuation">;</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/public-path/">https://webpack.js.org/guides/public-path/</a></p>\n</blockquote>\n',title:"公共路径(Public Path)"},title:"公共路径(Public Path)",url:"/guides/public-path/"},{file:{attributes:{title:"集成(Integrations)",sort:25,contributors:["bebraw","pksjce","skipjack","tashian"],group:"-",anchors:[{title:"NPM Scripts",id:"npm-scripts"},{title:"Grunt",id:"grunt"},{title:"Gulp",id:"gulp"},{title:"Mocha",id:"mocha"},{title:"Karma",id:"karma"}],related:[]},body:'<p>首先我们要消除一个常见的误解。webpack 是一个模块打包器(module bundler)（例如，<a href="http://browserify.org/">Browserify</a> 或 <a href="http://brunch.io/">Brunch</a>）。它不是一个任务执行器(task runner)（例如，<a href="https://www.gnu.org/software/make/">Make</a>, <a href="https://gruntjs.com/">Grunt</a> 或者 <a href="https://gulpjs.com/">Gulp</a> ）。任务执行器就是用来自动化处理常见的开发任务，例如项目的检查(lint)、构建(build)、测试(test)。相对于<em>打包器(bundler)</em>，任务执行器则聚焦在偏重上层的问题上面。你可以得益于，使用上层的工具，而将打包部分的问题留给 webpack。</p>\n<p>打包器(bundler)帮助你取得准备用于部署的 JavaScript 和样式表，将它们转换为适合浏览器的可用格式。例如，JavaScript 可以<a href="/plugins/uglifyjs-webpack-plugin">压缩</a>、<a href="/guides/code-splitting">拆分 chunk</a> 和<a href="/guides/lazy-loading">懒加载</a>，以提高性能。打包是 web 开发中最重要的挑战之一，解决此问题可以消除开发过程中的大部分痛点。</p>\n<p>好消息是，虽然有一些功能重复，但如果以正确的方式处理，任务运行器和模块打包器能够一起协同工作。本指南提供了关于如何将 webpack 与一些流行的任务运行器集成在一起的高度概述。</p>\n<h2 class="header"><a class="anchor" href="#npm-scripts" id="npm-scripts"></a><span class="text">NPM Scripts</span><a class="icon-link" href="#npm-scripts"></a></h2>\n<p>通常 webpack 用户使用 npm <a href="https://docs.npmjs.com/misc/scripts"><code>scripts</code></a> 来作为任务执行器。这是比较好的开始。然而跨平台支持是一个问题，为此有一些解决方案。许多用户，但不是大多数用户，直接使用 npm <code>scripts</code> 和各种级别的 webpack 配置和工具，来应对构建任务。</p>\n<p>因此，当 webpack 的核心焦点专注于打包时，有多种扩展可以供你使用，可以将其用于任务运行者常见的工作。集成一个单独的工具会增加复杂度，所以一定要权衡集成前后的利弊。</p>\n<h2 class="header"><a class="anchor" href="#grunt" id="grunt"></a><span class="text">Grunt</span><a class="icon-link" href="#grunt"></a></h2>\n<p>对于那些使用 Grunt 的人，我们推荐使用 <a href="https://www.npmjs.com/package/grunt-webpack"><code>grunt-webpack</code></a> 包(package)。使用 <code>grunt-webpack</code> 你可以将 webpack 或 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 作为一项任务(task)执行，访问<a href="https://gruntjs.com/api/grunt.template">模板标签(template tags)</a>中的统计信息，拆分开发和生产配置等等。如果你还没有安装过 <code>grunt-webpack</code> 和 <code>webpack</code>，请先安装它们：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev grunt-webpack webpack\n</code></pre>\n<p>然后注册一个配置并加载任务：</p>\n<p><strong>Gruntfile.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>grunt<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  grunt<span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    webpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        stats<span class="token punctuation">:</span> <span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">||</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">\'development\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      prod<span class="token punctuation">:</span> webpackConfig<span class="token punctuation">,</span>\n      dev<span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> watch<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> webpackConfig<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  grunt<span class="token punctuation">.</span><span class="token function">loadNpmTasks</span><span class="token punctuation">(</span><span class="token string">\'grunt-webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>获取更多信息，请查看<a href="https://github.com/webpack-contrib/grunt-webpack">本仓库</a>。</p>\n<h2 class="header"><a class="anchor" href="#gulp" id="gulp"></a><span class="text">Gulp</span><a class="icon-link" href="#gulp"></a></h2>\n<p>在 <a href="https://github.com/shama/webpack-stream"><code>webpack-stream</code></a> 包(package)（也称作 <code>gulp-webpack</code>） 的帮助下，也可以很简单方便的将 Gulp 与 webpack 集成。在这种情况下，不需要单独安装 <code>webpack</code> ，因为它是 <code>webpack-stream</code> 直接依赖：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack-stream\n</code></pre>\n<p>只需要把 <code>webpack</code> 替换为 <code>require(&#39;webpack-stream&#39;)</code>，并传递一个配置文件就可以了：</p>\n<p><strong>gulpfile.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'gulp\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-stream\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">\'default\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">\'src/entry.js\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// 一些配置选项……</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">\'dist/\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>获取更多信息，请查看<a href="https://github.com/shama/webpack-stream">本仓库</a>。</p>\n<h2 class="header"><a class="anchor" href="#mocha" id="mocha"></a><span class="text">Mocha</span><a class="icon-link" href="#mocha"></a></h2>\n<p><a href="https://github.com/zinserjan/mocha-webpack"><code>mocha-webpack</code></a> 可以用来将 Mocha 与 webpack 完全集成。这个仓库提供了很多关于工具优势和缺点方面的细节，但 <code>mocha-webpack</code> 还算是一层简单的封装，提供与 Mocha 几乎相同的 CLI，并提供各种 webpack 功能，例如改进了 watch 模式和优化了路径分析(path resolution)。这里是一个如何安装并使用它来运行测试套件的小例子（在 <code>./test</code> 中找到）：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack mocha mocha-webpack\nmocha-webpack <span class="token string">\'test/**/*.js\'</span>\n</code></pre>\n<p>获取更多信息，请查看<a href="https://github.com/zinserjan/mocha-webpack">本仓库</a>。</p>\n<h2 class="header"><a class="anchor" href="#karma" id="karma"></a><span class="text">Karma</span><a class="icon-link" href="#karma"></a></h2>\n<p><a href="https://github.com/webpack-contrib/karma-webpack"><code>karma-webpack</code></a> 包(package)允许你使用 webpack 预处理 <a href="http://karma-runner.github.io/1.0/index.html">Karma</a> 中的文件。它也可以使用 <a href="https://github.com/webpack/webpack-dev-middleware"><code>webpack-dev-middleware</code></a>，并允许传递两者的配置。下面是一个简单的示例：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack karma karma-webpack\n</code></pre>\n<p><strong>karma.conf.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  config<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    files<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> pattern<span class="token punctuation">:</span> \'test<span class="token comment">/*_test.js\', watched: false },\n      { pattern: \'test/**/</span><span class="token operator">*</span>_test<span class="token punctuation">.</span>js\'<span class="token punctuation">,</span> watched<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    preprocessors<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      \'test<span class="token comment">/*_test.js\': [ \'webpack\' ],\n      \'test/**/</span><span class="token operator">*</span>_test<span class="token punctuation">.</span>js<span class="token string">\': [ \'</span>webpack\' <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    webpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 一些自定义的 webpack 配置……</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    webpackMiddleware<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 一些自定义的 webpack-dev-middleware 配置……</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>获取更多信息，请访问<a href="https://github.com/webpack-contrib/karma-webpack">本仓库</a>。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/guides/integrations/">https://webpack.js.org/guides/integrations/</a></p>\n</blockquote>\n',title:"集成(Integrations)"},title:"集成(Integrations)",url:"/guides/integrations/"}]},{title:"插件",url:"plugins",pages:[{file:{attributes:{title:"AggressiveSplittingPlugin",contributors:["pierreneter"],group:"-",anchors:[{title:"选项",id:"-"},{title:"示例",id:"-"}],related:[]},body:'<p><code>AggressiveSplittingPlugin</code> 可以将 bundle 拆分成更小的 chunk，直到各个 chunk 的大小达到 <code>option</code> 设置的 <code>maxSize</code>。它通过目录结构将模块组织在一起。</p>\n<p>它记录了在 webpack 记录里的分离点，并尝试按照它开始的方式还原分离。这确保了在更改应用程序后，旧的分离点（和 chunk）是可再使用的，因为它们可能早已在客户端的缓存中。因此强烈推荐使用记录。</p>\n<p>仅有在 chunk 超过规定的 <code>minSize</code> 时才会保存在记录里。可以确保 chunk 随着应用程序的增加而增加，而不是每次改变的时候创建很多的 chunk。</p>\n<p>如果模块更改，chunk 可能会无效。无效 chunk 中的模块会回到模块池(module pool)中，会同时创建一个新的模块。</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>AggressiveSplittingPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  minSize<span class="token punctuation">:</span> <span class="token number">30000</span><span class="token punctuation">,</span> <span class="token comment">// 字节，分割点。默认：30720</span>\n  maxSize<span class="token punctuation">:</span> <span class="token number">50000</span><span class="token punctuation">,</span> <span class="token comment">// 字节，每个文件最大字节。默认：51200</span>\n  chunkOverhead<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 默认：0</span>\n  entryChunkMultiplicator<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 默认：1</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p><a href="https://github.com/webpack/webpack/tree/master/examples/http2-aggressive-splitting">http2-aggressive-splitting</a></p>\n',title:"AggressiveSplittingPlugin"},title:"AggressiveSplittingPlugin",url:"/plugins/aggressive-splitting-plugin/"},{file:{attributes:{title:"ZopfliWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/zopfli-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/zopfli-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/zopfli-webpack-plugin",group:"-",anchors:[{title:"安装",id:"-"},{title:"Usage",id:"usage"},{title:"Arguments",id:"arguments"},{title:"Option Arguments",id:"option-arguments"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Node-Zopfli plugin for Webpack.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i -D zopfli-webpack-plugin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> ZopfliPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"zopfli-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">ZopfliPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      asset<span class="token punctuation">:</span> <span class="token string">"[path].gz[query]"</span><span class="token punctuation">,</span>\n      algorithm<span class="token punctuation">:</span> <span class="token string">"zopfli"</span><span class="token punctuation">,</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.(js|html)$/</span><span class="token punctuation">,</span>\n      threshold<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>\n      minRatio<span class="token punctuation">:</span> <span class="token number">0.8</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#arguments" id="arguments"></a><span class="text">Arguments</span><a class="icon-link" href="#arguments"></a></h2>\n<ul>\n<li><code>asset</code>: The target asset name. <code>[file]</code> is replaced with the original asset. <code>[path]</code> is replaced with the path of the original asset and <code>[query]</code> with the query. Defaults to <code>&quot;[path].gz[query]&quot;</code>.</li>\n<li><code>filename</code>: A <code>function(asset)</code> which receives the asset name (after processing <code>asset</code> option) and returns the new asset name. Defaults to <code>false</code>.</li>\n<li><code>algorithm</code>: Can be a <code>function(buf, callback)</code> or a string. For a string the algorithm is taken from <code>zopfli</code>.</li>\n<li><code>test</code>: All assets matching this RegExp are processed. Defaults to every asset.</li>\n<li><code>threshold</code>: Only assets bigger than this size are processed. In bytes. Defaults to <code>0</code>.</li>\n<li><code>minRatio</code>: Only assets that compress better that this ratio are processed. Defaults to <code>0.8</code>.</li>\n<li><code>deleteOriginalAssets</code>: Whether to delete the original assets or not. Defaults to <code>false</code>.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#option-arguments" id="option-arguments"></a><span class="text">Option Arguments</span><a class="icon-link" href="#option-arguments"></a></h2>\n<ul>\n<li>verbose: Default: false,</li>\n<li>verbose_more: Default: false,</li>\n<li>numiterations: Default: 15,</li>\n<li>blocksplitting: Default: true,</li>\n<li>blocksplittinglast: Default: false,</li>\n<li>blocksplittingmax: Default: 15</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/zopfli-webpack-plugin/">https://webpack.js.org/plugins/zopfli-webpack-plugin/</a></p>\n</blockquote>\n',title:"ZopfliWebpackPlugin"},title:"ZopfliWebpackPlugin",url:"/plugins/zopfli-webpack-plugin/"},{file:{attributes:{title:"BannerPlugin",contributors:["simon04"],related:[{title:"banner-plugin-hashing test",url:"https://github.com/webpack/webpack/blob/master/test/configCases/plugins/banner-plugin-hashing/webpack.config.js"}],group:"-",anchors:[{title:"选项",id:"-"},{title:"占位符(Placeholders)",id:"-placeholders-"}]},body:'<p>为每个 chunk 文件头部添加 banner。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span>banner<span class="token punctuation">)</span>\n<span class="token comment">// or</span>\n<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  banner<span class="token punctuation">:</span> string<span class="token punctuation">,</span> <span class="token comment">// 其值为字符串，将作为注释存在</span>\n  raw<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span> <span class="token comment">// 如果值为 true，将直出，不会被作为注释</span>\n  entryOnly<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span> <span class="token comment">// 如果值为 true，将只在入口 chunks 文件中添加</span>\n  test<span class="token punctuation">:</span> string <span class="token operator">|</span> RegExp <span class="token operator">|</span> Array<span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> string <span class="token operator">|</span> RegExp <span class="token operator">|</span> Array<span class="token punctuation">,</span>\n  exclude<span class="token punctuation">:</span> string <span class="token operator">|</span> RegExp <span class="token operator">|</span> Array<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-placeholders-" id="-placeholders-"></a><span class="text">占位符(Placeholders)</span><a class="icon-link" href="#-placeholders-"></a></h2>\n<p>从 webpack 2.5.0 开始，会对 <code>banner</code> 字符串中的占位符取值：</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  banner<span class="token punctuation">:</span> <span class="token string">"hash:[hash], chunkhash:[chunkhash], name:[name], filebase:[filebase], query:[query], file:[file]"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/banner-plugin/">https://webpack.js.org/plugins/banner-plugin/</a></p>\n</blockquote>\n',title:"BannerPlugin"},title:"BannerPlugin",url:"/plugins/banner-plugin/"},{file:{attributes:{title:"ClosureWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/closure-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/closure-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/closure-webpack-plugin",group:"-",anchors:[{title:"Usage example",id:"usage-example"},{title:"Options",id:"options"},{title:"Compiler Flags",id:"compiler-flags"},{title:"Aggressive Bundle Mode",id:"aggressive-bundle-mode"},{title:"Tips for Use",id:"tips-for-use"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p><a href="https://badge.fury.io/js/closure-webpack-plugin"><img src="https://badge.fury.io/js/closure-webpack-plugin.svg" alt="npm version"></a></p>\n<p><a href="https://developers.google.com/closure/compiler/">Closure-Compiler</a> is a full optimizing compiler and transpiler.\nIt offers unmatched optimizations, provides type checking and can easily target transpilation to different versions of ECMASCRIPT.</p>\n<p><strong>Note:</strong> This plugin is a very early beta and currently uses a custom build of closure-compiler while neccessary changes are integrated back into the main compiler repository.\nOnly the java version of closure-compiler is currently supported.</p>\n<h2 class="header"><a class="anchor" href="#usage-example" id="usage-example"></a><span class="text">Usage example</span><a class="icon-link" href="#usage-example"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">const</span> ClosureCompilerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'closure-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">ClosureCompilerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>mode<span class="token punctuation">:</span> <span class="token string">\'STANDARD\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// compiler flags here</span>\n  <span class="token comment">//</span>\n  <span class="token comment">// for debuging help, try these:</span>\n  <span class="token comment">//</span>\n  <span class="token comment">// formatting: \'PRETTY_PRINT\'</span>\n  <span class="token comment">// debug: true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<ul>\n<li><strong>mode</strong> - <code>STANDARD</code> (default) or <code>AGGRESSIVE_BUNDLE</code>. Controls how the plugin utilizes the compiler.<br> In <code>STANDARD</code> mode, closure-compiler is used as a direct replacement for other minifiers as well as most Babel transformations.<br> In <code>AGGRESSIVE_BUNDLE</code> mode, the compiler performs additional optimizations of modules to produce a much smaller file, but\nis not compatible with all input modules.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#compiler-flags" id="compiler-flags"></a><span class="text">Compiler Flags</span><a class="icon-link" href="#compiler-flags"></a></h2>\n<p>The plugin controls certain compiler flags. The following flags should not be used in any mode:</p>\n<ul>\n<li><strong>module_resolution</strong> - A custom resolution mode for webpack is utilized instead of the standard NODE or BROWSER options.</li>\n<li><strong>output_wrapper</strong> - The output wrapper is automatically added by either webpack or the plugin</li>\n<li><strong>dependency_mode</strong> - Controlled by the plugin mode.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#aggressive-bundle-mode" id="aggressive-bundle-mode"></a><span class="text">Aggressive Bundle Mode</span><a class="icon-link" href="#aggressive-bundle-mode"></a></h2>\n<p>In this mode, the compiler rewrites CommonJS modules and hoists require calls. Some modules are not compatible with this type of rewritting. In particular, hoisting will cause the following code to execute out of order:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">addPolyfillToFoo</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Aggressive Bundle Mode utilizes a custom runtime in which modules within a chunk file are all included in the same scope.\nThis avoids <a href="https://nolanlawson.com/2016/08/15/the-cost-of-small-modules/">the cost of small modules</a>.</p>\n<p>In Aggressive Bundle Mode, a file can only appear in a single output chunk. Use the <a href="https://webpack.js.org/plugins/commons-chunk-plugin/">Commons Chunk Plugin</a> to split duplicated files into a single output chunk.</p>\n<h2 class="header"><a class="anchor" href="#tips-for-use" id="tips-for-use"></a><span class="text">Tips for Use</span><a class="icon-link" href="#tips-for-use"></a></h2>\n<ul>\n<li>Don&#39;t use babel - closure-compiler is also a transpiler.\nIf you need <a href="https://github.com/google/closure-compiler/wiki/ECMAScript6">features not yet supported</a> by closure-compiler, have babel\nonly target those features. </li>\n</ul>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/ChadKillingsworth"></p>\n<p><img width="150" alt="" height="150" src="https://avatars.githubusercontent.com/u/1247639?v=3"></p>\n<p></br></p>\n<pre><code>      Chad Killingsworth\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" alt="" height="150" src="https://avatars.githubusercontent.com/u/8420490?v=3"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"ClosureWebpackPlugin"},title:"ClosureWebpackPlugin",url:"/plugins/closure-webpack-plugin/"},{file:{attributes:{title:"CommonsChunkPlugin",contributors:["bebraw","christopher4lis","jdbevan","kevinzwhuang","simon04"],group:"-",anchors:[{title:"配置",id:"-"},{title:"例子",id:"-"},{title:"公共chunk 用于 入口chunk (entry chunk)",id:"-chunk-chunk-entry-chunk-"},{title:"明确第三方库 chunk",id:"-chunk"},{title:"将公共模块打包进父 chunk",id:"-chunk"},{title:"额外的异步 公共chunk",id:"-chunk"},{title:"给 minChunks 配置传入函数",id:"-minchunks-"},{title:"Manifest file",id:"manifest-file"},{title:"Combining implicit common vendor chunks and manifest file",id:"combining-implicit-common-vendor-chunks-and-manifest-file"},{title:"More Examples",id:"more-examples"}],related:[]},body:'<p><code>CommonsChunkPlugin</code> 插件，是一个可选的用于建立一个独立文件(又称作 chunk)的功能，这个文件包括多个入口 <code>chunk</code> 的公共模块。通过将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存起来到缓存中供后续使用。这个带来速度上的提升，因为浏览器会迅速将公共的代码从缓存中取出来，而不是每次访问一个新页面时，再去加载一个更大的文件。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">配置</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">,</span> <span class="token comment">// or</span>\n  names<span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// 这是 common chunk 的名称。已经存在的 chunk 可以通过传入一个已存在的 chunk 名称而被选择。</span>\n  <span class="token comment">// 如果一个字符串数组被传入，这相当于插件针对每个 chunk 名被多次调用</span>\n  <span class="token comment">// 如果该选项被忽略，同时 `options.async` 或者 `options.children` 被设置，所有的 chunk 都会被使用，</span>\n  <span class="token comment">// 否则 `options.filename` 会用于作为 chunk 名。</span>\n  <span class="token comment">// When using `options.async` to create common chunks from other async chunks you must specify an entry-point</span>\n  <span class="token comment">// chunk name here instead of omitting the `option.name`.</span>\n\n  filename<span class="token punctuation">:</span> string<span class="token punctuation">,</span>\n  <span class="token comment">// common chunk 的文件名模板。可以包含与 `output.filename` 相同的占位符。</span>\n  <span class="token comment">// 如果被忽略，原本的文件名不会被修改(通常是 `output.filename` 或者 `output.chunkFilename`)。</span>\n  <span class="token comment">// This option is not permitted if you\'re using `options.async` as well, see below for more details.</span>\n\n  minChunks<span class="token punctuation">:</span> number<span class="token operator">|</span><span class="token number">Infinity</span><span class="token operator">|</span><span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> boolean<span class="token punctuation">,</span>\n  <span class="token comment">// 在传入  公共chunk(commons chunk) 之前所需要包含的最少数量的 chunks 。</span>\n  <span class="token comment">// 数量必须大于等于2，或者少于等于 chunks的数量</span>\n  <span class="token comment">// 传入 `Infinity` 会马上生成 公共chunk，但里面没有模块。</span>\n  <span class="token comment">// 你可以传入一个 `function` ，以添加定制的逻辑（默认是 chunk 的数量）</span>\n\n  chunks<span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// 通过 chunk name 去选择 chunks 的来源。chunk 必须是  公共chunk 的子模块。</span>\n  <span class="token comment">// 如果被忽略，所有的，所有的 入口chunk (entry chunk) 都会被选择。</span>\n\n\n  children<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>\n  <span class="token comment">// 如果设置为 `true`，所有  公共chunk 的子模块都会被选择</span>\n\n  deepChildren<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>\n  <span class="token comment">// If `true` all descendants of the commons chunk are selected</span>\n\n  <span class="token keyword">async</span><span class="token punctuation">:</span> boolean<span class="token operator">|</span>string<span class="token punctuation">,</span>\n  <span class="token comment">// 如果设置为 `true`，一个异步的  公共chunk 会作为 `options.name` 的子模块，和 `options.chunks` 的兄弟模块被创建。</span>\n  <span class="token comment">// 它会与 `options.chunks` 并行被加载。</span>\n  <span class="token comment">// Instead of using `option.filename`, it is possible to change the name of the output file by providing</span>\n  <span class="token comment">// the desired string here instead of `true`.</span>\n\n  minSize<span class="token punctuation">:</span> number<span class="token punctuation">,</span>\n  <span class="token comment">// 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> webpack1 构造函数 <code>new webpack.optimize.CommonsChunkPlugin(options, filenameTemplate, selectedChunks, minChunks)</code> 不再被支持。请使用相应的选项对象。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">例子</span><a class="icon-link" href="#-"></a></h2>\n<h3 class="header"><a class="anchor" href="#-chunk-chunk-entry-chunk-" id="-chunk-chunk-entry-chunk-"></a><span class="text">公共chunk 用于 入口chunk (entry chunk)</span><a class="icon-link" href="#-chunk-chunk-entry-chunk-"></a></h3>\n<p>生成一个额外的 chunk 包含入口chunk 的公共模块。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"commons"</span><span class="token punctuation">,</span>\n  <span class="token comment">// ( 公共chunk(commnons chunk) 的名称)</span>\n\n  filename<span class="token punctuation">:</span> <span class="token string">"commons.js"</span><span class="token punctuation">,</span>\n  <span class="token comment">// ( 公共chunk 的文件名)</span>\n\n  <span class="token comment">// minChunks: 3,</span>\n  <span class="token comment">// (模块必须被3个 入口chunk 共享)</span>\n\n  <span class="token comment">// chunks: ["pageA", "pageB"],</span>\n  <span class="token comment">// (只使用这些 入口chunk)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>你必须在 入口chunk 之前加载生成的这个 公共chunk:</p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commons.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entry.bundle.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-chunk" id="-chunk"></a><span class="text">明确第三方库 chunk</span><a class="icon-link" href="#-chunk"></a></h3>\n<p>将你的代码拆分成公共代码和应用代码。</p>\n<pre><code class="lang-javascript">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  vendor<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"jquery"</span><span class="token punctuation">,</span> <span class="token string">"other-lib"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  app<span class="token punctuation">:</span> <span class="token string">"./entry"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nplugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span>\n    <span class="token comment">// filename: "vendor.js"</span>\n    <span class="token comment">// (给 chunk 一个不同的名字)</span>\n\n    minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>\n    <span class="token comment">// (随着 entry chunk 越来越多，</span>\n    <span class="token comment">// 这个配置保证没其它的模块会打包进 vendor chunk)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vendor.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 结合长期缓存，你可能需要使用这个<a href="https://github.com/diurnalist/chunk-manifest-webpack-plugin">插件</a>去避免 公共chunk 改变。 你也需要使用 <code>records</code> 去保持稳定的模块 id，例如，使用 <a href="/plugins/named-modules-plugin"><code>NamedModulesPlugin</code></a> 或 <a href="/plugins/hashed-module-ids-plugin"><code>HashedModuleIdsPlugin</code></a>。 </div></blockquote><h3 class="header"><a class="anchor" href="#-chunk" id="-chunk"></a><span class="text">将公共模块打包进父 chunk</span><a class="icon-link" href="#-chunk"></a></h3>\n<p>使用<a href="/guides/code-splitting">代码拆分</a>功能，一个 chunk 的多个子 chunk 会有公共的依赖。为了防止重复，可以将这些公共模块移入父 chunk。这会减少总体的大小，但会对首次加载时间产生不良影响。如果预期到用户需要下载许多兄弟 chunks（例如，入口 trunk 的子 chunk），那这对改善加载时间将非常有用。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// names: ["app", "subPageA"]</span>\n  <span class="token comment">// (选择 chunks，或者忽略该项设置以选择全部 chunks)</span>\n\n  children<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// (选择所有被选 chunks 的子 chunks)</span>\n\n  <span class="token comment">// minChunks: 3,</span>\n  <span class="token comment">// (在提取之前需要至少三个子 chunk 共享这个模块)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-chunk" id="-chunk"></a><span class="text">额外的异步 公共chunk</span><a class="icon-link" href="#-chunk"></a></h3>\n<p>与上面的类似，但是并非将公共模块移动到父 chunk（增加初始加载时间），而是使用新的异步加载的额外公共chunk。当下载额外的 chunk 时，它将自动并行下载。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>\n  <span class="token comment">// or</span>\n  names<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">"subPageA"</span><span class="token punctuation">]</span>\n  <span class="token comment">// the name or list of names must match the name or names</span>\n  <span class="token comment">// of the entry points that create the async chunks</span>\n\n  children<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// (选择所有被选 chunks 的子 chunks)</span>\n\n  <span class="token keyword">async</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// (创建一个异步 公共chunk)</span>\n\n  minChunks<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token comment">// (在提取之前需要至少三个子 chunk 共享这个模块)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-minchunks-" id="-minchunks-"></a><span class="text">给 <code>minChunks</code> 配置传入函数</span><a class="icon-link" href="#-minchunks-"></a></h3>\n<p>你也可以给 <code>minChunks</code> 传入一个函数。这个函数会被 <code>CommonsChunkPlugin</code> 插件回调，并且调用函数时会传入 <code>module</code> 和 <code>count</code> 参数。</p>\n<p><code>module</code> 参数代表每个 chunks 里的模块，这些 chunks 是你通过 <code>name</code>/<code>names</code> 参数传入的。\n<code>module</code> has the shape of a <a href="https://github.com/webpack/webpack/blob/master/lib/NormalModule.js">NormalModule</a>, which has two particularly useful properties for this use case:</p>\n<ul>\n<li><code>module.context</code>: The directory that stores the file. For example: <code>&#39;/my_project/node_modules/example-dependency&#39;</code></li>\n<li><code>module.resource</code>: The name of the file being processed. For example: <code>&#39;/my_project/node_modules/example-dependency/index.js&#39;</code></li>\n</ul>\n<p><code>count</code> 参数表示 <code>module</code> 被使用的 chunk 数量。</p>\n<p>当你想要对 <code>CommonsChunk</code> 如何决定模块被打包到哪里的算法有更为细致的控制， 这个配置就会非常有用。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"my-single-lib-chunk"</span><span class="token punctuation">,</span>\n  filename<span class="token punctuation">:</span> <span class="token string">"my-single-lib-chunk.js"</span><span class="token punctuation">,</span>\n  minChunks<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果模块是一个路径，而且在路径中有 "somelib" 这个名字出现，</span>\n    <span class="token comment">// 而且它还被三个不同的 chunks/入口chunk 所使用，那请将它拆分到</span>\n    <span class="token comment">// 另一个分开的 chunk 中，chunk 的 keyname 是 "my-single-lib-chunk"，而文件名是 "my-single-lib-chunk.js"</span>\n    <span class="token keyword">return</span> module<span class="token punctuation">.</span>resource <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token regex">/somelib/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>resource<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>正如上面看到的，这个例子允许你只将其中一个库移到一个分开的文件当中，当而仅当函数中的所有条件都被满足了。</p>\n<p>This concept may be used to obtain implicit common vendor chunks:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span>\n  minChunks<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// this assumes your vendor imports exist in the node_modules directory</span>\n    <span class="token keyword">return</span> module<span class="token punctuation">.</span>context <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"node_modules"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>In order to obtain a single CSS file containing your application and vendor CSS, use the following <code>minChunks</code> function together with <a href="/plugins/extract-text-webpack-plugin/"><code>ExtractTextPlugin</code></a>:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span>\n  minChunks<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// This prevents stylesheet resources with the .css or .scss extension</span>\n    <span class="token comment">// from being moved from their original chunk to the vendor chunk</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>resource <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token regex">/^.*\\.(css|scss)$/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> module<span class="token punctuation">.</span>context <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"node_modules"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#manifest-file" id="manifest-file"></a><span class="text">Manifest file</span><a class="icon-link" href="#manifest-file"></a></h2>\n<p>To extract the webpack bootstrap logic into a separate file, use the <code>CommonsChunkPlugin</code> on a <code>name</code> which is not defined as <code>entry</code>. Commonly the name <code>manifest</code> is used. See the <a href="/guides/caching">caching guide</a> for details.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"manifest"</span><span class="token punctuation">,</span>\n  minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#combining-implicit-common-vendor-chunks-and-manifest-file" id="combining-implicit-common-vendor-chunks-and-manifest-file"></a><span class="text">Combining implicit common vendor chunks and manifest file</span><a class="icon-link" href="#combining-implicit-common-vendor-chunks-and-manifest-file"></a></h2>\n<p>Since the <code>vendor</code> and <code>manifest</code> chunk use a different definition for <code>minChunks</code>, you need to invoke the plugin twice:</p>\n<pre><code class="lang-javascript"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span>\n    minChunks<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> module<span class="token punctuation">.</span>context <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"node_modules"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">"manifest"</span><span class="token punctuation">,</span>\n    minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#more-examples" id="more-examples"></a><span class="text">More Examples</span><a class="icon-link" href="#more-examples"></a></h2>\n<ul>\n<li><a href="https://github.com/webpack/webpack/tree/master/examples/common-chunk-and-vendor-chunk">Common and Vendor Chunks</a></li>\n<li><a href="https://github.com/webpack/webpack/tree/master/examples/multiple-commons-chunks">Multiple Common Chunks</a></li>\n<li><a href="https://github.com/webpack/webpack/tree/master/examples/multiple-entry-points-commons-chunk-css-bundle">Multiple Entry Points with Commons Chunk</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/commons-chunk-plugin/">https://webpack.js.org/plugins/commons-chunk-plugin/</a></p>\n</blockquote>\n',title:"CommonsChunkPlugin"},title:"CommonsChunkPlugin",url:"/plugins/commons-chunk-plugin/"},{file:{attributes:{title:"ComponentWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/component-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/component-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/component-webpack-plugin",group:"-",anchors:[{title:"用法",id:"-"},{title:"高级用法",id:"-"},{title:"License",id:"license"}],contributors:[],related:[]},body:'<p><strong>尚未维护！</strong></p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> ComponentPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"component-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">ComponentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">高级用法</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> ComponentPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"component-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">ComponentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token comment">// 从 component.json 中加载 xyz 字段 in component.json</span>\n            xyz<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token comment">// 这等同于：xyz: "[file]"</span>\n\n            <span class="token comment">// 使用 xyz-loader 加载 xyz 字段</span>\n            xyz<span class="token punctuation">:</span> <span class="token string">"!xyz-loader![file]"</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// 默认为：</span>\n            <span class="token comment">// styles: "!style-loader!css-loader![file]"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n            <span class="token comment">// 查找路径</span>\n            <span class="token string">"component"</span>\n        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">License</span><a class="icon-link" href="#license"></a></h2>\n<p>MIT (<a href="http://www.opensource.org/licenses/mit-license.php">http://www.opensource.org/licenses/mit-license.php</a>)</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/component-webpack-plugin/">https://webpack.js.org/plugins/component-webpack-plugin/</a></p>\n</blockquote>\n',title:"ComponentWebpackPlugin"},title:"ComponentWebpackPlugin",url:"/plugins/component-webpack-plugin/"},{file:{attributes:{title:"CompressionWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/compression-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/compression-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/compression-webpack-plugin",group:"-",anchors:[{title:"安装",id:"-"},{title:"使用",id:"-"},{title:"选项",id:"-"},{title:"test",id:"test"},{title:"asset",id:"asset"},{title:"filename",id:"filename"},{title:"algorithm",id:"algorithm"},{title:"threshold",id:"threshold"},{title:"minRatio",id:"minratio"},{title:"deleteOriginalAssets",id:"deleteoriginalassets"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>提供带 Content-Encoding 编码的压缩版的资源</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i -D compression-webpack-plugin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">使用</span><a class="icon-link" href="#-"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> CompressionPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"compression-webpack-plugin"</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>test</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{RegExp}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>.</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        处理所有匹配此 <code>{RegExp}</code> 的资源\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>asset</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[path].gz[query]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        目标资源名称。<code>[file]</code> 会被替换成原资源。<code>[path]</code> 会被替换成原资源路径，<code>[query]</code> 替换成原查询字符串\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>filename</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        一个 <code>{Function}</code> <code>(asset) =&gt; asset</code> 函数，接收原资源名（通过 <code>asset</code> 选项）返回新资源名\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>algorithm</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>gzip</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        可以是 <code>(buffer, cb) =&gt; cb(buffer)</code> 或者是使用 <code>zlib</code> 里面的算法的 <code>{String}</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>threshold</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>0</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        只处理比这个值大的资源。按字节计算\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>minRatio</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>0.8</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        只有压缩率比这个值小的资源才会被处理\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>deleteOriginalAssets</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        是否删除原资源\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#test" id="test"></a><span class="text"><code>test</code></span><a class="icon-link" href="#test"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.js/</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#asset" id="asset"></a><span class="text"><code>asset</code></span><a class="icon-link" href="#asset"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    asset<span class="token punctuation">:</span> <span class="token string">\'[path].gz[query]\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#filename" id="filename"></a><span class="text"><code>filename</code></span><a class="icon-link" href="#filename"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename <span class="token punctuation">(</span>asset<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      asset <span class="token operator">=</span> <span class="token string">\'rename\'</span>\n      <span class="token keyword">return</span> asset\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#algorithm" id="algorithm"></a><span class="text"><code>algorithm</code></span><a class="icon-link" href="#algorithm"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    algorithm<span class="token punctuation">:</span> <span class="token string">\'gzip\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#threshold" id="threshold"></a><span class="text"><code>threshold</code></span><a class="icon-link" href="#threshold"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    threshold<span class="token punctuation">:</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#minratio" id="minratio"></a><span class="text"><code>minRatio</code></span><a class="icon-link" href="#minratio"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    minRatio<span class="token punctuation">:</span> <span class="token number">0.8</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#deleteoriginalassets" id="deleteoriginalassets"></a><span class="text"><code>deleteOriginalAssets</code></span><a class="icon-link" href="#deleteoriginalassets"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    deleteOriginalAssets<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>    Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>    Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>    Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>    Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"CompressionWebpackPlugin"},title:"CompressionWebpackPlugin",url:"/plugins/compression-webpack-plugin/"},{file:{attributes:{title:"ContextReplacementPlugin",contributors:["simon04"],related:[{title:"Issue 2783 - ContextReplacementPlugin Description",url:"https://github.com/webpack/webpack/issues/2783#issuecomment-234137265"}],group:"-",anchors:[{title:"用法",id:"-"},{title:"内容回调函数",id:"-"},{title:"其他选项",id:"-"}]},body:'<p><em>上下文(Context)</em> 与一个<a href="/guides/dependency-management/#require-with-expression">带表达式的 require 语句</a> 相关，例如 <code>require(&#39;./locale/&#39; + name + &#39;.json&#39;)</code>。遇见此类表达式时，webpack 查找目录 (<code>&#39;./locale/&#39;</code>) 下符合正则表达式 (<code>/^.*\\.json$/</code>)的文件。由于 <code>name</code> 在编译时(compile time)还是未知的，webpack 会将每个文件都作为模块引入到 bundle 中。</p>\n<p><code>上下文替换插件(ContextReplacementPlugin)</code> 允许你覆盖查找规则，该插件有许多配置方式：</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span>\n  resourceRegExp<span class="token punctuation">:</span> RegExp<span class="token punctuation">,</span>\n  newContentResource<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">,</span>\n  newContentRecursive<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>\n  newContentRegExp<span class="token operator">?</span><span class="token punctuation">:</span> RegExp\n<span class="token punctuation">)</span>\n</code></pre>\n<p>如果资源（或目录）符合 <code>resourceRegExp</code> 正则表达式，插件会替换默认资源为 <code>newContentResource</code>，布尔值 <code>newContentRecursive</code> 表明是否使用递归查找，<code>newContextRegExp</code> 用于筛选新上下文里的资源。如果 <code>newContentResource</code> 为相对路径，会相对于前一匹配资源路径去解析。</p>\n<p>这是一个限制模块使用的小例子：</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span>\n  <span class="token regex">/moment[\\/\\\\]locale$/</span><span class="token punctuation">,</span>\n  <span class="token regex">/de|fr|hu/</span>\n<span class="token punctuation">)</span>\n</code></pre>\n<p>限定查找 <code>moment/locale</code> 上下文里符合 <code>/de|fr|hu/</code> 表达式的文件，因此也只会打包这几种本地化内容（更多详细信息，请查看<a href="https://github.com/moment/moment/issues/2373">这个 issue</a>）。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">内容回调函数</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span>\n  resourceRegExp<span class="token punctuation">:</span> RegExp<span class="token punctuation">,</span>\n  newContentCallback<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>\n<span class="token punctuation">)</span>\n</code></pre>\n<p><code>newContentCallback</code> 函数的第一形参为<a href="/api/plugins/module-factories/"><code>上下文模块工厂(ContextModuleFactory)</code>的 <code>data</code> 对象</a>，你需要覆写该对象的 <code>request</code> 属性。</p>\n<p>使用这个回调函数，我们可以动态地将请求重定向到一个新的位置：</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span><span class="token regex">/^\\.\\/locale$/</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token regex">/\\/moment\\//</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>context<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    regExp<span class="token punctuation">:</span> <span class="token regex">/^\\.\\/\\w+/</span><span class="token punctuation">,</span>\n    request<span class="token punctuation">:</span> <span class="token string">\'../../locale\'</span> <span class="token comment">// 相对路径解析</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">其他选项</span><a class="icon-link" href="#-"></a></h2>\n<p><code>newContentResource</code> 和 <code>newContentCreateContextMap</code> 参数也可用：</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span>\n  resourceRegExp<span class="token punctuation">:</span> RegExp<span class="token punctuation">,</span>\n  newContentResource<span class="token punctuation">:</span> string<span class="token punctuation">,</span>\n  newContentCreateContextMap<span class="token punctuation">:</span> object <span class="token comment">// 将运行时请求(runtime-request)映射到编译时请求(compile-time request)</span>\n<span class="token punctuation">)</span>\n</code></pre>\n<p>这两个参数可以一起使用，来更加有针对性的重定向请求。 <code>newContentCreateContextMap</code> 允许你将运行时的请求，映射为形式为对象的编译请求：</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">ContextReplacementPlugin</span><span class="token punctuation">(</span><span class="token regex">/selector/</span><span class="token punctuation">,</span> <span class="token string">\'./folder\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">\'./request\'</span><span class="token punctuation">:</span> <span class="token string">\'./request\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'./other-request\'</span><span class="token punctuation">:</span> <span class="token string">\'./new-request\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/context-replacement-plugin/">https://webpack.js.org/plugins/context-replacement-plugin/</a></p>\n</blockquote>\n',title:"ContextReplacementPlugin"},title:"ContextReplacementPlugin",url:"/plugins/context-replacement-plugin/"},{file:{attributes:{title:"CopyWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/copy-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/copy-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/copy-webpack-plugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Available options:",id:"available-options-"},{title:"Examples",id:"examples"},{title:"FAQ",id:"faq"},{title:'"EMFILE: too many open files" or "ENFILE: file table overflow"',id:"-emfile-too-many-open-files-or-enfile-file-table-overflow-"},{title:"This doesn't copy my files with webpack-dev-server",id:"this-doesn-t-copy-my-files-with-webpack-dev-server"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Copies individual files or entire directories to the build directory.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code>npm <span class="token function">install</span> --save-dev copy-webpack-plugin\n</code></pre><h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p><code>new CopyWebpackPlugin([patterns], options)</code></p>\n<p>A pattern looks like:\n<code>{ from: &#39;source&#39;, to: &#39;dest&#39; }</code></p>\n<p>Or, in the simple case of just a <code>from</code> with the default destination, you can use a string primitive instead of an object:\n<code>&#39;source&#39;</code></p>\n<p>###</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Required</div><div class="table-th">Default</div><div class="table-th">Details</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>from</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        Y\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        <em>examples:</em><br>&#39;relative/file.txt&#39;<br>&#39;/absolute/file.txt&#39;<br>&#39;relative/dir&#39;<br>&#39;/absolute/dir&#39;<br>&#39;**/*&#39;<br>{glob:&#39;**/*&#39;, dot: true}<br><br>Globs accept <a href="https://github.com/isaacs/minimatch">minimatch options</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>to</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        output root if <code>from</code> is file or dir<br><br>resolved glob path if <code>from</code> is glob\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        <em>examples:</em><br>&#39;relative/file.txt&#39;<br>&#39;/absolute/file.txt&#39;<br>&#39;relative/dir&#39;<br>&#39;/absolute/dir&#39;<br>&#39;relative/[name].[ext]&#39;<br>&#39;/absolute/[name].[ext]&#39;<br><br>Templates are <a href="/loaders/file-loader/">file-loader patterns</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>toType</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <strong>&#39;file&#39;</strong> if <code>to</code> has extension or <code>from</code> is file<br><br><strong>&#39;dir&#39;</strong> if <code>from</code> is directory, <code>to</code> has no extension or ends in &#39;/&#39;<br><br><strong>&#39;template&#39;</strong> if <code>to</code> contains <a href="/loaders/file-loader/">a template pattern</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>context</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        options.context ||compiler.options.context\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        A path that determines how to interpret the <code>from</code> path\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>flatten</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Removes all directory references and only copies file names<br><br>If files have the same name, the result is non-deterministic\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>ignore</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        []\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Additional globs to ignore for this pattern\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>transform</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        function(content, path) {<br>&nbsp;&nbsp;return content;<br>}\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Function that modifies file contents before writing to webpack\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>force</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Overwrites files already in compilation.assets (usually added by other plugins)\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h4 class="header"><a class="anchor" href="#available-options-" id="available-options-"></a><span class="text">Available options:</span><a class="icon-link" href="#available-options-"></a></h4>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Default</div><div class="table-th">Details</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>context</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        compiler.options.context\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        A path that determines how to interpret the <code>from</code> path, shared for all patterns\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>ignore</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        []\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Array of globs to ignore (applied to <code>from</code>)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>copyUnmodified</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Copies files, regardless of modification when using watch or webpack-dev-server. All files are copied on first build, regardless of this option.\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>debug</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <strong>&#39;warning&#39;</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        <em>options:</em><br><strong>&#39;warning&#39;</strong> - only warnings<br><strong>&#39;info&#39;</strong> or true - file location and read info<br><strong>&#39;debug&#39;</strong> - very detailed debugging info\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h3>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'copy-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'app\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// This is required for older versions of webpack-dev-server</span>\n        <span class="token comment">// if you use absolute \'to\' paths. The path should be an</span>\n        <span class="token comment">// absolute path to your build destination.</span>\n        outputPath<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'build\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n            <span class="token comment">// {output}/file.txt</span>\n            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'from/file.txt\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// equivalent</span>\n            <span class="token string">\'from/file.txt\'</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// {output}/to/file.txt</span>\n            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'from/file.txt\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'to/file.txt\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// {output}/to/directory/file.txt</span>\n            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'from/file.txt\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'to/directory\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// Copy directory contents to {output}/</span>\n            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'from/directory\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// Copy directory contents to {output}/to/directory/</span>\n            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'from/directory\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'to/directory\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// Copy glob results to /absolute/path/</span>\n            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> \'<span class="token keyword">from</span><span class="token operator">/</span>directory<span class="token comment">/**/</span><span class="token operator">*</span><span class="token string">\', to: \'</span><span class="token operator">/</span>absolute<span class="token operator">/</span>path\' <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// Copy glob results (with dot files) to /absolute/path/</span>\n            <span class="token punctuation">{</span>\n                <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    glob<span class="token punctuation">:</span>\'<span class="token keyword">from</span><span class="token operator">/</span>directory<span class="token comment">/**/</span><span class="token operator">*</span>\'<span class="token punctuation">,</span>\n                    dot<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                to<span class="token punctuation">:</span> <span class="token string">\'/absolute/path\'</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// Copy glob results, relative to context</span>\n            <span class="token punctuation">{</span>\n                context<span class="token punctuation">:</span> <span class="token string">\'from/directory\'</span><span class="token punctuation">,</span>\n                <span class="token keyword">from</span><span class="token punctuation">:</span> \'<span class="token operator">*</span><span class="token operator">*</span><span class="token comment">/*\',\n                to: \'/absolute/path\'\n            },\n\n            // {output}/file/without/extension\n            {\n                from: \'path/to/file.txt\',\n                to: \'file/without/extension\',\n                toType: \'file\'\n            },\n\n            // {output}/directory/with/extension.ext/file.txt\n            {\n                from: \'path/to/file.txt\',\n                to: \'directory/with/extension.ext\',\n                toType: \'dir\'\n            }\n        ], {\n            ignore: [\n                // Doesn\'t copy any files with a txt extension    \n                \'*.txt\',\n\n                // Doesn\'t copy any file, even if they start with a dot\n                \'**/</span><span class="token operator">*</span>\'<span class="token punctuation">,</span>\n\n                <span class="token comment">// Doesn\'t copy any file, except if they start with a dot</span>\n                <span class="token punctuation">{</span> glob<span class="token punctuation">:</span> <span class="token string">\'**/*\'</span><span class="token punctuation">,</span> dot<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// By default, we only copy modified files during</span>\n            <span class="token comment">// a watch or webpack-dev-server build. Setting this</span>\n            <span class="token comment">// to `true` copies all files.</span>\n            copyUnmodified<span class="token punctuation">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#faq" id="faq"></a><span class="text">FAQ</span><a class="icon-link" href="#faq"></a></h3>\n<h4 class="header"><a class="anchor" href="#-emfile-too-many-open-files-or-enfile-file-table-overflow-" id="-emfile-too-many-open-files-or-enfile-file-table-overflow-"></a><span class="text">&quot;EMFILE: too many open files&quot; or &quot;ENFILE: file table overflow&quot;</span><a class="icon-link" href="#-emfile-too-many-open-files-or-enfile-file-table-overflow-"></a></h4>\n<p>Globally patch fs with <a href="https://www.npmjs.com/package/graceful-fs">graceful-fs</a></p>\n<p><code>npm install graceful-fs --save-dev</code></p>\n<p>At the top of your webpack config, insert this</p>\n<pre><code>const fs <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconst gracefulFs <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">\'graceful-fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngracefulFs.gracefulify<span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><p>See <a href="https://github.com/kevlened/copy-webpack-plugin/issues/59#issuecomment-228563990">this issue</a> for more details</p>\n<h4 class="header"><a class="anchor" href="#this-doesn-t-copy-my-files-with-webpack-dev-server" id="this-doesn-t-copy-my-files-with-webpack-dev-server"></a><span class="text">This doesn&#39;t copy my files with webpack-dev-server</span><a class="icon-link" href="#this-doesn-t-copy-my-files-with-webpack-dev-server"></a></h4>\n<p>Starting in version <a href="https://github.com/kevlened/copy-webpack-plugin/blob/master/CHANGELOG.md#300-may-14-2016">3.0.0</a>, we stopped using fs to copy files to the filesystem and started depending on webpack&#39;s <a href="https://webpack.github.io/docs/webpack-dev-server.html#content-base">in-memory filesystem</a>:</p>\n<blockquote>\n<p>... webpack-dev-server will serve the static files in your build folder. It’ll watch your source files for changes and when changes are made the bundle will be recompiled. <strong>This modified bundle is served from memory at the relative path specified in publicPath (see API)</strong>. It will not be written to your configured output directory.</p>\n</blockquote>\n<p>If you must have webpack-dev-server write to your output directory, you can force it with the <a href="https://github.com/gajus/write-file-webpack-plugin">write-file-webpack-plugin</a>.</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"CopyWebpackPlugin"},title:"CopyWebpackPlugin",url:"/plugins/copy-webpack-plugin/"},{file:{attributes:{title:"DefinePlugin",contributors:["rouzbeh84","simon04"],group:"-",anchors:[{title:"用法",id:"-"},{title:"功能标记(Feature Flags)",id:"-feature-flags-"},{title:"服务 URL(Service URLs)",id:"-url-service-urls-"}],related:[]},body:'<p><code>DefinePlugin</code> 允许创建一个在<strong>编译</strong>时可以配置的全局常量。这可能会对开发模式和发布模式的构建允许不同的行为非常有用。如果在开发构建中，而不在发布构建中执行日志记录，则可以使用全局常量来决定是否记录日志。这就是 <code>DefinePlugin</code> 的用处，设置它，就可以忘记开发和发布构建的规则。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Definitions...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>每个传进 <code>DefinePlugin</code> 的键值都是一个标志符或者多个用 <code>.</code> 连接起来的标志符。</p>\n<ul>\n<li>如果这个值是一个字符串，它会被当作一个代码片段来使用。</li>\n<li>如果这个值不是字符串，它会被转化为字符串(包括函数)。</li>\n<li>如果这个值是一个对象，它所有的 key 会被同样的方式定义。</li>\n<li>如果在一个 key 前面加了 <code>typeof</code>,它会被定义为 typeof 调用。</li>\n</ul>\n<p>这些值会被内联进那些允许传一个代码压缩参数的代码中，从而减少冗余的条件判断。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  PRODUCTION<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  VERSION<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"5fa3b9"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  BROWSER_SUPPORTS_HTML5<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  TWO<span class="token punctuation">:</span> <span class="token string">"1+1"</span><span class="token punctuation">,</span>\n  <span class="token string">"typeof window"</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"object"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<pre><code class="lang-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Running App version "</span> <span class="token operator">+</span> VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>BROWSER_SUPPORTS_HTML5<span class="token punctuation">)</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html5shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 注意，因为这个插件直接执行文本替换，给定的值必须包含字符串本身内的<strong>实际引号</strong>。通常，有两种方式来达到这个效果，使用 <code>&#39;&quot;production&quot;&#39;</code>, 或者使用 <code>JSON.stringify(&#39;production&#39;)</code>。 </div></blockquote><p><strong>index.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>PRODUCTION<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debug info\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>PRODUCTION<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Production log\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>通过没有使用压缩的 webpack 的结果：</p>\n<pre><code class="lang-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debug info\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Production log\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>通过使用压缩的 webpack 的结果:</p>\n<pre><code class="lang-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Production log\'</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-feature-flags-" id="-feature-flags-"></a><span class="text">功能标记(Feature Flags)</span><a class="icon-link" href="#-feature-flags-"></a></h2>\n<p>使用<a href="https://en.wikipedia.org/wiki/Feature_toggle">功能标记</a>来「启用/禁用」「生产/开发」构建中的功能。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">\'NICE_FEATURE\'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">\'EXPERIMENTAL_FEATURE\'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> When defining values for <code>process</code> prefer <code>&#39;process.env.NODE_ENV&#39;: JSON.stringify(&#39;production&#39;)</code> over <code>process: { env: { NODE_ENV: JSON.stringify(&#39;production&#39;) } }</code>. Using the latter will overwrite the <code>process</code> object which can break compatibility with some modules that expect other values on the process object to be defined. </div></blockquote><h2 class="header"><a class="anchor" href="#-url-service-urls-" id="-url-service-urls-"></a><span class="text">服务 URL(Service URLs)</span><a class="icon-link" href="#-url-service-urls-"></a></h2>\n<p>在「生产/开发」构建中使用不同的服务 URL(Service URLs)：</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">\'SERVICE_URL\'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"http://dev.example.com"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/define-plugin/">https://webpack.js.org/plugins/define-plugin/</a></p>\n</blockquote>\n',title:"DefinePlugin"},title:"DefinePlugin",url:"/plugins/define-plugin/"},{file:{attributes:{title:"DllPlugin",contributors:["aretecode","opiepj","simon04","skipjack","sokra"],related:[{title:"Code Splitting Example",url:"https://github.com/webpack/webpack/tree/master/examples/explicit-vendor-chunk/README.md"}],group:"-",anchors:[{title:"DllPlugin",id:"dllplugin"},{title:"DllReferencePlugin",id:"dllreferenceplugin"},{title:"模式(Modes)",id:"-modes-"},{title:"作用域模式(Scoped Mode)",id:"-scoped-mode-"},{title:"映射模式(Mapped Mode)",id:"-mapped-mode-"},{title:"用法(Usage)",id:"-usage-"},{title:"示例(Examples)",id:"-examples-"},{title:"引用参考(References)",id:"-references-"},{title:"Source",id:"source"},{title:"Tests",id:"tests"}]},body:'<p><code>DLLPlugin</code> 和 <code>DLLReferencePlugin</code> 用某种方法实现了拆分 bundles，同时还大大提升了构建的速度。</p>\n<h2 class="header"><a class="anchor" href="#dllplugin" id="dllplugin"></a><span class="text"><code>DllPlugin</code></span><a class="icon-link" href="#dllplugin"></a></h2>\n<p>这个插件是在一个额外的独立的 webpack 设置中创建一个只有 dll 的 bundle(dll-only-bundle)。 这个插件会生成一个名为 <code>manifest.json</code> 的文件，这个文件是用来让 <a href="/plugins/dll-plugin#dllreferenceplugin"><code>DLLReferencePlugin</code></a> 映射到相关的依赖上去的。</p>\n<ul>\n<li><code>context</code> (optional): manifest 文件中请求的上下文(context)(默认值为 webpack 的上下文(context))</li>\n<li><code>name</code>: 暴露出的 DLL 的函数名 (<a href="https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js">TemplatePaths</a>: <code>[hash]</code> &amp; <code>[name]</code> )</li>\n<li><code>path</code>: manifest json 文件的<strong>绝对路径</strong> (输出文件)</li>\n</ul>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n</code></pre>\n<p>在给定的 <code>path</code> 路径下创建一个名为 <code>manifest.json</code> 的文件。 这个文件包含了从 <code>require</code> 和 <code>import</code> 的request到模块 id 的映射。 <code>DLLReferencePlugin</code> 也会用到这个文件。</p>\n<p>这个插件与 <a href="/configuration/output/#output-library"><code>output.library</code></a> 的选项相结合可以暴露出 (也叫做放入全局域) dll 函数。</p>\n<h2 class="header"><a class="anchor" href="#dllreferenceplugin" id="dllreferenceplugin"></a><span class="text"><code>DllReferencePlugin</code></span><a class="icon-link" href="#dllreferenceplugin"></a></h2>\n<p>这个插件是在 webpack 主配置文件中设置的， 这个插件把只有 dll 的 bundle(们)(dll-only-bundle(s)) 引用到需要的预编译的依赖。</p>\n<ul>\n<li><code>context</code>: (<strong>绝对路径</strong>) manifest (或者是内容属性)中请求的上下文</li>\n<li><code>manifest</code>: 包含 <code>content</code> 和 <code>name</code> 的对象，或者在编译时(compilation)的一个用于加载的 JSON manifest 绝对路径</li>\n<li><code>content</code> (optional): 请求到模块 id 的映射 (默认值为 <code>manifest.content</code>)</li>\n<li><code>name</code> (optional): dll 暴露的地方的名称 (默认值为 <code>manifest.name</code>) (可参考 <a href="/configuration/externals/"><code>externals</code></a>)</li>\n<li><code>scope</code> (optional): dll 中内容的前缀</li>\n<li><code>sourceType</code> (optional): dll 是如何暴露的 (<a href="/configuration/output/#output-librarytarget">libraryTarget</a>)</li>\n</ul>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n</code></pre>\n<p>通过引用 dll 的 manifest 文件来把依赖的名称映射到模块的 id 上，之后再在需要的时候通过内置的 <code>__webpack_require__</code> 函数来 <code>require</code> 他们</p>\n<blockquote class="warning"><div class="tip-content"> 与 <a href="/configuration/output/#output-library"><code>output.library</code></a> 保持 <code>name</code> 的一致性。 </div></blockquote><h3 class="header"><a class="anchor" href="#-modes-" id="-modes-"></a><span class="text">模式(Modes)</span><a class="icon-link" href="#-modes-"></a></h3>\n<p>这个插件支持两种模式，分别是<em>作用域(scoped)</em>和<em>映射(mapped)</em>。</p>\n<h4 class="header"><a class="anchor" href="#-scoped-mode-" id="-scoped-mode-"></a><span class="text">作用域模式(Scoped Mode)</span><a class="icon-link" href="#-scoped-mode-"></a></h4>\n<p>dll 中的内容可以在模块前缀下才能被引用，举例来说，令<code>scope = &quot;xyz&quot;</code>的话，这个 dll 中的名为 <code>abc</code> 的文件可以通过 <code>require(&quot;xyz/abc&quot;)</code> 来获取</p>\n<blockquote class="tip"><div class="tip-content"> <a href="https://github.com/webpack/webpack/tree/master/examples/dll-user">作用域的用例</a> </div></blockquote><h4 class="header"><a class="anchor" href="#-mapped-mode-" id="-mapped-mode-"></a><span class="text">映射模式(Mapped Mode)</span><a class="icon-link" href="#-mapped-mode-"></a></h4>\n<p>dll 中的内容被映射到了当前目录下。如果一个被 <code>require</code> 的文件符合 dll 中的某个文件(解析之后)，那么这个dll中的这个文件就会被使用。</p>\n<p>由于这是在解析了 dll 中每个文件之后才发生的，相同的路径必须能够确保这个 dll bundle 的使用者(不一定是人，可指某些代码)有权限访问。 举例来说， 假如一个 dll bundle 中含有 <code>loadash</code>库 以及 文件<code>abc</code>， 那么 <code>require(&quot;lodash&quot;)</code> 和 <code>require(&quot;./abc&quot;)</code> 都不会被编译进主要的 bundle文件，而是会被 dll 所使用。</p>\n<h2 class="header"><a class="anchor" href="#-usage-" id="-usage-"></a><span class="text">用法(Usage)</span><a class="icon-link" href="#-usage-"></a></h2>\n<blockquote class="warning"><div class="tip-content"> <code>DllReferencePlugin</code> 和 <code>DLL插件DllPlugin</code> 都是在<em>另外</em>的 webpack 设置中使用的。 </div></blockquote><p><strong>webpack.vendor.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  context<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n  name<span class="token punctuation">:</span> <span class="token string">"[name]_[hash]"</span><span class="token punctuation">,</span>\n  path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"manifest.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p><strong>webpack.app.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  context<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n  manifest<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./manifest.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  name<span class="token punctuation">:</span> <span class="token string">"./my-dll.js"</span><span class="token punctuation">,</span>\n  scope<span class="token punctuation">:</span> <span class="token string">"xyz"</span><span class="token punctuation">,</span>\n  sourceType<span class="token punctuation">:</span> <span class="token string">"commonjs2"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-examples-" id="-examples-"></a><span class="text">示例(Examples)</span><a class="icon-link" href="#-examples-"></a></h2>\n<p><a href="https://github.com/webpack/webpack/tree/master/examples/dll">Vendor</a> and <a href="https://github.com/webpack/webpack/tree/master/examples/dll-user">User</a></p>\n<p><em>两个单独的用例，用来分别演示作用域(scope)和上下文(context)。</em></p>\n<blockquote class="tip"><div class="tip-content"> 多个 <code>DllPlugins</code> 和 <code>DllReferencePlugins</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#-references-" id="-references-"></a><span class="text">引用参考(References)</span><a class="icon-link" href="#-references-"></a></h2>\n<h3 class="header"><a class="anchor" href="#source" id="source"></a><span class="text">Source</span><a class="icon-link" href="#source"></a></h3>\n<ul>\n<li><a href="https://github.com/webpack/webpack/tree/master/lib/DllPlugin.js">DllPlugin source</a></li>\n<li><a href="https://github.com/webpack/webpack/tree/master/lib/DllReferencePlugin.js">DllReferencePlugin source</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/DllEntryPlugin.js">DllEntryPlugin source</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/DllModuleFactory.js">DllModuleFactory source</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/LibManifestPlugin.js">ManifestPlugin source</a></li>\n</ul>\n<h3 class="header"><a class="anchor" href="#tests" id="tests"></a><span class="text">Tests</span><a class="icon-link" href="#tests"></a></h3>\n<ul>\n<li><a href="https://github.com/webpack/webpack/tree/master/test/configCases/dll-plugin/0-create-dll/webpack.config.js">DllPlugin creation test</a></li>\n<li><a href="https://github.com/webpack/webpack/tree/master/test/configCases/dll-plugin/2-use-dll-without-scope/webpack.config.js">DllPlugin without scope test</a></li>\n<li><a href="https://github.com/webpack/webpack/tree/master/test/configCases/dll-plugin">DllReferencePlugin use Dll test</a></li>\n</ul>\n',title:"DllPlugin"},title:"DllPlugin",url:"/plugins/dll-plugin/"},{file:{attributes:{title:"EnvironmentPlugin",contributors:["einarlove","rouzbeh84","simon04"],group:"-",anchors:[{title:"用法",id:"-"},{title:"带默认值使用",id:"-"},{title:"DotenvPlugin",id:"dotenvplugin"}],related:[]},body:'<p><code>EnvironmentPlugin</code> 是一个通过 <a href="/plugins/define-plugin"><code>DefinePlugin</code></a> 来设置 <a href="https://nodejs.org/api/process.html#process_process_env"><code>process.env</code></a> 环境变量的快捷方式。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>The <code>EnvironmentPlugin</code> accepts either an array of keys.\n<code>EnvironmentPlugin</code> 可以接收键数组或将键映射到其默认值的对象。（译者注：键是指要设定的环境变量名）</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>EnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'NODE_ENV\'</span><span class="token punctuation">,</span> <span class="token string">\'DEBUG\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre>\n<p>上面的写法和下面这样使用 <code>DefinePlugin</code> 的效果相同：</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">\'process.env.NODE_ENV\'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">\'process.env.DEBUG\'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 使用不存在的环境变量会导致一个 &quot;<code>EnvironmentPlugin</code> - <code>${key}</code> environment variable is undefined&quot; 错误。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">带默认值使用</span><a class="icon-link" href="#-"></a></h2>\n<p>或者，<code>EnvironmentPlugin</code> 也可以接收一个指定相应默认值的对象，如果在 <code>process.env</code> 中对应的环境变量不存在时将使用指定的默认值。</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>EnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  NODE_ENV<span class="token punctuation">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span> <span class="token comment">// 除非有定义 process.env.NODE_ENV，否则就使用 \'development\'</span>\n  DEBUG<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 从 <code>process.env</code> 中取到的值类型均为字符串。 </div></blockquote><blockquote class="tip"><div class="tip-content"> 不同于 <a href="/plugins/define-plugin"><code>DefinePlugin</code></a>，默认值将被 <code>EnvironmentPlugin</code> 执行 <code>JSON.stringify</code>。 </div></blockquote><blockquote class="tip"><div class="tip-content"> 如果要指定一个未设定的默认值，使用 <code>null</code> 来代替 <code>undefined</code>。 </div></blockquote><p><strong> 示例:</strong></p>\n<p>让我们看一下对下面这个用来试验的文件 <code>entry.js</code> 执行前面配置的 <code>EnvironmentPlugin</code> 的结果：</p>\n<pre><code class="lang-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Welcome to production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debugging output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>当在终端执行 <code>NODE_ENV=production webpack</code> 来构建时，<code>entry.js</code> 变成了这样：</p>\n<pre><code class="lang-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'production\'</span> <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &lt;-- NODE_ENV 的 \'production\' 被带过来了</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Welcome to production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &lt;-- 使用了默认值</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debugging output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>执行 <code>DEBUG=false webpack</code> 则会生成：</p>\n<pre><code class="lang-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'development\'</span> <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &lt;-- 使用了默认值</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Welcome to production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'false\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &lt;-- DEBUG 的 \'false\' 被带过来了</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debugging output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#dotenvplugin" id="dotenvplugin"></a><span class="text"><code>DotenvPlugin</code></span><a class="icon-link" href="#dotenvplugin"></a></h2>\n<p>The third-party <a href="https://github.com/mrsteele/dotenv-webpack"><code>DotenvPlugin</code></a> (<code>dotenv-webpack</code>) allows you to expose (a subset of) <a href="https://www.npmjs.com/package/dotenv">dotenv variables</a>:</p>\n<pre><code class="lang-bash">// .env\nDB_HOST<span class="token operator">=</span>127.0.0.1\nDB_PASS<span class="token operator">=</span>foobar\nS3_API<span class="token operator">=</span>mysecretkey\n</code></pre>\n<pre><code class="lang-javascript"> <span class="token keyword">new</span> <span class="token class-name">Dotenv</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  path<span class="token punctuation">:</span> <span class="token string">\'./.env\'</span><span class="token punctuation">,</span> <span class="token comment">// Path to .env file (this is the default)</span>\n  safe<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment">// load .env.example (defaults to "false" which does not use dotenv-safe)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/environment-plugin/">https://webpack.js.org/plugins/environment-plugin/</a></p>\n</blockquote>\n',title:"EnvironmentPlugin"},title:"EnvironmentPlugin",url:"/plugins/environment-plugin/"},{file:{attributes:{title:"ExtractTextWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/extract-text-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/extract-text-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/extract-text-webpack-plugin",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"选项",id:"-"},{title:"#extract",id:"-extract"},{title:"多个实例",id:"-"},{title:"提取 Sass 或 LESS",id:"-sass-less"},{title:"修改文件名",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Extract text from a bundle, or bundles, into a separate file.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">\nnpm <span class="token function">install</span> --save-dev extract-text-webpack-plugin\n<span class="token comment"># 对于 webpack 2</span>\nnpm <span class="token function">install</span> --save-dev extract-text-webpack-plugin@2.1.2\n<span class="token comment"># 对于 webpack 1</span>\nnpm <span class="token function">install</span> --save-dev extract-text-webpack-plugin@1.0.1\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<blockquote>\n<p>:警告: 对于 webpack v1, 请看 <a href="https://github.com/webpack/extract-text-webpack-plugin/blob/webpack-1/README.md">分支为 webpack-1 的 README 文档</a>。</p>\n</blockquote>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"extract-text-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          fallback<span class="token punctuation">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n          use<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">"styles.css"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>它会将所有的入口 chunk(entry chunks)中引用的 <code>*.css</code>，移动到独立分离的 CSS 文件。因此，你的样式将不再内嵌到 JS bundle 中，而是会放到一个单独的 CSS 文件（即 <code>styles.css</code>）当中。 如果你的样式文件大小较大，这会做更快提前加载，因为 CSS bundle 会跟 JS bundle 并行加载。</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">优点</div><div class="table-th">缺点</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        优点\n    </div>\n    <div class="table-td-content">\n        更少 style 标签 (旧版本的 IE 浏览器有限制)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        缺点\n    </div>\n    <div class="table-td-content">\n        额外的 HTTP 请求\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        优点\n    </div>\n    <div class="table-td-content">\n        CSS SourceMap (使用 <code>devtool: &quot;source-map&quot;</code> 和 <code>extract-text-webpack-plugin?sourceMap</code> 配置)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        缺点\n    </div>\n    <div class="table-td-content">\n        更长的编译时间\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        优点\n    </div>\n    <div class="table-td-content">\n        CSS 请求并行\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        缺点\n    </div>\n    <div class="table-td-content">\n        没有运行时(runtime)的公共路径修改\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        优点\n    </div>\n    <div class="table-td-content">\n        CSS 单独缓存\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        缺点\n    </div>\n    <div class="table-td-content">\n        没有热替换\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        优点\n    </div>\n    <div class="table-td-content">\n        更快的浏览器运行时(runtime) (更少代码和 DOM 操作)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        缺点\n    </div>\n    <div class="table-td-content">\n        ...\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> filename <span class="token operator">|</span> object<span class="token punctuation">)</span>\n</code></pre>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">名称</div><div class="table-th">类型</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>id</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        此插件实例的唯一 ident。（仅限高级用途，默认情况下自动生成）\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>filename</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        生成文件的文件名。可能包含 <code>[name]</code>, <code>[id]</code> and <code>[contenthash]</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>allChunks</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        从所有额外的 chunk(additional chunk) 提取（默认情况下，它仅从初始chunk(initial chunk) 中提取）<br />当使用 <code>CommonsChunkPlugin</code> 并且在公共 chunk 中有提取的 chunk（来自<code>ExtractTextPlugin.extract</code>）时，<code>allChunks</code> **必须设置为 <code>true</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>disable</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        禁用插件\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>ignoreOrder</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        禁用顺序检查 (这对 CSS 模块很有用！)，默认 <code>false</code>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><ul>\n<li><code>[name]</code> chunk 的名称</li>\n<li><code>[id]</code> chunk 的数量</li>\n<li><code>[contenthash]</code> 根据提取文件的内容生成的 hash</li>\n<li><code>[&lt;hashType&gt;:contenthash:&lt;digestType&gt;:&lt;length&gt;]</code> optionally you can configure<ul>\n<li>other <code>hashType</code>s, e.g. <code>sha1</code>, <code>md5</code>, <code>sha256</code>, <code>sha512</code></li>\n<li>other <code>digestType</code>s, e.g. <code>hex</code>, <code>base26</code>, <code>base32</code>, <code>base36</code>, <code>base49</code>, <code>base52</code>, <code>base58</code>, <code>base62</code>, <code>base64</code></li>\n<li>and <code>length</code>, the length of the hash in chars</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>:警告: <code>ExtractTextPlugin</code> 对 <strong> 每个入口 chunk</strong> 都生成一个对应的文件，所以当你配置多个入口 chunk 的时候，你必须使用 <code>[name]</code>, <code>[id]</code> 或 <code>[contenthash]</code>，</p>\n</blockquote>\n<h4 class="header"><a class="anchor" href="#-extract" id="-extract"></a><span class="text"><code>#extract</code></span><a class="icon-link" href="#-extract"></a></h4>\n<pre><code class="lang-js">ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> loader <span class="token operator">|</span> object<span class="token punctuation">)</span>\n</code></pre>\n<p>从一个已存在的 loader 中，创建一个提取(extract) loader。支持的 loader 类型 <code>{ loader: [name]-loader -&gt; {String}, options: {} -&gt; {Object} }</code>。</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">名称</div><div class="table-th">类型</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>options.use</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>/<code>{Array}</code>/<code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        loader 被用于将资源转换成一个 CSS 导出模块 <em>(必填)</em>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>options.fallback</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>/<code>{Array}</code>/<code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        loader（例如 <code>&#39;style-loader&#39;</code>）应用于当 CSS 没有被提取(也就是一个额外的 chunk，当 <code>allChunks: false</code>)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>options.publicPath</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        重写此 loader 的 <code>publicPath</code> 配置\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h4 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">多个实例</span><a class="icon-link" href="#-"></a></h4>\n<p>如果有多于一个 <code>ExtractTextPlugin</code> 示例的情形，请使用此方法每个实例上的 <code>extract</code> 方法。</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建多个实例</span>\n<span class="token keyword">const</span> extractCSS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'stylesheets/[name]-one.css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> extractLESS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'stylesheets/[name]-two.css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> extractCSS<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'postcss-loader\'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.less$/i</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> extractLESS<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'less-loader\'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    extractCSS<span class="token punctuation">,</span>\n    extractLESS\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-sass-less" id="-sass-less"></a><span class="text">提取 Sass 或 LESS</span><a class="icon-link" href="#-sass-less"></a></h3>\n<p>配置和上面是相同的，需要时可以将 <code>sass-loader</code> 切换为 <code>less-loader</code>。</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          fallback<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          <span class="token comment">//如果需要，可以在 sass-loader 之前将 resolve-url-loader 链接进来</span>\n          use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'sass-loader\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'style.css\'</span><span class="token punctuation">)</span>\n    <span class="token comment">//如果想要传入选项，你可以这样做：</span>\n    <span class="token comment">//new ExtractTextPlugin({</span>\n    <span class="token comment">//  filename: \'style.css\'</span>\n    <span class="token comment">//})</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">修改文件名</span><a class="icon-link" href="#-"></a></h3>\n<p><code>filename</code> 参数可以是 <code>Function</code>。它通过 <code>getPath</code> 来处理格式，如 <code>css/[name].css</code>，并返回真实的文件名，你可以用 <code>css</code> 替换 <code>css/js</code>，你会得到新的路径 <code>css/a.css</code>。</p>\n<pre><code class="lang-js">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">\'js/a\'</span><span class="token punctuation">:</span> <span class="token string">"./a"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nplugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span>  <span class="token punctuation">(</span>getPath<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token string">\'css/[name].css\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">\'css/js\'</span><span class="token punctuation">,</span> <span class="token string">\'css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    allChunks<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/extract-text-webpack-plugin/">https://webpack.js.org/plugins/extract-text-webpack-plugin/</a></p>\n</blockquote>\n',title:"ExtractTextWebpackPlugin"},title:"ExtractTextWebpackPlugin",url:"/plugins/extract-text-webpack-plugin/"},{file:{attributes:{title:"HashedModuleIdsPlugin",contributors:["shaodahong"],group:"-",anchors:[{title:"参数",id:"-"},{title:"用法",id:"-"}],related:[]},body:'<p>该插件会根据模块的相对路径生成一个四位数的hash作为模块id, 建议用于生产环境。</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HashedModuleIdsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 参数...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">参数</span><a class="icon-link" href="#-"></a></h2>\n<p>该插件支持以下参数：</p>\n<ul>\n<li><code>hashFunction</code>: 散列算法，默认为 &#39;md5&#39;。支持 Node.JS <a href="https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options"><code>crypto.createHash</code></a> 的所有功能。</li>\n<li><code>hashDigest</code>: 在生成 hash 时使用的编码方式，默认为 &#39;base64&#39;。支持 Node.js <a href="https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding"><code>hash.digest</code></a> 的所有编码。</li>\n<li><code>hashDigestLength</code>: 散列摘要的前缀长度，默认为 4。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>下面是使用该插件的例子：</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HashedModuleIdsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  hashFunction<span class="token punctuation">:</span> <span class="token string">\'sha256\'</span><span class="token punctuation">,</span>\n  hashDigest<span class="token punctuation">:</span> <span class="token string">\'hex\'</span><span class="token punctuation">,</span>\n  hashDigestLength<span class="token punctuation">:</span> <span class="token number">20</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"HashedModuleIdsPlugin"},title:"HashedModuleIdsPlugin",url:"/plugins/hashed-module-ids-plugin/"},{file:{attributes:{title:"模块热替换插件(HotModuleReplacementPlugin)",contributors:["skipjack"],related:[{title:"Concepts - Hot Module Replacement",url:"/concepts/hot-module-replacement"},{title:"API - Hot Module Replacement",url:"/api/hot-module-replacement"}],group:"-",anchors:[{title:"基本用法(Basic Usage)",id:"-basic-usage-"},{title:"选项(Options)",id:"-options-"}]},body:'<p>启用<a href="/concepts/hot-module-replacement">热替换模块(Hot Module Replacement)</a>，也被称为 HMR。</p>\n<blockquote class="warning"><div class="tip-content"> <strong>永远不要</strong>在生产环境(production)下启用 HMR </div></blockquote><h2 class="header"><a class="anchor" href="#-basic-usage-" id="-basic-usage-"></a><span class="text">基本用法(Basic Usage)</span><a class="icon-link" href="#-basic-usage-"></a></h2>\n<p>启用 HMR 非常简单，在大多数情况下也不需要设置选项。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Options...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-options-" id="-options-"></a><span class="text">选项(Options)</span><a class="icon-link" href="#-options-"></a></h2>\n<p>包含如下选项：</p>\n<ul>\n<li><code>multiStep</code> (boolean)：设置为 <code>true</code> 时，插件会分成两步构建文件。首先编译热加载 chunks，之后再编译剩余的通常的资源。</li>\n<li><code>fullBuildTimeout</code> (number)：当 <code>multiStep</code> 启用时，表示两步构建之间的延时。</li>\n<li><code>requestTimeout</code> (number)：下载 manifest 的延时（webpack 3.0.0 后的版本支持）。</li>\n</ul>\n<blockquote class="warning"><div class="tip-content"> 这些选项属于实验性内容，因此以后可能会被弃用。就如同上文所说的那样，这些选项通常情况下都是没有必要设置的，仅仅是设置一下 <code>new webpack.HotModuleReplacementPlugin()</code> 在大部分情况下就足够了。 </div></blockquote>',title:"模块热替换插件(HotModuleReplacementPlugin)"},title:"模块热替换插件(HotModuleReplacementPlugin)",url:"/plugins/hot-module-replacement-plugin/"},{file:{attributes:{title:"HtmlWebpackPlugin",contributors:["ampedandwired","simon04"],group:"-",anchors:[{title:"安装",id:"-"},{title:"基本用法",id:"-"},{title:"配置",id:"-"},{title:"第三方插件",id:"-"}],related:[]},body:'<p><a href="https://github.com/ampedandwired/html-webpack-plugin"><code>HtmlWebpackPlugin</code></a>简化了HTML文件的创建，以便为你的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。 你可以让插件为你生成一个HTML文件，使用<a href="https://lodash.com/docs#template">lodash模板</a>提供你自己的模板，或使用你自己的<a href="/loaders">loader</a>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev html-webpack-plugin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">基本用法</span><a class="icon-link" href="#-"></a></h2>\n<p>该插件将为你生成一个HTML5文件，其中包括使用<code>script</code>标签的body中的所有webpack包。 只需添加插件到你的webpack配置如下：</p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'index_bundle.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>这将会产生一个包含以下内容的文件 <code>dist/index.html</code>：</p>\n<pre><code class="lang-html"><span class="token doctype">&lt;!DOCTYPE html></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>webpack App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index_bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>如果你有多多个webpack入口点，他们都会在生成的HTML文件中的<code>script</code>标签内。</p>\n<p>如果你有任何CSS assets 在webpack的输出中（例如，利用<a href="/plugins/extract-text-webpack-plugin">ExtractTextPlugin</a>提取CSS），那么这些将被包含在HTML head中的<code>&lt;link&gt;</code>标签内。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">配置</span><a class="icon-link" href="#-"></a></h2>\n<p>获取所有的配置选项，请浏览<a href="https://github.com/ampedandwired/html-webpack-plugin#configuration">插件文档</a>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">第三方插件</span><a class="icon-link" href="#-"></a></h2>\n<p>这个插件支持第三方插件。详细列表参阅<a href="https://github.com/ampedandwired/html-webpack-plugin#third-party-addons">文档</a>。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/html-webpack-plugin/">https://webpack.js.org/plugins/html-webpack-plugin/</a></p>\n</blockquote>\n',title:"HtmlWebpackPlugin"},title:"HtmlWebpackPlugin",url:"/plugins/html-webpack-plugin/"},{file:{attributes:{title:"BabelMinifyWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/babel-minify-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/babel-minify-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/babel-minify-webpack-plugin",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"选项",id:"-"},{title:"pluginOpts",id:"pluginopts"},{title:"为什么",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>一个用于<a href="https://github.com/babel/minify">babel-minify</a>的 webpack 插件 - 基于 babel 的 minifier</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> babel-minify-webpack-plugin --save-dev\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> MinifyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-minify-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token comment">//...,</span>\n  output<span class="token punctuation">:</span> <span class="token comment">//...,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">MinifyPlugin</span><span class="token punctuation">(</span>minifyOpts<span class="token punctuation">,</span> pluginOpts<span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n<p>###</p>\n<p><code>minifyOpts</code> 被传递给 babel-preset-minify。 你可以在包目录中找到<a href="https://github.com/babel/minify/tree/master/packages/babel-preset-minify#options">所有可用的选项</a>。</p>\n<p><code>Default: {}</code></p>\n<h4 class="header"><a class="anchor" href="#pluginopts" id="pluginopts"></a><span class="text">pluginOpts</span><a class="icon-link" href="#pluginopts"></a></h4>\n<ul>\n<li><code>test</code>: JS文件扩展名正则表达式。 默认: <code>/\\.js($|\\?)/i</code></li>\n<li><code>comments</code>: 保留注释。 默认: <code>/^\\**!|@preserve|@license|@cc_on/</code>, <code>falsy</code> 值将移除所有注释。可以接受函数，带有测试属性的（正则）的对象和值。</li>\n<li><code>sourceMap</code>: 默认: 使用 <a href="https://webpack.js.org/configuration/devtool/">webpackConfig.devtool</a>。 这里的设置会覆写<code>devtool</code>的设置。</li>\n<li><code>parserOpts</code>: 配置具有特殊解析器选项的babel。</li>\n<li><code>babel</code>: 传入一个自定义的 babel-core，代替原来的。 <code>require(&quot;babel-core&quot;)</code></li>\n<li><code>minifyPreset</code>: 传入一个自定义的 minify preset，代替原来的。 - <code>require(&quot;babel-preset-minify&quot;)</code>.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">为什么</span><a class="icon-link" href="#-"></a></h2>\n<p>你也可以在webpack中使用<a href="https://github.com/babel/babel-loader">babel-loader</a>，引入 <code>minify</code> <a href="https://github.com/babel/minify#babel-preset">作为一个预设</a>并且应该运行的更快 - 因为 <code>babel-minify</code> 将运行在更小的文件。但是，这个插件为什么还存在呢？</p>\n<ul>\n<li>webpack loader 对单个文件进行操作，并且 minify preset 作为一个 webpack loader将会把每个文件视为在浏览器全局范围内直接执行（默认情况下），并且不会优化顶级作用域内的某些内容。要在文件的顶级作用域内进行优化，请在 minifyOptions 中设置 <code>mangle: { topLevel: true }</code>。</li>\n<li>当你排除 <code>node_modules</code> 不通过 babel-loader 运行时，babel-minify 优化不会应用于被排除的文件，因为它们不会通过 minifier。</li>\n<li>当你使用带有 webpack 的 babel-loader 时，由 webpack 为模块系统生成的代码不会通过 loader，并且不会通过 babel-minify 进行优化。</li>\n<li>一个 webpack 插件可以在整个 chunk/bundle 输出上运行，并且可以优化整个bundle，你可以看到一些细微的输出差异。但是，由于文件大小通常非常大，所以会慢很多。所以这里有<a href="https://github.com/webpack-contrib/babel-minify-webpack-plugin/issues/8">一个想法</a> - 我们可以将一些优化作为 loader 的一部分，并在插件中进行一些优化。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/294474?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/boopathi"></p>\n<p>Boopathi Rajaa</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"BabelMinifyWebpackPlugin"},title:"BabelMinifyWebpackPlugin",url:"/plugins/babel-minify-webpack-plugin/"},{file:{attributes:{title:"IgnorePlugin",contributors:["simon04"],group:"-",anchors:[{title:"忽略 moment 的本地化内容",id:"-moment-"}],related:[]},body:'<p>防止在 <code>import</code> 或 <code>require</code> 调用时，生成以下正则表达式匹配的模块：</p>\n<ul>\n<li><code>requestRegExp</code> 匹配(test)资源请求路径的正则表达式。</li>\n<li><code>contextRegExp</code> （可选）匹配(test)资源上下文（目录）的正则表达式。</li>\n</ul>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span>requestRegExp<span class="token punctuation">,</span> <span class="token punctuation">[</span>contextRegExp<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre>\n<p>以下示例演示了此插件的几种用法。</p>\n<h2 class="header"><a class="anchor" href="#-moment-" id="-moment-"></a><span class="text">忽略 moment 的本地化内容</span><a class="icon-link" href="#-moment-"></a></h2>\n<p><a href="https://momentjs.com/">moment</a> 2.18 会将所有本地化内容和核心功能一起打包（见<a href="https://github.com/moment/moment/issues/2373">该 GitHub issue</a>）。你可使用 <code>IgnorePlugin</code> 在打包时忽略本地化内容:</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token regex">/^\\.\\/locale$/</span><span class="token punctuation">,</span> <span class="token regex">/moment$/</span><span class="token punctuation">)</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/ignore-plugin/">https://webpack.js.org/plugins/ignore-plugin/</a></p>\n</blockquote>\n',title:"IgnorePlugin"},title:"IgnorePlugin",url:"/plugins/ignore-plugin/"},{file:{attributes:{title:"LimitChunkCountPlugin",contributors:["rouzbeh84","skipjack","tbroadley"],group:"-",anchors:[{title:"选项",id:"-"},{title:"命令行接口(CLI)",id:"-cli-"}],related:[]},body:'<p>当你在编写代码时，可能已经添加了许多代码分离点(code split point)来实现按需加载(load stuff on demand)。在编译完之后，你可能会注意到有一些很小的 chunk - 这产生了大量 HTTP 请求开销。幸运的是，此插件可以通过合并的方式，后处理你的 chunk，以减少请求数。</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>LimitChunkCountPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 选项……</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n<p>选项可以支持以下：</p>\n<ul>\n<li><code>maxChunks</code>：使用大于或等于 <code>1</code> 的值，来限制 chunk 的最大数量。使用 <code>1</code> 防止添加任何其他额外的 chunk，这是因为 entry/main chunk 也会包含在计数之中。</li>\n<li><code>minChunkSize</code>: 设置 chunk 的最小大小。</li>\n</ul>\n<p>在合并 chunk 时，webpack 会尝试识别出具有重复模块的 chunk，并优先进行合并。任何模块都不会被合并到 entry chunk 中，以免影响初始页面加载时间。这里有一个小例子：</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>LimitChunkCountPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  maxChunks<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 必须大于或等于 1</span>\n  minChunkSize<span class="token punctuation">:</span> <span class="token number">1000</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-cli-" id="-cli-"></a><span class="text">命令行接口(CLI)</span><a class="icon-link" href="#-cli-"></a></h2>\n<p>此插件和其选项还可以通过命令行接口(CLI)执行：</p>\n<pre><code class="lang-bash">--optimize-max-chunks 15\n</code></pre>\n<p>或</p>\n<pre><code class="lang-bash">--optimize-min-chunk-size 10000\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/limit-chunk-count-plugin/">https://webpack.js.org/plugins/limit-chunk-count-plugin/</a></p>\n</blockquote>\n',title:"LimitChunkCountPlugin"},title:"LimitChunkCountPlugin",url:"/plugins/limit-chunk-count-plugin/"},{file:{attributes:{title:"LoaderOptionsPlugin",contributors:["johnnyreilly","skipjack"],group:"-",anchors:[{title:"选项",id:"-"},{title:"用法",id:"-"}],related:[]},body:'<p><code>loader-options-plugin</code> 和其他插件不同，它用于将 webpack 1 迁移至 webpack 2。在 webpack 2 中，对 <code>webpack.config.js</code> 的结构要求变得更加严格；不再开放扩展给其他的 loader/插件。webpack 2 推荐的使用方式是直接传递 <code>options</code> 给 loader/插件（换句话说，<code>配置选项</code>将<strong>不是</strong>全局/共享的）。</p>\n<p>不过，在某个 loader 升级为依靠直接传递给它的配置选项运行之前，可以使用 <code>loader-options-plugin</code> 来抹平差异。你可以通过这个插件配置全局/共享的 loader 配置，使所有的 loader 都能收到这些配置。</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderOptionsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Options...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> 将来这个插件可能会被移除，因为它只是用于迁移。 </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n<p>此插件支持以下选项：</p>\n<ul>\n<li><code>options.debug</code> (<code>boolean</code>)：loader 是否为 <code>debug</code> 模式。<code>debug</code> 在 webpack 3 中将被移除。</li>\n<li><code>options.minimize</code> (<code>boolean</code>)：loader 是否要切换到优化模式。</li>\n<li><code>options.options</code> (<code>object</code>)：一个配置对象，用来配置旧的 loader - 将使用和 <code>webpack.config.js</code> 相同的结构。</li>\n<li><code>options.options.context</code> (<code>string</code>)：配置 loader 时使用的上下文。</li>\n<li>任何其他选项和在 <code>webpack.config.js</code> 中一样……</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>关于此插件可能的用法，这里有个示例：</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderOptionsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  minimize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  debug<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">:</span> __dirname\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/loader-options-plugin/">https://webpack.js.org/plugins/loader-options-plugin/</a></p>\n</blockquote>\n',title:"LoaderOptionsPlugin"},title:"LoaderOptionsPlugin",url:"/plugins/loader-options-plugin/"},{file:{attributes:{title:"MinChunkSizePlugin",contributors:[],sort:1,group:"-",anchors:[],related:[]},body:'<p>通过合并小于 <code>minChunkSize</code> 大小的 chunk，将 chunk 体积保持在指定大小限制以上。</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>MinChunkSizePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  minChunkSize<span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token comment">// Minimum number of characters</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/min-chunk-size-plugin/">https://webpack.js.org/plugins/min-chunk-size-plugin/</a></p>\n</blockquote>\n',title:"MinChunkSizePlugin"},title:"MinChunkSizePlugin",url:"/plugins/min-chunk-size-plugin/"},{file:{attributes:{title:"ModuleConcatenationPlugin",contributors:["TheLarkInn","skipjack"],related:[{"webpack 3":"Official Release!!"}],group:"-",anchors:[{title:"绑定失败的优化[Optimization Bailouts]",id:"-optimization-bailouts-"},{title:"模块分组算法[Module Grouping Algorithm]",id:"-module-grouping-algorithm-"},{title:"优化绑定失败的调试[Debugging Optimization Bailouts]",id:"-debugging-optimization-bailouts-"}]},body:'<p>过去 webpack 打包时的一个取舍是将 bundle 中各个模块单独打包成闭包。这些打包函数使你的 JavaScript 在浏览器中处理的更慢。相比之下，一些工具像 Closure Compiler 和 RollupJS 可以提升(hoist)或者预编译所有模块到一个闭包中，提升你的代码在浏览器中的执行速度。</p>\n<p>这个插件会在 webpack 中实现以上的预编译功能。</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>ModuleConcatenationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote>\n<p>这种连结行为被称为“作用域提升(scope hoisting)”。</p>\n<p>由于实现 ECMAScript 模块语法，作用域提升(scope hoisting)这个特定于此语法的功能才成为可能。<code>webpack</code> 可能会根据你正在使用的模块类型和<a href="https://medium.com/webpack/webpack-freelancing-log-book-week-5-7-4764be3266f5">其他的情况</a>，回退到普通打包。</p>\n</blockquote>\n<h2 class="header"><a class="anchor" href="#-optimization-bailouts-" id="-optimization-bailouts-"></a><span class="text">绑定失败的优化[Optimization Bailouts]</span><a class="icon-link" href="#-optimization-bailouts-"></a></h2>\n<p>像文章中解释的，webpack 试图达到分批的作用域提升(scope hoisting)。它会将一些模块绑定到一个作用域内，但并不是任何情况下都会这么做。如果 webpack 不能绑定模块，将会有两个选择 Prevent 和 Root，Prevent 意思是模块必须在自己的作用域内。 Root 意味着将创建一个新的模块组。以下条件决定了输出结果：</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Condition</div><div class="table-th">Outcome</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Non ES6 Module\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Prevent\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Imported By Non Import\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Root\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Imported From Other Chunk\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Root\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Imported By Multiple Other Module Groups\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Root\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Imported With <code>import()</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Root\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Affected By <code>ProvidePlugin</code> Or Using <code>module</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Prevent\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        HMR Accepted\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Root\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Using <code>eval()</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Prevent\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        In Multiple Chunks\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Prevent\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        <code>export * from &quot;cjs-module&quot;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Prevent\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#-module-grouping-algorithm-" id="-module-grouping-algorithm-"></a><span class="text">模块分组算法[Module Grouping Algorithm]</span><a class="icon-link" href="#-module-grouping-algorithm-"></a></h3>\n<p>以下 JavaScript 伪代码解释了算法：</p>\n<pre><code class="lang-js">modules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>module <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    root<span class="token punctuation">:</span> module\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  module<span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>dependency <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token function">tryToAdd</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> dependency<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>group<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    orderedModules <span class="token operator">=</span> <span class="token function">topologicalSort</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span>modules<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    concatenatedModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcatenatedModule</span><span class="token punctuation">(</span>orderedModules<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    chunk<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>concatenatedModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    orderedModules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>groupModule <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      chunk<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>groupModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">tryToAdd</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPreconditions</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> nextGroup <span class="token operator">=</span> group<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> module<span class="token punctuation">.</span>dependents<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>check<span class="token punctuation">,</span> dependent<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> check <span class="token operator">&amp;&amp;</span> <span class="token function">tryToAdd</span><span class="token punctuation">(</span>nextGroup<span class="token punctuation">,</span> dependent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  module<span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>dependency <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token function">tryToAdd</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> dependency<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  group<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>nextGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-debugging-optimization-bailouts-" id="-debugging-optimization-bailouts-"></a><span class="text">优化绑定失败的调试[Debugging Optimization Bailouts]</span><a class="icon-link" href="#-debugging-optimization-bailouts-"></a></h3>\n<p>当我们使用 webpack CLI 时，加上参数 <code>--display-optimization-bailout</code> 将显示绑定失败的原因。在 webpack 配置里，只需将以下内容添加到 stats 对象中：</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>stats<span class="token punctuation">,</span>\n  <span class="token comment">// Examine all modules</span>\n  maxModules<span class="token punctuation">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>\n  <span class="token comment">// Display bailout reasons</span>\n  optimizationBailout<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',title:"ModuleConcatenationPlugin"},title:"ModuleConcatenationPlugin",url:"/plugins/module-concatenation-plugin/"},{file:{attributes:{title:"NamedModulesPlugin",contributors:["shaodahong"],group:"-",anchors:[],related:[]},body:'<p>当开启 <a href="/guides/hot-module-replacement">HMR</a> 的时候使用该插件会显示模块的相对路径，建议用于开发环境。</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NamedModulesPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"NamedModulesPlugin"},title:"NamedModulesPlugin",url:"/plugins/named-modules-plugin/"},{file:{attributes:{title:"NoEmitOnErrorsPlugin",contributors:["simon04"],group:"-",anchors:[],related:[]},body:'<p>在编译出现错误时，使用 <code>NoEmitOnErrorsPlugin</code> 来跳过输出阶段。这样可以确保输出资源不会包含错误。对于所有资源，统计资料(stat)的 <code>emitted</code> 标识都是 <code>false</code>。</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NoEmitOnErrorsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 此插件用于取代（现已弃用）webpack 1 的 <code>NoErrorsPlugin</code> 插件。 </div></blockquote><p>如果你在使用 <a href="/api/cli/">CLI</a>，启用此插件后，webpack 进程遇到错误代码将不会退出。如果你希望 webpack 在使用 CLI 时出现 &quot;fail&quot; 提示，请查看 <a href="/api/cli/#advanced-options"><code>bail</code> 选项</a>。</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/no-emit-on-errors-plugin/">https://webpack.js.org/plugins/no-emit-on-errors-plugin/</a></p>\n</blockquote>\n',title:"NoEmitOnErrorsPlugin"},title:"NoEmitOnErrorsPlugin",url:"/plugins/no-emit-on-errors-plugin/"},{file:{attributes:{title:"NormalModuleReplacementPlugin",contributors:["gonzoyumo"],group:"-",anchors:[{title:"基本示例",id:"-"},{title:"高级示例",id:"-"}],related:[]},body:'<p><code>NormalModuleReplacementPlugin</code> 允许你用 <code>newResource</code> 替换与 <code>resourceRegExp</code> 匹配的资源。如果 <code>newResource</code> 是相对路径，它会相对于先前的资源被解析。如果 <code>newResource</code> 是函数，它将会覆盖之前被提供资源的请求。</p>\n<p>这对于允许在构建中的不同行为是有用的。</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NormalModuleReplacementPlugin</span><span class="token punctuation">(</span>\n  resourceRegExp<span class="token punctuation">,</span>\n  newResource\n<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">基本示例</span><a class="icon-link" href="#-"></a></h2>\n<p>在构建<a href="/guides/production">开发环境</a>时替换特定的模块。</p>\n<p>假设你有一个配置文件 <code>some/path/config.development.module.js</code> 并且在生产环境有一个特殊的版本 <code>some/path/config.production.module.js</code></p>\n<p>只需在生产构建时添加以下插件：</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NormalModuleReplacementPlugin</span><span class="token punctuation">(</span>\n  <span class="token regex">/some\\/path\\/config\\.development\\.js/</span><span class="token punctuation">,</span>\n  <span class="token string">\'./config.production.js\'</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">高级示例</span><a class="icon-link" href="#-"></a></h2>\n<p>根据<a href="/configuration/configuration-types">指定环境</a>的条件构建。</p>\n<p>假设你想要一个为了不同构建目标的特定值的配置。</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> appTarget <span class="token operator">=</span> env<span class="token punctuation">.</span>APP_TARGET <span class="token operator">||</span> <span class="token string">\'VERSION_A\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NormalModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token regex">/(.*)-APP_TARGET(\\.*)/</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        resource<span class="token punctuation">.</span>request <span class="token operator">=</span> resource<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-APP_TARGET/</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>appTarget<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre>\n<p>创建两个配置文件：</p>\n<p><strong>app/config-VERSION_A.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  title <span class="token punctuation">:</span> <span class="token string">\'I am version A\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>app/config-VERSION_B.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  title <span class="token punctuation">:</span> <span class="token string">\'I am version B\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>然后使用在正则中查找的关键字来引入配置：</p>\n<pre><code class="lang-javascript"><span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">\'app/config-APP_TARGET\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>根据你的构建目标，现在你引入了正确的配置。</p>\n<pre><code class="lang-shell">webpack --env.APP_TARGET VERSION_A\n<span class="token operator">=</span><span class="token operator">></span> <span class="token string">\'I am version A\'</span>\n\nwebpack --env.APP_TARGET VERSION_B\n<span class="token operator">=</span><span class="token operator">></span> <span class="token string">\'I am version B\'</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/normal-module-replacement-plugin/">https://webpack.js.org/plugins/normal-module-replacement-plugin/</a></p>\n</blockquote>\n',title:"NormalModuleReplacementPlugin"},title:"NormalModuleReplacementPlugin",url:"/plugins/normal-module-replacement-plugin/"},{file:{attributes:{title:"NpmInstallWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/npm-install-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/npm-install-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/npm-install-webpack-plugin",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"Demo",id:"demo"},{title:"Features",id:"features"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Speed up development by <b>automatically installing &amp; saving dependencies</b> with Webpack.</p>\n<p>It sucks to <kbd>Ctrl-C</kbd> your\nbuild script &amp; server just to install\na dependency you didn&#39;t know you needed until now.</p>\n<p>Instead, use <code>require</code> or <code>import</code> how you normally would and <code>npm install</code>\nwill happen <strong>automatically to install &amp; save missing dependencies</strong> while you work!</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">$ npm <span class="token function">install</span> --save-dev npm-install-webpack-plugin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>在 <code>webpack.config.js</code> 中：</p>\n<pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">NpmInstallPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre>\n<p><strong>相当于</strong>：</p>\n<pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">NpmInstallPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// 使用 --save 或者 --save-dev</span>\n    dev<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token comment">// 安装缺少的 peerDependencies</span>\n    peerDependencies<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// 减少控制台日志记录的数量</span>\n    quiet<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token comment">// npm command used inside company, yarn is not supported yet</span>\n    npm<span class="token punctuation">:</span> <span class="token string">\'tnpm\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre>\n<p>可以提供一个 <code>Function</code> 来动态设置 <code>dev</code>：</p>\n<pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">NpmInstallPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    dev<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">[</span>\n        <span class="token string">"babel-preset-react-hmre"</span><span class="token punctuation">,</span>\n        <span class="token string">"webpack-dev-middleware"</span><span class="token punctuation">,</span>\n        <span class="token string">"webpack-hot-middleware"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#demo" id="demo"></a><span class="text">Demo</span><a class="icon-link" href="#demo"></a></h2>\n<p><img src="https://cloud.githubusercontent.com/assets/15182/12540538/6a4e8f1a-c2d0-11e5-97ee-4ddaf6892645.gif" alt="npm-install-webpack-plugin demo"></p>\n<h2 class="header"><a class="anchor" href="#features" id="features"></a><span class="text">Features</span><a class="icon-link" href="#features"></a></h2>\n<ul>\n<li>[x] Works with both Webpack <code>^v1.12.0</code> and <code>^2.1.0-beta.0</code>.</li>\n<li>[x] Auto-installs <code>.babelrc</code> plugins &amp; presets.</li>\n<li>[x] Supports both ES5 &amp; ES6 Modules.\n(e.g. <code>require</code>, <code>import</code>)</li>\n<li>[x] Supports Namespaced packages.\n(e.g. <code>@cycle/dom</code>)</li>\n<li>[x] Supports Dot-delimited packages.\n(e.g. <code>lodash.capitalize</code>)</li>\n<li>[x] Supports CSS imports.\n(e.g. <code>@import &quot;~bootstrap&quot;</code>)</li>\n<li>[x] Supports Webpack loaders.\n(e.g. <code>babel-loader</code>, <code>file-loader</code>, etc.)</li>\n<li>[x] Supports inline Webpack loaders.\n(e.g. <code>require(&quot;bundle?lazy!./App&quot;</code>)</li>\n<li>[x] Auto-installs missing <code>peerDependencies</code>.\n(e.g. <code>@cycle/core</code> will automatically install <code>rx@*</code>)</li>\n<li>[x] Supports Webpack&#39;s <code>resolve.alias</code> &amp; <code>resolve.root</code> configuration.\n(e.g. <code>require(&quot;react&quot;)</code> can alias to <code>react-lite</code>)</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/15182?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/ericclemmons"></p>\n<p>Eric Clemmons</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/226692?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/insin"></p>\n<p>Jonny Buchanan</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/npm-install-webpack-plugin/">https://webpack.js.org/plugins/npm-install-webpack-plugin/</a></p>\n</blockquote>\n',title:"NpmInstallWebpackPlugin"},title:"NpmInstallWebpackPlugin",url:"/plugins/npm-install-webpack-plugin/"},{file:{attributes:{title:"PrefetchPlugin",contributors:["skipjack"],group:"-",anchors:[{title:"选项",id:"-"}],related:[]},body:'<p>预取出普通的模块请求(module request)，可以让这些模块在他们被 <code>import</code> 或者是 <code>require</code> 之前就解析并且编译。使用这个预取插件可以提升性能。可以多试试在编译前记录时间(profile)来决定最佳的预取的节点。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>PrefetchPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>context<span class="token punctuation">]</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n<ul>\n<li><code>context</code>：文件夹的绝对路径</li>\n<li><code>request</code>：普通模块的 request 字符串</li>\n</ul>\n',title:"PrefetchPlugin"},title:"PrefetchPlugin",url:"/plugins/prefetch-plugin/"},{file:{attributes:{title:"ProvidePlugin",contributors:["re-fort","simon04","sokra"],group:"-",anchors:[{title:"使用：jQuery",id:"-jquery"},{title:"使用：jQuery 和 Angular 1",id:"-jquery-angular-1"},{title:"使用：Lodash Map",id:"-lodash-map"},{title:"使用：Vue.js",id:"-vue-js"}],related:[]},body:'<p>自动加载模块，而不必到处 <code>import</code> 或 <code>require</code> 。</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  identifier<span class="token punctuation">:</span> <span class="token string">\'module1\'</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>or</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  identifier<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'module1\'</span><span class="token punctuation">,</span> <span class="token string">\'property1\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>任何时候，当 <code>identifier</code> 被当作未赋值的变量时，<code>module</code> 就会自动被加载，并且 <code>identifier</code> 会被这个 <code>module</code> 输出的内容所赋值。（模块的 <code>property</code> 用于支持命名导出(named export)）。</p>\n<blockquote class="warning"><div class="tip-content"> 对于 ES2015 模块的 default export，你必须指定模块的 default 属性。 </div></blockquote><h2 class="header"><a class="anchor" href="#-jquery" id="-jquery"></a><span class="text">使用：jQuery</span><a class="icon-link" href="#-jquery"></a></h2>\n<p>要自动加载 <code>jquery</code>，我们可以将两个变量都指向对应的 node 模块：</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  $<span class="token punctuation">:</span> <span class="token string">\'jquery\'</span><span class="token punctuation">,</span>\n  jQuery<span class="token punctuation">:</span> <span class="token string">\'jquery\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>然后在我们任意源码中：</p>\n<pre><code class="lang-javascript"><span class="token comment">// in a module</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">\'#item\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;= 起作用</span>\n<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">\'#item\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;= 起作用</span>\n<span class="token comment">// $ 自动被设置为 "jquery" 输出的内容</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-jquery-angular-1" id="-jquery-angular-1"></a><span class="text">使用：jQuery 和 Angular 1</span><a class="icon-link" href="#-jquery-angular-1"></a></h2>\n<p>Angular 会寻找 <code>window.jQuery</code> 来决定 jQuery 是否存在, 查看<a href="https://github.com/angular/angular.js/blob/v1.5.9/src/Angular.js#L1821-L1823">源码</a>。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">\'window.jQuery\'</span><span class="token punctuation">:</span> <span class="token string">\'jquery\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-lodash-map" id="-lodash-map"></a><span class="text">使用：Lodash Map</span><a class="icon-link" href="#-lodash-map"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  _map<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'lodash\'</span><span class="token punctuation">,</span> <span class="token string">\'map\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-vue-js" id="-vue-js"></a><span class="text">使用：Vue.js</span><a class="icon-link" href="#-vue-js"></a></h3>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  Vue<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'vue/dist/vue.esm.js\'</span><span class="token punctuation">,</span> <span class="token string">\'default\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/provide-plugin/">https://webpack.js.org/plugins/provide-plugin/</a></p>\n</blockquote>\n',title:"ProvidePlugin"},title:"ProvidePlugin",url:"/plugins/provide-plugin/"},{file:{attributes:{title:"SourceMapDevToolPlugin",contributors:["johnnyreilly","simon04"],related:[{title:"Building Source Maps",url:"https://survivejs.com/webpack/building/source-maps/#-sourcemapdevtoolplugin-and-evalsourcemapdevtoolplugin-"}],group:"-",anchors:[{title:"选项",id:"-"},{title:"用法",id:"-"},{title:"排除 Vendor 的 Map 文件",id:"-vendor-map-"},{title:"Host Source Maps Externally",id:"host-source-maps-externally"}]},body:'<p>This plugin enables more fine grained control of source map generation. It is an alternative to the <a href="/configuration/devtool/"><code>devtool</code></a> configuration option.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>SourceMapDevToolPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n<p>支持以下选项：</p>\n<ul>\n<li><code>test</code> (<code>string|regex|array</code>): Include source maps for modules based on their extension (defaults to <code>.js</code> and <code>.css</code>).</li>\n<li><code>include</code> (<code>string|regex|array</code>): Include source maps for module paths that match the given value.</li>\n<li><code>exclude</code> (<code>string|regex|array</code>): Exclude modules that match the given value from source map generation.</li>\n<li><code>filename</code> (<code>string</code>): Defines the output filename of the SourceMap (will be inlined if no value is provided).</li>\n<li><code>append</code> (<code>string</code>): Appends the given value to the original asset. Usually the <code>#sourceMappingURL</code> comment. <code>[url]</code> is replaced with a URL to the source map file. <code>false</code> disables the appending.</li>\n<li><code>moduleFilenameTemplate</code> (<code>string</code>): See <a href="/configuration/output/#output-devtoolmodulefilenametemplate"><code>output.devtoolModuleFilenameTemplate</code></a>.</li>\n<li><code>fallbackModuleFilenameTemplate</code> (<code>string</code>): See link above.</li>\n<li><code>module</code> (<code>boolean</code>): Indicates whether loaders should generate source maps (defaults to <code>true</code>).</li>\n<li><code>columns</code> (<code>boolean</code>): Indicates whether column mappings should be used (defaults to <code>true</code>).</li>\n<li><code>lineToLine</code> (<code>object</code>): Simplify and speed up source mapping by using line to line source mappings for matched modules.</li>\n<li><code>publicPath</code> (<code>string</code>): Emits absolute URLs with public path prefix, e.g. <code>https://example.com/project/</code>.</li>\n<li><code>fileContext</code> (<code>string</code>): Makes the <code>[file]</code> argument relative to this directory.</li>\n</ul>\n<p>The <code>lineToLine</code> object allows for the same <code>test</code>, <code>include</code>, and <code>exclude</code> options described above.</p>\n<p>The <code>fileContext</code> option is useful when you want to store source maps in an upper level directory to avoid <code>../../</code> appearing in the absolute <code>[url]</code>.</p>\n<blockquote class="tip"><div class="tip-content"> Setting <code>module</code> and/or <code>columns</code> to <code>false</code> will yield less accurate source maps but will also improve compilation performance significantly. </div></blockquote><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>The following examples demonstrate some common use cases for this plugin.</p>\n<h3 class="header"><a class="anchor" href="#-vendor-map-" id="-vendor-map-"></a><span class="text">排除 Vendor 的 Map 文件</span><a class="icon-link" href="#-vendor-map-"></a></h3>\n<p>以下代码将排除 <code>vendor.js</code> bundle 中任何模块的 source map：</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>SourceMapDevToolPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  filename<span class="token punctuation">:</span> <span class="token string">\'[name].js.map\'</span><span class="token punctuation">,</span>\n  exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'vendor.js\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#host-source-maps-externally" id="host-source-maps-externally"></a><span class="text">Host Source Maps Externally</span><a class="icon-link" href="#host-source-maps-externally"></a></h3>\n<p>Set a URL for source maps. Useful for hosting them on a host that requires authorization.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>SourceMapDevToolPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  append<span class="token punctuation">:</span> "\\n<span class="token comment">//# sourceMappingURL=http://example.com/sourcemap/[url]",</span>\n  filename<span class="token punctuation">:</span> <span class="token string">\'[name].map\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>And for cases when source maps are stored in the upper level directory:</p>\n<pre><code class="lang-js">project\n<span class="token operator">|</span><span class="token operator">-</span> dist\n  <span class="token operator">|</span><span class="token operator">-</span> <span class="token keyword">public</span>\n    <span class="token operator">|</span><span class="token operator">-</span> bundle<span class="token operator">-</span><span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token punctuation">.</span>js\n  <span class="token operator">|</span><span class="token operator">-</span> sourcemaps\n    <span class="token operator">|</span><span class="token operator">-</span> bundle<span class="token operator">-</span><span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token punctuation">.</span>js<span class="token punctuation">.</span>map\n</code></pre>\n<p>With next config:</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>SourceMapDevToolPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  filename<span class="token punctuation">:</span> <span class="token string">"sourcemaps/[file].map"</span><span class="token punctuation">,</span>\n  publicPath<span class="token punctuation">:</span> <span class="token string">"https://example.com/project/"</span><span class="token punctuation">,</span>\n  fileContext<span class="token punctuation">:</span> <span class="token string">"public"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Will produce the following URL:</p>\n<pre><code class="lang-js">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>project<span class="token operator">/</span>sourcemaps<span class="token operator">/</span>bundle<span class="token operator">-</span><span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token punctuation">.</span>js<span class="token punctuation">.</span>map`\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/source-map-dev-tool-plugin/">https://webpack.js.org/plugins/source-map-dev-tool-plugin/</a></p>\n</blockquote>\n',title:"SourceMapDevToolPlugin"},title:"SourceMapDevToolPlugin",url:"/plugins/source-map-dev-tool-plugin/"},{file:{attributes:{title:"UglifyjsWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/uglifyjs-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/uglifyjs-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/uglifyjs-webpack-plugin",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"选项",id:"-"},{title:"include",id:"include"},{title:"exclude",id:"exclude"},{title:"cache",id:"cache"},{title:"{Boolean}",id:"-boolean-"},{title:"{String}",id:"-string-"},{title:"parallel",id:"parallel"},{title:"{Boolean}",id:"-boolean-"},{title:"{Number}",id:"-number-"},{title:"sourceMap",id:"sourcemap"},{title:"uglifyOptions",id:"uglifyoptions"},{title:"extractComments",id:"extractcomments"},{title:"{Boolean}",id:"-boolean-"},{title:"{RegExp|String} or  {Function {Boolean}>}",id:"-regexp-string-or-function-boolean-"},{title:"{Object}",id:"-object-"},{title:"warningsFilter",id:"warningsfilter"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>This plugin uses <a href="https://github.com/mishoo/UglifyJS2/tree/harmony">UglifyJS v3 </a><a href="https://npmjs.com/package/uglify-es">(<code>uglify-es</code>)</a> to minify your JavaScript</p>\n<blockquote>\n<p>ℹ️  <code>webpack =&lt; v3.0.0</code> currently contains <a href="https://github.com/webpack-contrib/uglifyjs-webpack-plugin/tree/version-0.4"><code>v0.4.6</code></a> of this plugin under <code>webpack.optimize.UglifyJsPlugin</code> as an alias. For usage of the latest version (<code>v1.0.0</code>), please follow the instructions below. Aliasing <code>v1.0.0</code> as <code>webpack.optimize.UglifyJsPlugin</code> is scheduled for <code>webpack v4.0.0</code></p>\n</blockquote>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i -D uglifyjs-webpack-plugin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'uglifyjs-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">属性名称</div><div class="table-th">类型</div><div class="table-th">默认值</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        属性名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>test</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{RegExp|Array&lt;RegExp&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>/.js($&#124;\\?)/i</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        测试匹配的文件\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        属性名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>include</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{RegExp|Array&lt;RegExp&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        <code>包含</code>的文件\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        属性名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>exclude</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{RegExp|Array&lt;RegExp&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        <code>排除</code>的文件。\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        属性名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>cache</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        启用文件缓存\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        属性名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>parallel</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        使用多进程并行运行和文件缓存来提高构建速度\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        属性名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>sourceMap</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        使用 source map 将错误信息的位置映射到模块（这会减慢编译的速度） ⚠️ <strong><code>cheap-source-map</code> 选项不适用于此插件</strong>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        属性名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>uglifyOptions</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/webpack-contrib/uglifyjs-webpack-plugin/tree/master#uglifyoptions"><code>{...defaults}</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        <code>uglify</code> <a href="https://github.com/mishoo/UglifyJS2/tree/harmony#minify-options">选项</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        属性名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>extractComments</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|RegExp|Function&lt;(node, comment) -&gt; {Boolean|Object}&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        是否将注释提取到单独的文件，（查看<a href="https://github.com/webpack/webpack/commit/71933e979e51c533b432658d5e37917f9e71595a(`webpack &gt;= 2.3.0`">详细</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        属性名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>warningsFilter</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Function(source) -&gt; {Boolean}}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>() =&gt; true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        允许过滤 uglify 警告\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.js($|\\?)/i</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#include" id="include"></a><span class="text"><code>include</code></span><a class="icon-link" href="#include"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    include<span class="token punctuation">:</span> <span class="token regex">/\\/includes/</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#exclude" id="exclude"></a><span class="text"><code>exclude</code></span><a class="icon-link" href="#exclude"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    exclude<span class="token punctuation">:</span> <span class="token regex">/\\/excludes/</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#cache" id="cache"></a><span class="text"><code>cache</code></span><a class="icon-link" href="#cache"></a></h3>\n<h4 class="header"><a class="anchor" href="#-boolean-" id="-boolean-"></a><span class="text"><code>{Boolean}</code></span><a class="icon-link" href="#-boolean-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    cache<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>Enable file caching.\nDefault path to cache directory: <code>node_modules/.cache/uglifyjs-webpack-plugin</code>.</p>\n<h4 class="header"><a class="anchor" href="#-string-" id="-string-"></a><span class="text"><code>{String}</code></span><a class="icon-link" href="#-string-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    cache<span class="token punctuation">:</span> <span class="token string">\'path/to/cache\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>Path to cache directory.</p>\n<h3 class="header"><a class="anchor" href="#parallel" id="parallel"></a><span class="text"><code>parallel</code></span><a class="icon-link" href="#parallel"></a></h3>\n<h4 class="header"><a class="anchor" href="#-boolean-" id="-boolean-"></a><span class="text"><code>{Boolean}</code></span><a class="icon-link" href="#-boolean-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    parallel<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>Enable parallelization.\nDefault number of concurrent runs: <code>os.cpus().length - 1</code>.</p>\n<h4 class="header"><a class="anchor" href="#-number-" id="-number-"></a><span class="text"><code>{Number}</code></span><a class="icon-link" href="#-number-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    parallel<span class="token punctuation">:</span> <span class="token number">4</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>Number of concurrent runs.</p>\n<blockquote>\n<p>ℹ️  Parallelization can speedup your build significantly and is therefore <strong>highly recommended</strong></p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#sourcemap" id="sourcemap"></a><span class="text"><code>sourceMap</code></span><a class="icon-link" href="#sourcemap"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<blockquote>\n<p>⚠️ <strong><code>cheap-source-map</code> options don&#39;t work with this plugin</strong></p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#uglifyoptions" id="uglifyoptions"></a><span class="text"><a href="https://github.com/mishoo/UglifyJS2/tree/harmony#minify-options"><code>uglifyOptions</code></a></span><a class="icon-link" href="#uglifyoptions"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>ie8</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable IE8 Support\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>ecma</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Supported ECMAScript Version (<code>5</code>, <code>6</code>, <code>7</code> or <code>8</code>). Affects <code>parse</code>, <code>compress</code> &amp;&amp; <code>output</code> options\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="https://github.com/mishoo/UglifyJS2/tree/harmony#parse-options"><code>parse</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>{}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Additional Parse Options\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="https://github.com/mishoo/UglifyJS2/tree/harmony#mangle-options"><code>mangle</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable Name Mangling (See <a href="https://github.com/mishoo/UglifyJS2/tree/harmony#mangle-properties-options">Mangle Properties</a> for advanced setups, use with ⚠️)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="https://github.com/mishoo/UglifyJS2/tree/harmony#output-options"><code>output</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>{}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Additional Output Options (The defaults are optimized for best compression)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="https://github.com/mishoo/UglifyJS2/tree/harmony#compress-options"><code>compress</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Additional Compress Options\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>warnings</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Display Warnings\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    uglifyOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      ie8<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      ecma<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n      parse<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">}</span><span class="token punctuation">,</span>\n      mangle<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span>\n        properties<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          <span class="token comment">// mangle property options</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        comments<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        beautify<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      compress<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">}</span><span class="token punctuation">,</span>\n      warnings<span class="token punctuation">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#extractcomments" id="extractcomments"></a><span class="text"><code>extractComments</code></span><a class="icon-link" href="#extractcomments"></a></h3>\n<h4 class="header"><a class="anchor" href="#-boolean-" id="-boolean-"></a><span class="text"><code>{Boolean}</code></span><a class="icon-link" href="#-boolean-"></a></h4>\n<p>All comments that normally would be preserved by the <code>comments</code> option will be moved to a separate file. If the original file is named <code>foo.js</code>, then the comments will be stored to <code>foo.js.LICENSE</code>.</p>\n<h4 class="header"><a class="anchor" href="#-regexp-string-or-function-boolean-" id="-regexp-string-or-function-boolean-"></a><span class="text"><code>{RegExp|String}</code> or  <code>{Function&lt;(node, comment) -&gt; {Boolean}&gt;}</code></span><a class="icon-link" href="#-regexp-string-or-function-boolean-"></a></h4>\n<p>All comments that match the given expression (resp. are evaluated to <code>true</code> by the function) will be extracted to the separate file. The <code>comments</code> option specifies whether the comment will be preserved, i.e. it is possible to preserve some comments (e.g. annotations) while extracting others or even preserving comments that have been extracted.</p>\n<h4 class="header"><a class="anchor" href="#-object-" id="-object-"></a><span class="text"><code>{Object}</code></span><a class="icon-link" href="#-object-"></a></h4>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>condition</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Regex|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        ``\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        通常表达式或者相应函数（见上文）\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>filename</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>${file}.LICENSE</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        提取注释的文件会被存储。可以使一个 <code>{String}</code> 字符串或者是一个 <code>{Function&lt;(string) -&gt; {String}&gt;}</code> 返回字符串的函数，作为原文件名。默认加上文件后缀名 <code>.LICENSE</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>banner</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>/*! For license information please see ${filename}.js.LICENSE */</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        banner 文本会在原文件的头部指出被提取的文件，会在源文件加入该信息。可以是 <code>false</code>（表示没有 banner），一个 <code>{String}</code>，或者一个 <code>{Function&lt;(string) -&gt; {String}</code> 返回字符串的函数，会在提取已经被存储注释的时候被调用。注释会被覆盖。\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#warningsfilter" id="warningsfilter"></a><span class="text"><code>warningsFilter</code></span><a class="icon-link" href="#warningsfilter"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    warningsFilter<span class="token punctuation">:</span> <span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/hulkish"></p>\n<p><img width="150" height="150" src="https://github.com/hulkish.png?size=150"></p>\n<p></br></p>\n<pre><code>      Steven Hargrove\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/uglifyjs-webpack-plugin/">https://webpack.js.org/plugins/uglifyjs-webpack-plugin/</a></p>\n</blockquote>\n',title:"UglifyjsWebpackPlugin"},title:"UglifyjsWebpackPlugin",url:"/plugins/uglifyjs-webpack-plugin/"},{file:{attributes:{title:"WatchIgnorePlugin",contributors:["skipjack"],group:"-",anchors:[{title:"选项",id:"-"}],related:[]},body:'<p>无视指定的文件。换句话说，当处于<a href="/configuration/watch">监视模式(watch mode)</a>下，符合给定地址的文件或者满足给定正则表达式的文件的改动不会触发重编译。</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>WatchIgnorePlugin</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n<ul>\n<li><code>路径(paths)</code> (array)：一个正则表达式或者绝对路径的数组。表示符合条件的文件将不会被监视</li>\n</ul>\n',title:"WatchIgnorePlugin"},title:"WatchIgnorePlugin",url:"/plugins/watch-ignore-plugin/"},{file:{attributes:{title:"I18nWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/i18n-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/i18n-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/i18n-webpack-plugin",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"配置",id:"-"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>i18n (localization) plugin for Webpack.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i -D i18n-webpack-plugin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>此插件会创建包含译文的 bundle。所以你可以将翻译后的 bundle 提供给客户端。</p>\n<p>参考 <a href="https://github.com/webpack/webpack/tree/master/examples/i18n">webpack/webpack/examples/i18n</a>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">配置</span><a class="icon-link" href="#-"></a></h2>\n<pre><code>plugins: <span class="token punctuation">[</span>\n  <span class="token punctuation">..</span>.\n  new I18nPlugin<span class="token punctuation">(</span>languageConfig, optionsObj<span class="token punctuation">)</span>\n<span class="token punctuation">]</span>,\n</code></pre><ul>\n<li><code>optionsObj.functionName</code>：默认值为 <code>__</code>, 你可以更改为其他函数名。</li>\n<li><code>optionsObj.failOnMissing</code>：默认值为 <code>false</code>，找不到映射文本(mapping text)时会给出一个警告信息，如果设置为 <code>true</code>，则会给出一个错误信息。</li>\n<li><code>optionsObj.hideMessage</code>：默认值为 <code>false</code>，将会显示警告/错误信息。如果设置为 <code>true</code>，警告/错误信息将会被隐藏。</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/plugins/i18n-webpack-plugin/">https://webpack.js.org/plugins/i18n-webpack-plugin/</a></p>\n</blockquote>\n',title:"I18nWebpackPlugin"},title:"I18nWebpackPlugin",url:"/plugins/i18n-webpack-plugin/"}]},{title:"loaders",url:"loaders",pages:[{file:{attributes:{title:"babel-loader",source:"https://raw.githubusercontent.com/babel/babel-loader/master/README.md",edit:"https://github.com/babel/babel-loader/edit/master/README.md",repo:"https://github.com/babel/babel-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"疑难解答",id:"-"},{title:"babel-loader 很慢！",id:"babel-loader-"},{title:"babel 在每个文件都插入了辅助代码，使代码体积过大！",id:"babel-"},{title:"**注意：** transform-runtime 和自定义 polyfills (比如 Promise library)",id:"-transform-runtime-polyfills-promise-library-"},{title:"babel 的 node API 已经被移到 babel-core 中。",id:"babel-node-api-babel-core-"},{title:"License",id:"license"}],contributors:[],related:[]},body:'<p>This package allows transpiling JavaScript files using <a href="https://github.com/babel/babel">Babel</a> and <a href="https://github.com/webpack/webpack">webpack</a>.</p>\n<p><strong>Notes:</strong> Issues with the output should be reported on the babel <a href="https://github.com/babel/babel/issues">issue tracker</a>.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<blockquote>\n<p>webpack 3.x | babel-loader 8.x | babel 7.x</p>\n</blockquote>\n<pre><code class="lang-bash">npm <span class="token function">install</span> babel-loader@8.0.0-beta.0 @babel/core @babel/preset-env webpack\n</code></pre>\n<blockquote>\n<p>webpack 3.x babel-loader 7.x | babel 6.x</p>\n</blockquote>\n<pre><code class="lang-bash">npm <span class="token function">install</span> babel-loader babel-core babel-preset-env webpack\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p><a href="https://webpack.js.org/loaders/">文档：使用 loader</a></p>\n<p>在 webpack 配置对象中，需要添加 babel-loader 到 module 的 loaders 列表中，像下面这样：</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n      exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules|bower_components)/</span><span class="token punctuation">,</span>\n      use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>##</p>\n<p>参考 <code>babel</code> <a href="https://babeljs.io/docs/usage/api/#options">选项</a>。</p>\n<p>你可以使用 <a href="https://webpack.js.org/configuration/module/#rule-options-rule-query">options 属性</a> 来给 loader 传递选项：</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n      exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules|bower_components)/</span><span class="token punctuation">,</span>\n      use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/plugin-transform-object-rest-spread\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>此 loader 也支持下面这些 loader 特定(loader-specific)的选项：</p>\n<ul>\n<li><p><code>cacheDirectory</code>：默认值为 <code>false</code>。当有设置时，指定的目录将用来缓存 loader 的执行结果。之后的 webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程(recompilation process)。如果设置了一个空值 (<code>loader: &#39;babel-loader?cacheDirectory&#39;</code>) 或者 <code>true</code> (<code>loader: babel-loader?cacheDirectory=true</code>)，loader 将使用默认的缓存目录 <code>node_modules/.cache/babel-loader</code>，如果在任何根目录下都没有找到 <code>node_modules</code> 目录，将会降级回退到操作系统默认的临时文件目录。</p>\n</li>\n<li><p><code>cacheIdentifier</code>：默认是一个由 babel-core 版本号，babel-loader 版本号，.babelrc 文件内容（存在的情况下），环境变量 <code>BABEL_ENV</code> 的值（没有时降级到 <code>NODE_ENV</code>）组成的字符串。可以设置为一个自定义的值，在 identifier 改变后，强制缓存失效。</p>\n</li>\n<li><p><code>forceEnv</code>：默认将解析 BABEL_ENV 然后是 NODE_ENV。允许你在 loader 级别上覆盖 BABEL_ENV/NODE_ENV。对有不同 babel 配置的，客户端和服务端同构应用非常有用。</p>\n</li>\n</ul>\n<p><strong>注意：</strong><code>sourceMap</code> 选项是被忽略的。当 webpack 配置了 sourceMap 时（通过 <code>devtool</code> 配置选项），将会自动生成 sourceMap。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">疑难解答</span><a class="icon-link" href="#-"></a></h2>\n<h3 class="header"><a class="anchor" href="#babel-loader-" id="babel-loader-"></a><span class="text">babel-loader 很慢！</span><a class="icon-link" href="#babel-loader-"></a></h3>\n<p>确保转译尽可能少的文件。你可能使用 <code>/\\.js$/</code> 来匹配，这样也许会去转译 <code>node_modules</code> 目录或者其他不需要的源代码。</p>\n<p>要排除 <code>node_modules</code>，参考文档中的 <code>loaders</code> 配置的 <code>exclude</code> 选项。</p>\n<p>你也可以通过使用 <code>cacheDirectory</code> 选项，将 babel-loader 提速至少两倍。\n这会将转译的结果缓存到文件系统中。</p>\n<h3 class="header"><a class="anchor" href="#babel-" id="babel-"></a><span class="text">babel 在每个文件都插入了辅助代码，使代码体积过大！</span><a class="icon-link" href="#babel-"></a></h3>\n<p>babel 对一些公共方法使用了非常小的辅助代码，比如 <code>_extend</code>。\n默认情况下会被添加到每一个需要它的文件中</p>\n<p>你可以引入 babel runtime 作为一个独立模块，来避免重复引入。</p>\n<p>下面的配置禁用了 babel 自动对每个文件的 runtime 注入，而是引入 <code>babel-plugin-transform-runtime</code> 并且使所有辅助代码从这里引用。</p>\n<p>更多信息请参考<a href="http://babeljs.io/docs/plugins/transform-runtime/">文档</a>。</p>\n<p><strong>注意：</strong> 你必须执行 <code>npm install babel-plugin-transform-runtime --save-dev</code> 来把它包含到你的项目中，也要使用 <code>npm install babel-runtime --save</code> 把 <code>babel-runtime</code> 安装为一个依赖。</p>\n<pre><code class="lang-javascript">rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token comment">// \'transform-runtime\' 插件告诉 babel 要引用 runtime 来代替注入。</span>\n  <span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n    exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules|bower_components)/</span><span class="token punctuation">,</span>\n    use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/transform-runtime\'</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#-transform-runtime-polyfills-promise-library-" id="-transform-runtime-polyfills-promise-library-"></a><span class="text"><strong>注意：</strong> transform-runtime 和自定义 polyfills (比如 Promise library)</span><a class="icon-link" href="#-transform-runtime-polyfills-promise-library-"></a></h4>\n<p>由于 <a href="https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-runtime">babel-plugin-transform-runtime</a> 包含了一个 polyfill，含有自定义的 <a href="https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js">regenerator runtime</a> 和 <a href="https://github.com/zloirock/core-js">core.js</a>, 下面使用 <code>webpack.ProvidePlugin</code> 来配置 shimming 的常用方法将没有作用：</p>\n<pre><code class="lang-javascript"><span class="token comment">// ...</span>\n        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token string">\'Promise\'</span><span class="token punctuation">:</span> <span class="token string">\'bluebird\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token comment">// ...</span>\n</code></pre>\n<p>下面这样的写法也没有作用：</p>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/runtime/core-js/promise\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bluebird\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">;</span>\n</code></pre>\n<p>它其实会生成下面这样 (使用了 <code>runtime</code> 后)：</p>\n<pre><code class="lang-javascript"><span class="token string">\'use strict\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> _Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/runtime/core-js/promise\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">\'default\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/runtime/core-js/promise\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">\'default\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bluebird\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">_Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>前面的 <code>Promise</code> 库在被覆盖前已经被引用和使用了。</p>\n<p>一种可行的办法是，在你的应用中加入一个“启动器(bootstrap)”步骤，在应用开始前先覆盖默认的全局变量。</p>\n<pre><code class="lang-javascript"><span class="token comment">// bootstrap.js</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/runtime/core-js/promise\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bluebird\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./app\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#babel-node-api-babel-core-" id="babel-node-api-babel-core-"></a><span class="text"><code>babel</code> 的 node API 已经被移到 <code>babel-core</code> 中。</span><a class="icon-link" href="#babel-node-api-babel-core-"></a></h3>\n<p>(原文：The node API for <code>babel</code> has been moved to <code>babel-core</code>.)</p>\n<p>如果你收到这个信息，这说明你有一个已经安装的 <code>babel</code> 包，并且在 webpack 配置中使用它来作为 loader 的简写 (这样的方式在 webpack 2.x 版本中将不再被支持)。</p>\n<pre><code class="lang-js">  <span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'babel\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>webpack 将尝试读取 <code>babel</code> 包而不是 <code>babel-loader</code>。</p>\n<p>要修复这个问题，你需要删除 <code>babel</code> npm 包，因为它在 babel v6 中已经被废除。(安装 <code>babel-cli</code> 或者 <code>babel-core</code> 来替代它)。</p>\n<p>如果你的依赖中有对 <code>babel</code> 包的依赖使你无法删除它，可以在 webpack 配置中使用完整的 loader 名称来解决：</p>\n<pre><code class="lang-js">  <span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text"><a href="http://couto.mit-license.org/">License</a></span><a class="icon-link" href="#license"></a></h2>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/babel-loader/">https://webpack.js.org/loaders/babel-loader/</a></p>\n</blockquote>\n',title:"babel-loader"},title:"babel-loader",url:"/loaders/babel-loader/"},{file:{attributes:{title:"yaml-frontmatter-loader",source:"https://raw.githubusercontent.com/webpack-contrib/yaml-frontmatter-loader/master/README.md",edit:"https://github.com/webpack-contrib/yaml-frontmatter-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/yaml-frontmatter-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"}],contributors:[],related:[]},body:'<p>YAML Frontmatter loader for <a href="https://webpack.js.org/">webpack</a>. Converts YAML in files to JSON. You should chain it with <a href="/loaders/json-loader/">json-loader</a>.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<p><code>npm install yaml-frontmatter-loader</code></p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders/">用法</a></span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-loader!yaml-frontmatter-loader!./file.md"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => 将 file.md 作为一个 javascript 对象返回</span>\n</code></pre>\n<p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n         test<span class="token punctuation">:</span> <span class="token regex">/\\.md$/</span><span class="token punctuation">,</span>\n         use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'json-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'yaml-frontmatter-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/yaml-frontmatter-loader/">https://webpack.js.org/loaders/yaml-frontmatter-loader/</a></p>\n</blockquote>\n',title:"yaml-frontmatter-loader"},title:"yaml-frontmatter-loader",url:"/loaders/yaml-frontmatter-loader/"},{file:{attributes:{title:"cache-loader",source:"https://raw.githubusercontent.com/webpack-contrib/cache-loader/master/README.md",edit:"https://github.com/webpack-contrib/cache-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/cache-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"Options",id:"options"},{title:"示例",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Caches the result of following loaders on disk (default) or in the database</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev cache-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>在一些性能开销较大的 loader 之前添加此 loader，以将结果缓存到磁盘里。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.ext$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">\'cache-loader\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>loaders\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>⚠️ 请注意，保存和读取这些缓存文件会有一些时间开销，所以请只对性能开销较大的 loader 使用此 loader。</p>\n</blockquote>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>cacheKey</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Function(options, request) -&gt; {String}}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Allows you to override default cache key generator\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>cacheDirectory</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>path.resolve(&#39;.cache-loader&#39;)</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Provide a cache directory where cache items should be stored (used for default read/write implementation)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>cacheIdentifier</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>cache-loader:{version} {process.env.NODE_ENV}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Provide an invalidation identifier which is used to generate the hashes. You can use it for extra dependencies of loaders (used for default read/write implementation)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>write</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Function(cacheKey, data, callback) -&gt; {void}}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Allows you to override default write cache data to file (e.g. Redis, memcached)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>read</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Function(cacheKey, callback) -&gt; {void}}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Allows you to override default read cache data from file\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">\'cache-loader\'</span><span class="token punctuation">,</span>\n          <span class="token string">\'babel-loader\'</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token comment">// Or different database client - memcached, mongodb, ...</span>\n<span class="token keyword">const</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'redis\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'crypto\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n<span class="token comment">// connect to client</span>\n<span class="token comment">// ...</span>\n\n<span class="token keyword">const</span> BUILD_CACHE_TIMEOUT <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">;</span> <span class="token comment">// 1 day</span>\n\n<span class="token keyword">function</span> <span class="token function">digest</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">\'md5\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">\'hex\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Generate own cache key</span>\n<span class="token keyword">function</span> <span class="token function">cacheKey</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`build:cache:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">digest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// Read data from database and parse them</span>\n<span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  client<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Key </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> not found`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// Write data to database under cacheKey</span>\n<span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  client<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'EX\'</span><span class="token punctuation">,</span> BUILD_CACHE_TIMEOUT<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'cache-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              cacheKey<span class="token punctuation">,</span>\n              read<span class="token punctuation">,</span>\n              write<span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'babel-loader\'</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/sokra"></p>\n<p><img width="150" height="150" src="https://github.com/sokra.png?size=150"></p>\n<p></br></p>\n<pre><code>      Tobias Koppers\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/cache-loader/">https://webpack.js.org/loaders/cache-loader/</a></p>\n</blockquote>\n',title:"cache-loader"},title:"cache-loader",url:"/loaders/cache-loader/"},{file:{attributes:{title:"coffee-loader",source:"https://raw.githubusercontent.com/webpack-contrib/coffee-loader/master/README.md",edit:"https://github.com/webpack-contrib/coffee-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/coffee-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"Options",id:"options"},{title:"Literate",id:"literate"},{title:"Sourcemaps",id:"sourcemaps"},{title:"Transpile",id:"transpile"},{title:"Maintainer",id:"maintainer"}],contributors:[],related:[]},body:'<p>Loads <a href="http://coffeescript.org/">CoffeeScript</a> like JavaScript</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev coffee-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">import</span> coffee <span class="token keyword">from</span> <span class="token string">\'coffee-loader!./file.coffee\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p>##</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> coffee <span class="token keyword">from</span> <span class="token string">\'file.coffee\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.coffee$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'coffee-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>literate</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable CoffeeScript in Markdown (Code Blocks) e.g <code>file.coffee.md</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>sourceMap</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable/Disable Sourcemaps\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>transpile</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Provide Babel presets and plugins\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#literate" id="literate"></a><span class="text"><a href="http://coffeescript.org/#literate"><code>Literate</code></a></span><a class="icon-link" href="#literate"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.coffee.md$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'coffee-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span> literate<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#sourcemaps" id="sourcemaps"></a><span class="text"><code>Sourcemaps</code></span><a class="icon-link" href="#sourcemaps"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.coffee$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'coffee-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#transpile" id="transpile"></a><span class="text"><a href="http://coffeescript.org/#transpilation"><code>Transpile</code></a></span><a class="icon-link" href="#transpile"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.coffee$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'coffee-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              transpile<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'env\'</span><span class="token punctuation">]</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainer" id="maintainer"></a><span class="text">Maintainer</span><a class="icon-link" href="#maintainer"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/coffee-loader/">https://webpack.js.org/loaders/coffee-loader/</a></p>\n</blockquote>\n',title:"coffee-loader"},title:"coffee-loader",url:"/loaders/coffee-loader/"},{file:{attributes:{title:"coffee-redux-loader",source:"https://raw.githubusercontent.com/webpack-contrib/coffee-redux-loader/master/README.md",edit:"https://github.com/webpack-contrib/coffee-redux-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/coffee-redux-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Coffee Script Redux loader for Webpack.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i -D coffee-redux-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> exportsOfFile <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"coffee-redux-loader!./file.coffee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => return exports of executed and compiled file.coffee</span>\n</code></pre>\n<p>如果你想要在 node 运行环境中使用，不要忘了 polyfill <code>require</code>。\n请查看 <code>webpack</code> 文档。</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/coffee-redux-loader/">https://webpack.js.org/loaders/coffee-redux-loader/</a></p>\n</blockquote>\n',title:"coffee-redux-loader"},title:"coffee-redux-loader",url:"/loaders/coffee-redux-loader/"},{file:{attributes:{title:"coverjs-loader",source:"https://raw.githubusercontent.com/webpack-contrib/coverjs-loader/master/README.md",edit:"https://github.com/webpack-contrib/coverjs-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/coverjs-loader",group:"-",anchors:[{title:"用法",id:"-"},{title:"License",id:"license"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-javascript">webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token string">"mocha!./cover-my-client-tests.js"</span> <span class="token operator">--</span>options webpackOptions<span class="token punctuation">.</span>js\n</code></pre>\n<pre><code class="lang-javascript"><span class="token comment">// webpackOptions.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 你的 webpack options</span>\n    output<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>\n    publicPrefix<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>\n    debug<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    includeFilenames<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    watch<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// 绑定 coverjs loader</span>\n    postLoaders<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// 所有文件</span>\n        exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token string">"node_modules.chai"</span><span class="token punctuation">,</span>\n            <span class="token string">"node_modules.coverjs-loader"</span><span class="token punctuation">,</span>\n            <span class="token string">"node_modules.webpack.buildin"</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"coverjs-loader"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-javascript"><span class="token comment">// cover-my-client-tests.js</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./my-client-tests"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">after</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cover-loader"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reportHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>参考示例 <a href="https://github.com/webpack/the-big-test">the-big-test</a>。</p>\n<p>这是一个独立的 loader，你不必一定把它和 mocha loader 结合一起使用。如果你想 cover 一个普通的项目，也可以直接使用它。<code>reportHtml</code> 方法会把输出内容添加到 body 中。</p>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">License</span><a class="icon-link" href="#license"></a></h2>\n<p>MIT (<a href="http://www.opensource.org/licenses/mit-license.php">http://www.opensource.org/licenses/mit-license.php</a>)</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/coverjs-loader/">https://webpack.js.org/loaders/coverjs-loader/</a></p>\n</blockquote>\n',title:"coverjs-loader"},title:"coverjs-loader",url:"/loaders/coverjs-loader/"},{file:{attributes:{title:"css-loader",source:"https://raw.githubusercontent.com/webpack-contrib/css-loader/master/README.md",edit:"https://github.com/webpack-contrib/css-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/css-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"选项",id:"-"},{title:"root",id:"root"},{title:"url",id:"url"},{title:"alias",id:"alias"},{title:"import",id:"import"},{title:"modules",id:"modules"},{title:"Scope",id:"scope"},{title:"Composing",id:"composing"},{title:"Importing",id:"importing"},{title:"minimize",id:"minimize"},{title:"sourceMap",id:"sourcemap"},{title:"camelCase",id:"camelcase"},{title:"importLoaders",id:"importloaders"},{title:"示例",id:"-"},{title:"资源",id:"-"},{title:"提取",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev css-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p><code>css-loader</code> 解释(interpret) <code>@import</code> 和 <code>url()</code> ，会 <code>import/require()</code> 后再解析(resolve)它们。</p>\n<p>引用资源的合适 loader 是 <a href="/loaders/file-loader/">file-loader</a>和 <a href="/loaders/url-loader/">url-loader</a>，你应该在配置中指定（查看<a href="https://github.com/webpack-contrib/css-loader#assets">如下设置</a>）。</p>\n<p><strong>file.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> css <span class="token keyword">from</span> <span class="token string">\'file.css\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>##</p>\n<p>你也可以直接将 css-loader 的结果作为字符串使用，例如 Angular 的组件样式。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n   test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n   use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n     <span class="token string">\'to-string-loader\'</span><span class="token punctuation">,</span>\n     <span class="token string">\'css-loader\'</span>\n   <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>或者</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./test.css\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {String}</span>\n</code></pre>\n<p>如果有 SourceMap，它们也将包含在字符串结果中。</p>\n<p>如果由于某种原因，你需要将 CSS 提取为纯粹的字符串资源（即不包含在 JS 模块中），则可能需要查看 <a href="https://github.com/peerigon/extract-loader">extract-loader</a>。\n例如，当你需要将 CSS 作为字符串进行后处理时，这很有用。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n   test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n   use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n     <span class="token string">\'handlebars-loader\'</span><span class="token punctuation">,</span> <span class="token comment">// handlebars loader expects raw resource string</span>\n     <span class="token string">\'extract-loader\'</span><span class="token punctuation">,</span>\n     <span class="token string">\'css-loader\'</span>\n   <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">名称</div><div class="table-th">类型</div><div class="table-th">默认值</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#root"><code>root</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>/</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        解析 URL 的路径，以 <code>/</code> 开头的 URL 不会被转译\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#url"><code>url</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        启用/禁用 <code>url()</code> 处理\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#alias"><code>alias</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>{}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        创建别名更容易导入一些模块\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#import"><code>import</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        启用/禁用 @import 处理\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#modules"><code>modules</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        启用/禁用 CSS 模块\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#minimize"><code>minimize</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        启用/禁用 压缩\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#sourcemap"><code>sourceMap</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        启用/禁用 Sourcemap\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#camelcase"><code>camelCase</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        以驼峰化式命名导出类名\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#importloaders"><code>importLoaders</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>0</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        在 css-loader 前应用的 loader 的数量\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>localIdentName</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>[hash:base64]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        配置生成的标识符(ident)\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#root" id="root"></a><span class="text"><code>root</code></span><a class="icon-link" href="#root"></a></h3>\n<p>对于以 <code>/</code> 开头的 URL，默认行为是不转译它们。</p>\n<p><code>url(/image.png) =&gt; url(/image.png)</code></p>\n<p>如果设置了 <code>root</code> 查询参数，那么此查询参数将被添加到 URL 前面，然后再进行转译。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> root<span class="token punctuation">:</span> <span class="token string">\'.\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>url(/image.png)</code> =&gt; <code>require(&#39;./image.png&#39;)</code></p>\n<p>不建议使用&#39;相对根路径&#39;的 url。你应该只将其用于旧版 CSS 文件。</p>\n<h3 class="header"><a class="anchor" href="#url" id="url"></a><span class="text"><code>url</code></span><a class="icon-link" href="#url"></a></h3>\n<p>要禁用 <code>css-loader</code> 解析 <code>url()</code>，将选项设置为 <code>false</code>。</p>\n<p>与现有的 css 文件兼容（如果不是在 CSS 模块模式下）。</p>\n<pre><code>url<span class="token punctuation">(</span>image.png<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> require<span class="token punctuation">(</span><span class="token string">\'./image.png\'</span><span class="token punctuation">)</span>\nurl<span class="token punctuation">(</span>~module/image.png<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> require<span class="token punctuation">(</span><span class="token string">\'module/image.png\'</span><span class="token punctuation">)</span>\n</code></pre><h3 class="header"><a class="anchor" href="#alias" id="alias"></a><span class="text"><code>alias</code></span><a class="icon-link" href="#alias"></a></h3>\n<p>用别名重写你的 URL，在难以改变输入文件的url 路径时，这会很有帮助，例如，当你使用另一个包(package)（如 bootstrap, ratchet, font-awesome 等）中一些 css/sass 文件。</p>\n<p><code>css-loader</code> 的别名，遵循与webpack 的 <code>resolve.alias</code> 相同的语法，你可以在<a href="https://webpack.js.org/configuration/resolve/#resolve-alias">resolve 文档</a> 查看细节</p>\n<p><strong>file.scss</strong></p>\n<pre><code class="lang-css"><span class="token atrule"><span class="token rule">@charset</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"bootstrap"</span><span class="token punctuation">;</span></span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          <span class="token string">"../fonts/bootstrap"</span><span class="token punctuation">:</span> <span class="token string">"bootstrap-sass/assets/fonts/bootstrap"</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        includePaths<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./node_modules/bootstrap-sass/assets/stylesheets"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>查看此示例 <a href="https://github.com/bbtfr/webpack2-bootstrap-sass-sample">working bootstrap example</a>。</p>\n<h3 class="header"><a class="anchor" href="#import" id="import"></a><span class="text"><code>import</code></span><a class="icon-link" href="#import"></a></h3>\n<p>要禁用 <code>css-loader</code> 解析 <code>@import</code>，将选项设置为<code>false</code></p>\n<pre><code class="lang-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url">url(\'https://fonts.googleapis.com/css?family=Roboto\')</span><span class="token punctuation">;</span></span>\n</code></pre>\n<blockquote>\n<p><em>⚠️ 谨慎使用，因为这将禁用解析<strong>所有</strong> <code>@import</code>，包括 css 模块 <code>composes: xxx from &#39;path/to/file.css&#39;</code> 功能。</em></p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#modules" id="modules"></a><span class="text"><a href="https://github.com/css-modules/css-modules"><code>modules</code></a></span><a class="icon-link" href="#modules"></a></h3>\n<p>查询参数 <code>modules</code> 会启用 <strong>CSS 模块</strong>规范。</p>\n<p>默认情况下，这将启用局部作用域 CSS。（你可以使用 <code>:global(...)</code> 或 <code>:global</code> 关闭选择器 and/or 规则。</p>\n<h4 class="header"><a class="anchor" href="#scope" id="scope"></a><span class="text"><code>Scope</code></span><a class="icon-link" href="#scope"></a></h4>\n<p>默认情况下，CSS 将所有的类名暴露到全局的选择器作用域中。样式可以在局部作用域中，避免全局作用域的样式。</p>\n<p>语法 <code>:local(.className)</code> 可以被用来在局部作用域中声明 <code>className</code>。局部的作用域标识符会以模块形式暴露出去。</p>\n<p>使用 <code>:local</code>（无括号）可以为此选择器启用局部模式。<code>:global(.className)</code> 可以用来声明一个明确的全局选择器。使用<code>:global</code>（无括号）可以将此选择器切换至全局模式。</p>\n<p>loader 会用唯一的标识符(identifier)来替换局部选择器。所选择的唯一标识符以模块形式暴露出去。</p>\n<pre><code class="lang-css"><span class="token selector"><span class="token pseudo-class">:local(.className)</span> </span><span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token pseudo-class">:local</span> <span class="token class">.className</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token pseudo-class">:local(.className .subClass)</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token pseudo-class">:local</span> <span class="token class">.className</span> <span class="token class">.subClass</span> <span class="token pseudo-class">:global(.global-class-name)</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-css"><span class="token selector"><span class="token class">._23_aKvs-b8bW2Vg3fwHozO</span> </span><span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">._23_aKvs-b8bW2Vg3fwHozO</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token class">._13LGdX8RMStbBE9w-t0gZ1</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token class">._13LGdX8RMStbBE9w-t0gZ1</span> <span class="token class">.global-class-name</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>:主要信息: 标识符被导出</p>\n</blockquote>\n<pre><code class="lang-js">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">{</span>\n  className<span class="token punctuation">:</span> <span class="token string">\'_23_aKvs-b8bW2Vg3fwHozO\'</span><span class="token punctuation">,</span>\n  subClass<span class="token punctuation">:</span> <span class="token string">\'_13LGdX8RMStbBE9w-t0gZ1\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>建议局部选择器使用驼峰式。它们在导入 JS 模块中更容易使用。</p>\n<p><code>url()</code> 中的 URL 在块作用域 (<code>:local .abc</code>) 规则中的表现，如同请求模块。</p>\n<pre><code>file.png <span class="token operator">=</span><span class="token operator">></span> ./file.png\n~module/file.png <span class="token operator">=</span><span class="token operator">></span> module/file.png\n</code></pre><p>你可以使用 <code>:local(#someId)</code>，但不推荐这种用法。推荐使用 class 代替 id。\n你可以使用 <code>localIdentName</code> 查询参数（默认 <code>[hash:base64]</code>）来配置生成的 ident。</p>\n<p> <strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        modules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        localIdentName<span class="token punctuation">:</span> <span class="token string">\'[path][name]__[local]--[hash:base64:5]\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>你还可以通过自定义 <code>getLocalIdent</code> 函数来指定绝对路径，以根据不同的模式(schema)生成类名。这需要 <code>webpack &gt;= 2.2.1</code>（<code>options</code> 对象支持传入函数）。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    modules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    localIdentName<span class="token punctuation">:</span> <span class="token string">\'[path][name]__[local]--[hash:base64:5]\'</span><span class="token punctuation">,</span>\n    getLocalIdent<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> localIdentName<span class="token punctuation">,</span> localName<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">\'whatever_random_class_name\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>:重要信息: 对于使用 extract-text-webpack-plugin 预渲染，你应该<strong>在预渲染 bundle 中</strong> 使用 <code>css-loader/locals</code> 而不是 <code>style-loader!css-loader</code> 。它不会嵌入 CSS，但只导出标识符映射(identifier map)。</p>\n</blockquote>\n<h4 class="header"><a class="anchor" href="#composing" id="composing"></a><span class="text"><code>Composing</code></span><a class="icon-link" href="#composing"></a></h4>\n<p>当声明一个局部类名时，你可以与另一个局部类名组合为一个局部类。</p>\n<pre><code class="lang-css"><span class="token selector"><span class="token pseudo-class">:local(.className)</span> </span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector"><span class="token pseudo-class">:local(.subClass)</span> </span><span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> className<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这不会导致 CSS 本身的任何更改，而是导出多个类名。</p>\n<pre><code class="lang-js">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">{</span>\n  className<span class="token punctuation">:</span> <span class="token string">\'_23_aKvs-b8bW2Vg3fwHozO\'</span><span class="token punctuation">,</span>\n  subClass<span class="token punctuation">:</span> <span class="token string">\'_13LGdX8RMStbBE9w-t0gZ1 _23_aKvs-b8bW2Vg3fwHozO\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-css"><span class="token selector"><span class="token class">._23_aKvs-b8bW2Vg3fwHozO</span> </span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector"><span class="token class">._13LGdX8RMStbBE9w-t0gZ1</span> </span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#importing" id="importing"></a><span class="text"><code>Importing</code></span><a class="icon-link" href="#importing"></a></h4>\n<p>从其他模块导入局部类名。</p>\n<pre><code class="lang-css"><span class="token selector"><span class="token pseudo-class">:local(.continueButton)</span> </span><span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> button from <span class="token string">\'library/button.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-css"><span class="token selector"><span class="token pseudo-class">:local(.nameEdit)</span> </span><span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> edit highlight from <span class="token string">\'./edit.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>要从多个模块导入，请使用多个 <code>composes:</code> 规则。</p>\n<pre><code class="lang-css"><span class="token selector"><span class="token pseudo-class">:local(.className)</span> </span><span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> edit hightlight from <span class="token string">\'./edit.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> button from <span class="token string">\'module/button.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> classFromThisModule<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#minimize" id="minimize"></a><span class="text"><code>minimize</code></span><a class="icon-link" href="#minimize"></a></h3>\n<p>默认情况下，如果模块系统指定，css-loader 将压缩 css。</p>\n<p>在某些情况下，压缩对于 css 来说是破坏性的，所以如果需要设置，可以向基于 cssnano 的 minifier(cssnano-based minifier) 提供自己的选项。更多可用信息请查看 <a href="http://cssnano.co/guides/">cssnano 文档</a>。</p>\n<p>还可以使用 <code>minimize</code> 查询参数，来禁用或强制压缩。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    minimize<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token comment">/* CSSNano Options */</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#sourcemap" id="sourcemap"></a><span class="text"><code>sourceMap</code></span><a class="icon-link" href="#sourcemap"></a></h3>\n<p>设置 <code>sourceMap</code> 选项查询参数来引入 source map。</p>\n<p>例如 extract-text-webpack-plugin 能够处理它们。</p>\n<p>默认情况下不启用它们，因为它们会导致运行时的额外开销，并增加了 bundle 大小 (JS source map 不会)。此外，相对路径是错误的，你需要使用包含服务器 URL 的绝对公用路径。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#camelcase" id="camelcase"></a><span class="text"><code>camelCase</code></span><a class="icon-link" href="#camelcase"></a></h3>\n<p>默认情况下，导出 JSON 键值对形式的类名。如果想要驼峰化(camelize)类名（有助于在 JS 中使用），通过设置 css-loader 的查询参数 <code>camelCase</code> 即可实现。</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">名称</div><div class="table-th">类型</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>true</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        类名将被骆驼化\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>&#39;dashes&#39;</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        只有类名中的破折号将被骆驼化\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>&#39;only&#39;</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        在 <code>0.27.1</code> 中加入。类名将被骆驼化，初始类名将从局部移除\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>&#39;dashesOnly&#39;</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        在 <code>0.27.1</code> 中加入。类名中的破折号将被骆驼化，初始类名将从局部移除\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p><strong>file.css</strong></p>\n<pre><code class="lang-css"><span class="token selector"><span class="token class">.class-name</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre>\n<p><strong>file.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> className <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'file.css\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    camelCase<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#importloaders" id="importloaders"></a><span class="text"><code>importLoaders</code></span><a class="icon-link" href="#importloaders"></a></h3>\n<p>查询参数 <code>importLoaders</code>，用于配置「<code>css-loader</code> 作用于 <code>@import</code> 的资源之前」有多少个 loader。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        importLoaders<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment">// 0 => 无 loader(默认); 1 => postcss-loader; 2 => postcss-loader, sass-loader</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'sass-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>在模块系统（即 webpack）支持原始 loader 匹配后，此功能可能在将来会发生变化。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">资源</span><a class="icon-link" href="#-"></a></h3>\n<p>以下 <code>webpack.config.js</code> 可以加载 CSS 文件，将小体积 PNG/JPG/GIF/SVG 图像转为像字体那样的 <a href="https://tools.ietf.org/html/rfc2397">Data URL</a> 嵌入，并复制较大的文件到输出目录。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          limit<span class="token punctuation">:</span> <span class="token number">10000</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">提取</span><a class="icon-link" href="#-"></a></h3>\n<p>对于生产环境构建，建议从 bundle 中提取 CSS，以便之后可以并行加载 CSS/JS 资源。可以通过使用 <a href="https://github.com/webpack-contrib/extract-text-webpack-plugin">extract-text-webpack-plugin</a> 来实现，在生产环境模式运行中提取 CSS。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> env <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV\n\n<span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> env <span class="token operator">===</span> <span class="token string">\'production\'</span>\n          <span class="token operator">?</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n              fallback<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n              use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">]</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> env <span class="token operator">===</span> <span class="token string">\'production\'</span>\n    <span class="token operator">?</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          filename<span class="token punctuation">:</span> <span class="token string">\'[name].css\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://github.com/SpaceK33z.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://github.com/TheLarkInn.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tr><td align="center"><p><img width="150" height="150"\n        src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/michael-ciniawsky"></p>\n<p>Michael Ciniawsky</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/evilebottnawi"></p>\n<p>Evilebot Tnawi</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://github.com/joscha.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/joscha"></p>\n<p>Joscha Feth</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/css-loader/">https://webpack.js.org/loaders/css-loader/</a></p>\n</blockquote>\n',title:"css-loader"},title:"css-loader",url:"/loaders/css-loader/"},{file:{attributes:{title:"exports-loader",source:"https://raw.githubusercontent.com/webpack-contrib/exports-loader/master/README.md",edit:"https://github.com/webpack-contrib/exports-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/exports-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Exports variables from inside the file by appending <code>exports[...] = ...</code> statements..</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i exports-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">用法</a></span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"exports-loader?file,parse=helpers.parse!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 向文件源码添加如下代码：</span>\n<span class="token comment">//  exports["file"] = file;</span>\n<span class="token comment">//  exports["parse"] = helpers.parse;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"exports-loader?file!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 向文件源码添加如下代码：</span>\n<span class="token comment">//  module.exports = file;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/exports-loader/">https://webpack.js.org/loaders/exports-loader/</a></p>\n</blockquote>\n',title:"exports-loader"},title:"exports-loader",url:"/loaders/exports-loader/"},{file:{attributes:{title:"expose-loader",source:"https://raw.githubusercontent.com/webpack-contrib/expose-loader/master/README.md",edit:"https://github.com/webpack-contrib/expose-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/expose-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>The expose loader adds modules to the global object. This is useful for debugging, or <a href="https://webpack.js.org/guides/shimming/">supporting libraries that depend on libraries in globals</a>.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i expose-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">用法</a></span><a class="icon-link" href="#-"></a></h2>\n<p><strong>注意</strong>: 模块必须在你的 bundle 中被 <code>require()</code> 过，否则他们将不会被暴露。</p>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"expose-loader?libraryName!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 通过属性名 "libraryName" 暴露 file.js 的 exports 到全局上下文。</span>\n<span class="token comment">// 在浏览器中，就将可以使用 window.libraryName 访问。</span>\n</code></pre>\n<p>例如，假设你要将 jQuery 暴露至全局并称为 <code>$</code>：</p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"expose-loader?$!jquery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>然后，<code>window.$</code> 就可以在浏览器控制台中使用。</p>\n<p>或者，你可以通过配置文件来设置：</p>\n<p>webpack v1 用法</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"jquery"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loader<span class="token punctuation">:</span> <span class="token string">"expose-loader?$"</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>webpack v2 用法</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'jquery\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'expose-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token string">\'$\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>除了暴露为 <code>window. $</code> 之外，假设你还想把它暴露为 <code>window.jQuery</code>。\n对于多个暴露，你可以在 loader 字符串中使用 <code>!</code>：</p>\n<p>webpack v1 用法</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"jquery"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loader<span class="token punctuation">:</span> <span class="token string">"expose-loader?$!expose-loader?jQuery"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>webpack v2 用法</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n          test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'jquery\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n              loader<span class="token punctuation">:</span> <span class="token string">\'expose-loader\'</span><span class="token punctuation">,</span>\n              options<span class="token punctuation">:</span> <span class="token string">\'jQuery\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n              loader<span class="token punctuation">:</span> <span class="token string">\'expose-loader\'</span><span class="token punctuation">,</span>\n              options<span class="token punctuation">:</span> <span class="token string">\'$\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><a href="https://nodejs.org/api/all.html#globals_require_resolve"><code>require.resolve</code></a> 是一个 node.js 调用（与 webpack 处理流程中的 <code>require.resolve</code> 无关）。<code>require.resolve</code> 用来获取模块的绝对路径（<code>&quot;/.../app/node_modules/react/react.js&quot;</code>）。所以这里的暴露只会作用于 React 模块。并且只在 bundle 中使用到它时，才进行暴露。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/expose-loader/">https://webpack.js.org/loaders/expose-loader/</a></p>\n</blockquote>\n',title:"expose-loader"},title:"expose-loader",url:"/loaders/expose-loader/"},{file:{attributes:{title:"extract-loader",source:"https://raw.githubusercontent.com/peerigon/extract-loader/master/README.md",edit:"https://github.com/peerigon/extract-loader/edit/master/README.md",repo:"https://github.com/peerigon/extract-loader",group:"-",anchors:[{title:"extract-loader",id:"extract-loader"},{title:"Installation",id:"installation"},{title:"Examples",id:"examples"},{title:"Extracting the index.html",id:"extracting-the-index-html"},{title:"Options",id:"options"},{title:"Contributing",id:"contributing"},{title:"License",id:"license"},{title:"Sponsors",id:"sponsors"}],contributors:[],related:[]},body:'<h1 class="header"><a class="anchor" href="#extract-loader" id="extract-loader"></a><span class="text">extract-loader</span><a class="icon-link" href="#extract-loader"></a></h1>\n<p><strong>webpack loader to extract HTML and CSS from the bundle.</strong></p>\n<p><a href="https://www.npmjs.com/package/extract-loader"><img src="https://img.shields.io/npm/v/extract-loader.svg" alt=""></a>\n<a href="https://www.npmjs.com/package/extract-loader"><img src="https://img.shields.io/npm/dm/extract-loader.svg" alt=""></a>\n<a href="https://david-dm.org/peerigon/extract-loader"><img src="https://david-dm.org/peerigon/extract-loader.svg" alt="Dependency Status"></a>\n<a href="https://travis-ci.org/peerigon/extract-loader"><img src="https://travis-ci.org/peerigon/extract-loader.svg?branch=master" alt="Build Status"></a>\n<a href="https://coveralls.io/r/peerigon/extract-loader?branch=master"><img src="https://img.shields.io/coveralls/peerigon/extract-loader.svg" alt="Coverage Status"></a></p>\n<p>The extract-loader evaluates the given source code on the fly and returns the result as string. Its main use-case is to resolve urls within HTML and CSS coming from their respective loaders. Use the <a href="/loaders/file-loader/">file-loader</a> to emit the extract-loader&#39;s result as separate file.</p>\n<pre><code class="lang-javascript"><span class="token keyword">import</span> stylesheetUrl <span class="token keyword">from</span> <span class="token string">"file-loader!extract-loader!css-loader!main.css"</span><span class="token punctuation">;</span>\n<span class="token comment">// stylesheetUrl will now be the hashed url to the final stylesheet</span>\n</code></pre>\n<p>The extract-loader works similar to the <a href="/plugins/extract-text-webpack-plugin/">extract-text-webpack-plugin</a> and is meant as a lean alternative to it. When evaluating the source code, it provides a fake context which was especially designed to cope with the code generated by the <a href="/loaders/html-loader/">html-</a> or the <a href="/loaders/css-loader/">css-loader</a>. Thus it might not work in other situations.</p>\n<p><br></p>\n<h2 class="header"><a class="anchor" href="#installation" id="installation"></a><span class="text">Installation</span><a class="icon-link" href="#installation"></a></h2>\n<p><code>npm install extract-loader</code></p>\n<p><br></p>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p>##</p>\n<p>Bundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or <a href="http://webpack.github.io/docs/hot-module-replacement-with-webpack.html">hot module replacement</a> in development. In production, on the other hand, it&#39;s not a good idea to apply your stylesheets depending on JS execution. Rendering may be delayed or even a <a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content">FOUC</a> might be visible. Thus it&#39;s still better to have them as separate files in your final production build.</p>\n<p>With the extract-loader, you are able to reference your <code>main.css</code> as regular <code>entry</code>. The following <code>webpack.config.js</code> shows how to load your styles with the <a href="/loaders/style-loader/">style-loader</a> in development and as separate file in production.</p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> live <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mainCss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"css-loader"</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">"main.css"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>live<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    mainCss<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"file-loader?name=[name].[ext]"</span><span class="token punctuation">,</span> <span class="token string">"extract-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    mainCss<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"style-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    entry<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">"main.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        mainCss<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#extracting-the-index-html" id="extracting-the-index-html"></a><span class="text"><a href="https://github.com/peerigon/extract-loader/tree/master/examples/index-html">Extracting the index.html</a></span><a class="icon-link" href="#extracting-the-index-html"></a></h3>\n<p>You can even add your <code>index.html</code> as <code>entry</code> and just reference your stylesheets from there. You just need to tell the html-loader to also pick up <code>link:href</code>:</p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> indexHtml <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    entry<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">"main.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        indexHtml\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> indexHtml<span class="token punctuation">,</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                            name<span class="token punctuation">:</span> <span class="token string">"[name]-dist.[ext]"</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"extract-loader"</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"html-loader"</span><span class="token punctuation">,</span>\n                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                            attrs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"img:src"</span><span class="token punctuation">,</span> <span class="token string">"link:href"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                            interpolate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n                loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"extract-loader"</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.jpg$/</span><span class="token punctuation">,</span>\n                loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>turns</p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hi.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>into</p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7c57758b88216530ef48069c2a4c685a.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6ac05174ae9b62257ff3aa8be43cf828.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre>\n<p><br></p>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<p>There is currently exactly one option: <code>publicPath</code>.\nIf you are using a relative <code>publicPath</code> in webpack&#39;s <a href="http://webpack.github.io/docs/configuration.html#output-publicpath">output options</a> and extracting to a file with the <code>file-loader</code>, you might need this to account for the location of your extracted file.</p>\n<p>Example:</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        publicPath<span class="token punctuation">:</span> <span class="token string">"dist/"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                            name<span class="token punctuation">:</span> <span class="token string">"assets/[name].[ext]"</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"extract-loader"</span><span class="token punctuation">,</span>\n                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                            publicPath<span class="token punctuation">:</span> <span class="token string">"../"</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>You need another option? Then you should think about:</p>\n<p><br></p>\n<h2 class="header"><a class="anchor" href="#contributing" id="contributing"></a><span class="text">Contributing</span><a class="icon-link" href="#contributing"></a></h2>\n<p>From opening a bug report to creating a pull request: <strong>every contribution is appreciated and welcome</strong>. If you&#39;re planing to implement a new feature or change the api please create an issue first. This way we can ensure that your precious work is not in vain.</p>\n<p>All pull requests should have 100% test coverage (with notable exceptions) and need to pass all tests.</p>\n<ul>\n<li>Call <code>npm test</code> to run the unit tests</li>\n<li>Call <code>npm run coverage</code> to check the test coverage (using <a href="https://github.com/gotwarlost/istanbul">istanbul</a>)</li>\n</ul>\n<p><br></p>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">License</span><a class="icon-link" href="#license"></a></h2>\n<p>Unlicense</p>\n<h2 class="header"><a class="anchor" href="#sponsors" id="sponsors"></a><span class="text">Sponsors</span><a class="icon-link" href="#sponsors"></a></h2>\n<p><a href="https://peerigon.com"><img src="https://assets.peerigon.com/peerigon/logo/peerigon-logo-flat-spinat.png" width="150" /></a></p>\n',title:"extract-loader"},title:"extract-loader",url:"/loaders/extract-loader/"},{file:{attributes:{title:"file-loader",source:"https://raw.githubusercontent.com/webpack-contrib/file-loader/master/README.md",edit:"https://github.com/webpack-contrib/file-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/file-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"选项",id:"-"},{title:"{String}",id:"-string-"},{title:"{Function}",id:"-function-"},{title:"placeholders",id:"placeholders"},{title:"hashes",id:"hashes"},{title:"context",id:"context"},{title:"publicPath",id:"publicpath"},{title:"outputPath",id:"outputpath"},{title:"useRelativePath",id:"userelativepath"},{title:"emitFile",id:"emitfile"},{title:"示例",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Instructs webpack to emit the required object as file and to return its public URL</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev file-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><a href="https://doc.webpack-china.org/concepts/loaders">用法</a></span><a class="icon-link" href="#-"></a></h2>\n<p>默认情况下，生成的文件的文件名就是文件内容的 MD5 哈希值并会保留所引用资源的原始扩展名。</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> img <span class="token keyword">from</span> <span class="token string">\'./file.png\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.(png|jpg|gif)$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>生成文件 file.png，输出到输出目录并返回 public URL。</p>\n<pre><code><span class="token string">"/public/path/0dcbbaa7013869e351f.png"</span>\n</code></pre><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">名称</div><div class="table-th">类型</div><div class="table-th">默认值</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>name</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>[hash].[ext]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        为你的文件配置自定义文件名模板\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>context</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>this.options.context</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        配置自定义文件 context，默认为 <code>webpack.config.js</code> <a href="https://webpack.js.org/configuration/entry-context/#context">context</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>publicPath</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <a href="https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific-"><code>__webpack_public_path__</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        为你的文件配置自定义 <code>public</code> 发布目录\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>outputPath</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>&#39;undefined&#39;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        为你的文件配置自定义 <code>output</code> 输出目录\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>useRelativePath</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        如果你希望为每个文件生成一个相对 url 的 <code>context</code> 时，应该将其设置为 <code>true</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>emitFile</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        默认情况下会生成文件，可以通过将此项设置为 false 来禁止（例如，使用了服务端的 packages）\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>##</p>\n<p>You can configure a custom filename template for your file using the query parameter <code>name</code>. For instance, to copy a file from your <code>context</code> directory into the output directory retaining the full directory structure, you might use</p>\n<h4 class="header"><a class="anchor" href="#-string-" id="-string-"></a><span class="text"><code>{String}</code></span><a class="icon-link" href="#-string-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[path][name].[ext]\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#-function-" id="-function-"></a><span class="text"><code>{Function}</code></span><a class="icon-link" href="#-function-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>env <span class="token operator">===</span> <span class="token string">\'development\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">\'[path][name].[ext]\'</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> <span class="token string">\'[hash].[ext]\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#placeholders" id="placeholders"></a><span class="text"><code>placeholders</code></span><a class="icon-link" href="#placeholders"></a></h4>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">名称</div><div class="table-th">类型</div><div class="table-th">默认值</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>[ext]</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>file.extname</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        资源扩展名\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>[name]</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>file.basename</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        资源的基本名称\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>[path]</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>file.dirname</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        资源相对于 <code>context</code>的路径\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>[hash]</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>md5</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        内容的哈希值，下面的 hashes 配置中有更多信息\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>[N]</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        ``\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        当前文件名按照查询参数 <code>regExp</code> 匹配后获得到第 N 个匹配结果\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h4 class="header"><a class="anchor" href="#hashes" id="hashes"></a><span class="text"><code>hashes</code></span><a class="icon-link" href="#hashes"></a></h4>\n<p><code>[&lt;hashType&gt;:hash:&lt;digestType&gt;:&lt;length&gt;]</code> optionally you can configure</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">名称</div><div class="table-th">类型</div><div class="table-th">默认值</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>hashType</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>md5</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        <code>sha1</code>, <code>md5</code>, <code>sha256</code>, <code>sha512</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>digestType</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>base64</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        <code>hex</code>, <code>base26</code>, <code>base32</code>, <code>base36</code>, <code>base49</code>, <code>base52</code>, <code>base58</code>, <code>base62</code>, <code>base64</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>length</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>9999</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        字符的长度\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>默认情况下，文件会按照你指定的路径和名称输出同一目录中，且会使用相同的 URL 路径来访问文件。</p>\n<h3 class="header"><a class="anchor" href="#context" id="context"></a><span class="text"><code>context</code></span><a class="icon-link" href="#context"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[path][name].[ext]\'</span><span class="token punctuation">,</span>\n    context<span class="token punctuation">:</span> <span class="token string">\'\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>你可以使用 <code>outputPath</code>，<code>useRelativePath</code>和 <code>publicPath</code>来指定自定义 <code>output</code> 输出路径和 <code>public</code> 发布目录。</p>\n<h3 class="header"><a class="anchor" href="#publicpath" id="publicpath"></a><span class="text"><code>publicPath</code></span><a class="icon-link" href="#publicpath"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[path][name].[ext]\'</span><span class="token punctuation">,</span>\n    publicPath<span class="token punctuation">:</span> <span class="token string">\'assets/\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#outputpath" id="outputpath"></a><span class="text"><code>outputPath</code></span><a class="icon-link" href="#outputpath"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[path][name].[ext]\'</span><span class="token punctuation">,</span>\n    outputPath<span class="token punctuation">:</span> <span class="token string">\'images/\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#userelativepath" id="userelativepath"></a><span class="text"><code>useRelativePath</code></span><a class="icon-link" href="#userelativepath"></a></h3>\n<p>如果你希望为每个文件生成一个相对 URL 的 <code>context</code> 时，应该将 <code>useRelativePath</code> 设置为 <code>true</code>。</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    useRelativePath<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#emitfile" id="emitfile"></a><span class="text"><code>emitFile</code></span><a class="icon-link" href="#emitfile"></a></h3>\n<p>默认情况下会生成文件，可以通过将此项设置为 false 来禁用（例如使用了服务端的 packages）。</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> img <span class="token keyword">from</span> <span class="token string">\'./file.png\'</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    emitFile<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>⚠️  返回 public URL 但<strong>不会</strong>生成文件</p>\n</blockquote>\n<pre><code><span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>publicPath<span class="token punctuation">}</span>/0dcbbaa701328e351f.png<span class="token variable">`</span></span>\n</code></pre><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">import</span> png <span class="token keyword">from</span> <span class="token string">\'image.png\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'dirname/[hash].[ext]\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code>dirname/0dcbbaa701328ae351f.png\n</code></pre><p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[sha512:hash:base64:7].[ext]\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code>gdyb21L.png\n</code></pre><pre><code class="lang-js"><span class="token keyword">import</span> png <span class="token keyword">from</span> <span class="token string">\'path/to/file.png\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[path][name].[ext]?[hash]\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code>path/to/file.png?e43b20c069c4a01867c31e98cbce33c9\n</code></pre><h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/file-loader/">https://webpack.js.org/loaders/file-loader/</a></p>\n</blockquote>\n',title:"file-loader"},title:"file-loader",url:"/loaders/file-loader/"},{file:{attributes:{title:"gzip-loader",source:"https://raw.githubusercontent.com/webpack-contrib/gzip-loader/master/README.md",edit:"https://github.com/webpack-contrib/gzip-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/gzip-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>gzip loader module for webpack</p>\n<p>Enables loading gzipped resources.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev gzip-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.gz$/</span><span class="token punctuation">,</span>\n        enforce<span class="token punctuation">:</span> <span class="token string">\'pre\'</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'gzip-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>bundle.js</strong></p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gzip-loader!./file.js.gz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/jdalton"></p>\n<p><img width="150" height="150" src="https://avatars.githubusercontent.com/u/4303?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      John-David Dalton\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/gzip-loader/">https://webpack.js.org/loaders/gzip-loader/</a></p>\n</blockquote>\n',title:"gzip-loader"},title:"gzip-loader",url:"/loaders/gzip-loader/"},{file:{attributes:{title:"html-loader",source:"https://raw.githubusercontent.com/webpack-contrib/html-loader/master/README.md",edit:"https://github.com/webpack-contrib/html-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/html-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"示例",id:"-"},{title:"插值",id:"-"},{title:"导出格式",id:"-"},{title:"高级选项",id:"-"},{title:"导出到 HTML 文件",id:"-html-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Exports HTML as string. HTML is minimized when the compiler demands.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i -D html-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>默认情况下，每个本地的 <code>&lt;img src=&quot;image.png&quot;&gt;</code> 都需要通过 require （<code>require(&#39;./image.png&#39;)</code>）来进行加载。你可能需要在配置中为图片指定 loader（推荐 <code>file-loader</code> 或 <code>url-loader</code> ）</p>\n<p>你可以通过查询参数 <code>attrs</code>，来指定哪个标签属性组合(tag-attribute combination)应该被此 loader 处理。传递数组或以空格分隔的 <code>&lt;tag&gt;:&lt;attribute&gt;</code> 组合的列表。（默认值：<code>attrs=img:src</code>）</p>\n<p>If you use <code>&lt;custom-elements&gt;</code>, and lots of them make use of a <code>custom-src</code> attribute, you don&#39;t have to specify each combination <code>&lt;tag&gt;:&lt;attribute&gt;</code>: just specify an empty tag like <code>attrs=:custom-src</code> and it will match every element.</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.(html)$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'html-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      attrs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\':data-src\'</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>要完全禁用对标签属性的处理（例如，如果你在客户端处理图片加载），你可以传入 <code>attrs=false</code>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p>使用此配置：</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\\.jpg$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"file-loader"</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\\.png$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"url-loader?mimetype=image/png"</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    publicPath<span class="token punctuation">:</span> <span class="token string">"http://cdn.example.com/[hash]/"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-html"><span class="token comment">&lt;!-- file.html --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image.png<span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image2x.png<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n</code></pre>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// => \'&lt;img src="http://cdn.example.com/49eba9f/a992ca.png"</span>\n<span class="token comment">//         data-src="image2x.png">\'</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?attrs=img:data-src!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// => \'&lt;img src="image.png" data-src="data:image/png;base64,..." >\'</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?attrs=img:src img:data-src!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?attrs[]=img:src&amp;attrs[]=img:data-src!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// => \'&lt;img  src="http://cdn.example.com/49eba9f/a992ca.png"</span>\n<span class="token comment">//           data-src="data:image/png;base64,..." >\'</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?-attrs!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// => \'&lt;img  src="image.jpg"  data-src="image2x.png" >\'</span>\n</code></pre>\n<p>通过运行 <code>webpack --optimize-minimize</code> 来最小化</p>\n<pre><code class="lang-html">\'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>http://cdn.example.com/49eba9f/a9f92ca.jpg</span>\n      <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span>data:image/png;base64,...</span><span class="token punctuation">></span></span>\'\n</code></pre>\n<p>或者在 <code>webpack.conf.js</code> 的 rule 选项中指定 <code>minimize</code> 属性</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n    use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'html-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        minimize<span class="token punctuation">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The enabled rules for minimizing by default are the following ones:</p>\n<ul>\n<li>removeComments</li>\n<li>removeCommentsFromCDATA</li>\n<li>removeCDATASectionsFromCDATA</li>\n<li>collapseWhitespace</li>\n<li>conservativeCollapse</li>\n<li>removeAttributeQuotes</li>\n<li>useShortDoctype</li>\n<li>keepClosingSlash</li>\n<li>minifyJS</li>\n<li>minifyCSS</li>\n<li>removeScriptTypeAttributes</li>\n<li><p>removeStyleTypeAttributes</p>\n<p>The rules can be disabled using the following options in your <code>webpack.conf.js</code></p>\n</li>\n</ul>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n    use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'html-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        minimize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        removeComments<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>##</p>\n<p>对于以 <code>/</code> 开头的 url，默认行为是不转换它们。\n如果设置了 <code>root</code> 查询参数，它将被添加到 URL 之前，然后进行转换。</p>\n<p>和上面配置相同：</p>\n<pre><code class="lang-html">\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/image.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n</code></pre>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// => \'&lt;img  src="/image.jpg">\'</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?root=.!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// => \'&lt;img  src="http://cdn.example.com/49eba9f/a992ca.jpg">\'</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">插值</span><a class="icon-link" href="#-"></a></h3>\n<p>你可以使用 <code>interpolate</code> 标记，为 ES6 模板字符串启用插值语法，就像这样：</p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?interpolate!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${require(`./images/gallery.png`)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>${require(\'./components/gallery.html\')}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>如果你只想在模板中使用 <code>require</code>，任何其它的 <code>${}</code> 不被转换，你可以设置 <code>interpolate</code> 标记为 <code>require</code>，就像这样：</p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?interpolate=require!./file.ftl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre><code class="lang-html">\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">list</span> <span class="token attr-name">as</span> <span class="token attr-name">list</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${list.href!}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>${list.name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${require(`./images/gallery.png`)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>${require(\'./components/gallery.html\')}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">导出格式</span><a class="icon-link" href="#-"></a></h3>\n<p>这里有几种不同的可用导出格式：</p>\n<ul>\n<li><code>module.exports</code>（默认配置，cjs 格式）。&quot;Hello world&quot; 转为 <code>module.exports = &quot;Hello world&quot;;</code></li>\n<li><code>exports.default</code> (当设置了 <code>exportAsDefault</code> 参数，es6to5 格式）。&quot;Hello world&quot; 转为 <code>exports.default = &quot;Hello world&quot;;</code></li>\n<li><code>export default</code> (当设置了 <code>exportAsEs6Default</code> 参数，es6 格式)。&quot;Hello world&quot; 转为 <code>export default &quot;Hello world&quot;;</code></li>\n</ul>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">高级选项</span><a class="icon-link" href="#-"></a></h3>\n<p>如果你需要传递<a href="https://github.com/webpack/html-loader/pull/46">更多高级选项</a>，特别是那些不能被字符串化，你还可以在 <code>webpack.config.js</code> 中定义一个 <code>htmlLoader</code> 属性：</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"html-loader"</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  htmlLoader<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    ignoreCustomFragments<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">/</span>\\<span class="token punctuation">{</span>\\<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    root<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'assets\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    attrs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'img:src\'</span><span class="token punctuation">,</span> <span class="token string">\'link:href\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>如果你需要定义两个不同的 loader 配置，你也可以通过 <code>html-loader?config=otherHtmlLoaderConfig</code> 改变配置的属性名：</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"html-loader?config=otherHtmlLoaderConfig"</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  otherHtmlLoaderConfig<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-html-" id="-html-"></a><span class="text">导出到 HTML 文件</span><a class="icon-link" href="#-html-"></a></h3>\n<p>一个很常见的场景，将 HTML 导出到 <em>.html</em> 文件中，直接访问它们，而不是使用 javascript 注入。这可以通过3个 loader 的组合来实现：</p>\n<ul>\n<li><a href="https://github.com/webpack/file-loader">file-loader</a></li>\n<li><a href="https://github.com/peerigon/extract-loader">extract-loader</a></li>\n<li>html-loader</li>\n</ul>\n<p>html-loader 将解析 URL，并请求图片和你所期望的一切资源。extract-loader 会将 javascript 解析为合适的 html 文件，确保引用的图片指向正确的路径，file-loader 将结果写入 .html 文件。示例：</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'file-loader?name=[path][name].[ext]!extract-loader!html-loader\'</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/18315?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/hemanth"></p>\n<p>Hemanth</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/8420490?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150" src="https://avatars.githubusercontent.com/u/5419992?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/michael-ciniawsky"></p>\n<p>Michael Ciniawsky</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/6542274?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/imvetri"></p>\n<p>Imvetri</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/1520965?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/andreicek"></p>\n<p>Andrei Crnković</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/3367801?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/abouthiroppy"></p>\n<p>Yuta Hiroto</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150" src="https://avatars.githubusercontent.com/u/80044?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/petrunov"></p>\n<p>Vesselin Petrunov</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/973543?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/gajus"></p>\n<p>Gajus Kuizinas</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<p></tbody></p>\n<p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/html-loader/">https://webpack.js.org/loaders/html-loader/</a></p>\n</blockquote>\n',title:"html-loader"},title:"html-loader",url:"/loaders/html-loader/"},{file:{attributes:{title:"i18n-loader",source:"https://raw.githubusercontent.com/webpack-contrib/i18n-loader/master/README.md",edit:"https://github.com/webpack-contrib/i18n-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/i18n-loader",group:"-",anchors:[{title:"用法",id:"-"},{title:"./colors.json",id:"-colors-json"},{title:"./de-de.colors.json",id:"-de-de-colors-json"},{title:"调用",id:"-"},{title:"配置",id:"-"},{title:"可选的调用方法",id:"-"},{title:"License",id:"license"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<h3 class="header"><a class="anchor" href="#-colors-json" id="-colors-json"></a><span class="text">./colors.json</span><a class="icon-link" href="#-colors-json"></a></h3>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n    <span class="token string">"red"</span><span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>\n    <span class="token string">"green"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span>\n    <span class="token string">"blue"</span><span class="token punctuation">:</span> <span class="token string">"blue"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-de-de-colors-json" id="-de-de-colors-json"></a><span class="text">./de-de.colors.json</span><a class="icon-link" href="#-de-de-colors-json"></a></h3>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n    <span class="token string">"red"</span><span class="token punctuation">:</span> <span class="token string">"rot"</span><span class="token punctuation">,</span>\n    <span class="token string">"green"</span><span class="token punctuation">:</span> <span class="token string">"gr�n"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">调用</span><a class="icon-link" href="#-"></a></h3>\n<pre><code class="lang-javascript"><span class="token comment">// 假如我们的所在区域是 "de-de-berlin"</span>\n<span class="token keyword">var</span> locale <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"i18n!./colors.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 等待准备就绪，在一个 web 项目中所有地区只需要一次</span>\n<span class="token comment">// 因为所有地区的语言被合并到一个块中</span>\n<span class="token function">locale</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>locale<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 rot</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>locale<span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 blue</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">配置</span><a class="icon-link" href="#-"></a></h3>\n<p>如果想要一次加载然后可以同步地使用，\n你应该告诉 loader 所有要使用的地区。</p>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  <span class="token string">"i18n"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"locales"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token string">"de"</span><span class="token punctuation">,</span>\n      <span class="token string">"de-de"</span><span class="token punctuation">,</span>\n      <span class="token string">"fr"</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// "bundleTogether": false</span>\n    <span class="token comment">// 可以禁止所有地区打包到一起</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">可选的调用方法</span><a class="icon-link" href="#-"></a></h3>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"i18n/choose!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据地区选择正确的文件，</span>\n                    <span class="token comment">// 但是不会合并到对象中</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"i18n/concat!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拼接所有合适的地区</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"i18n/merge!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 合并到对象中</span>\n                    <span class="token comment">// ./file.js 在编译时会被排除掉</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"i18n!./file.json"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"i18n/merge!json!./file.json"</span><span class="token punctuation">)</span>\n</code></pre>\n<p>如果需要在 node 中使用，不要忘记填补（polyfill）<code>require</code>。\n可以参考 <code>webpack</code> 文档。</p>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">License</span><a class="icon-link" href="#license"></a></h2>\n<p>MIT (<a href="http://www.opensource.org/licenses/mit-license.php">http://www.opensource.org/licenses/mit-license.php</a>)</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/i18n-loader/">https://webpack.js.org/loaders/i18n-loader/</a></p>\n</blockquote>\n',title:"i18n-loader"},title:"i18n-loader",url:"/loaders/i18n-loader/"},{file:{attributes:{title:"imports-loader",source:"https://raw.githubusercontent.com/webpack-contrib/imports-loader/master/README.md",edit:"https://github.com/webpack-contrib/imports-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/imports-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"多个值",id:"-"},{title:"webpack.config.js",id:"webpack-config-js"},{title:"典型的使用场景",id:"-"},{title:"jQuery 插件",id:"jquery-"},{title:"自定义的 Angular 模块",id:"-angular-"},{title:"禁用 AMD",id:"-amd"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>The imports loader allows you to use modules that depend on specific global variables.</p>\n<p>This is useful for third-party modules that rely on global variables like <code>$</code> or <code>this</code> being the <code>window</code> object. The imports loader can add the necessary <code>require(&#39;whatever&#39;)</code> calls, so those modules work with webpack.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> imports-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">用法</a></span><a class="icon-link" href="#-"></a></h2>\n<p>假设你有 <code>example.js</code> 这个文件</p>\n<pre><code class="lang-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomeAwesomeJqueryPluginStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>然后你可以像下面这样通过配置 imports-loader 插入 <code>$</code> 变量到模块中：</p>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"imports-loader?$=jquery!./example.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>这将简单的把 <code>var $ = require(&quot;jquery&quot;);</code> 前置插入到 <code>example.js</code> 中。</p>\n<p>##</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">loader 查询值</div><div class="table-th">含义</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        loader 查询值\n    </div>\n    <div class="table-td-content">\n        <code>angular</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        含义\n    </div>\n    <div class="table-td-content">\n        <code>var angular = require(&quot;angular&quot;);</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        loader 查询值\n    </div>\n    <div class="table-td-content">\n        <code>$=jquery</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        含义\n    </div>\n    <div class="table-td-content">\n        <code>var $ = require(&quot;jquery&quot;);</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        loader 查询值\n    </div>\n    <div class="table-td-content">\n        <code>define=&gt;false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        含义\n    </div>\n    <div class="table-td-content">\n        <code>var define = false;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        loader 查询值\n    </div>\n    <div class="table-td-content">\n        <code>config=&gt;{size:50}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        含义\n    </div>\n    <div class="table-td-content">\n        <code>var config = {size:50};</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        loader 查询值\n    </div>\n    <div class="table-td-content">\n        <code>this=&gt;window</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        含义\n    </div>\n    <div class="table-td-content">\n        <code>(function () { ... }).call(window);</code>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">多个值</span><a class="icon-link" href="#-"></a></h3>\n<p>使用逗号 <code>,</code> 来分隔和使用多个值：</p>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"imports-loader?$=jquery,angular,config=>{size:50}!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#webpack-config-js" id="webpack-config-js"></a><span class="text">webpack.config.js</span><a class="icon-link" href="#webpack-config-js"></a></h3>\n<p>同样的，在你的 <code>webpack.config.js</code> 配置文件中进行配置会更好：</p>\n<pre><code class="lang-javascript"><span class="token comment">// ./webpack.config.js</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"some-module"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                use<span class="token punctuation">:</span> <span class="token string">"imports-loader?this=>window"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">典型的使用场景</span><a class="icon-link" href="#-"></a></h2>\n<h3 class="header"><a class="anchor" href="#jquery-" id="jquery-"></a><span class="text">jQuery 插件</span><a class="icon-link" href="#jquery-"></a></h3>\n<p><code>imports-loader?$=jquery</code></p>\n<h3 class="header"><a class="anchor" href="#-angular-" id="-angular-"></a><span class="text">自定义的 Angular 模块</span><a class="icon-link" href="#-angular-"></a></h3>\n<p><code>imports-loader?angular</code></p>\n<h3 class="header"><a class="anchor" href="#-amd" id="-amd"></a><span class="text">禁用 AMD</span><a class="icon-link" href="#-amd"></a></h3>\n<p>有很多模块在使用 CommonJS 前会进行 <code>define</code> 函数的检查。自从 webpack 两种格式都可以使用后，在这种场景下默认使用了 AMD 可能会造成某些问题（如果接口的实现比较古怪）。</p>\n<p>你可以像下面这样轻松的禁用 AMD</p>\n<pre><code class="lang-javascript">imports<span class="token operator">-</span>loader<span class="token operator">?</span>define<span class="token operator">=</span><span class="token operator">></span><span class="token boolean">false</span>\n</code></pre>\n<p>关于兼容性问题的更多提示，可以参考官方的文档 <a href="http://webpack.github.io/docs/shimming-modules.html">Shimming Modules</a>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/imports-loader/">https://webpack.js.org/loaders/imports-loader/</a></p>\n</blockquote>\n',title:"imports-loader"},title:"imports-loader",url:"/loaders/imports-loader/"},{file:{attributes:{title:"istanbul-instrumenter-loader",source:"https://raw.githubusercontent.com/webpack-contrib/istanbul-instrumenter-loader/master/README.md",edit:"https://github.com/webpack-contrib/istanbul-instrumenter-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/istanbul-instrumenter-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"结构",id:"-"},{title:"使用 Babel",id:"-babel"},{title:"Options",id:"options"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Instrument JS files with <a href="https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-instrument">istanbul-lib-instrument</a> for subsequent code coverage reporting</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i -D istanbul-instrumenter-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">用法</a></span><a class="icon-link" href="#-"></a></h2>\n<p>##</p>\n<ul>\n<li><a href="https://github.com/webpack/karma-webpack">karma-webpack</a></li>\n<li><a href="https://github.com/mattlewis92/karma-coverage-istanbul-reporter">karma-coverage-istanbul-reporter</a></li>\n</ul>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><code>结构</code></span><a class="icon-link" href="#-"></a></h3>\n<pre><code>├─ src\n│ <span class="token operator">|</span>– components\n│ <span class="token operator">|</span> <span class="token operator">|</span>– bar\n│ <span class="token operator">|</span> │ <span class="token operator">|</span>─ index.js\n│ <span class="token operator">|</span> <span class="token operator">|</span>– foo/\n│     <span class="token operator">|</span>– index.js\n<span class="token operator">|</span>– <span class="token function">test</span>\n<span class="token operator">|</span> <span class="token operator">|</span>– src\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– components\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– foo\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– index.js\n</code></pre><p>为生成所有组件（包括你没写测试的那些）的代码覆盖率报告，你需要 require 所有<strong>业务</strong>和<strong>测试</strong>的代码。相关内容在 <a href="https://github.com/webpack/karma-webpack#alternative-usage">karma-webpack 其他用法</a>中有涉及</p>\n<p><strong>test/index.js</strong></p>\n<pre><code class="lang-js"><span class="token comment">// requires 所有在 `project/test/src/components</span><span class="token comment">/**/</span>index<span class="token punctuation">.</span>js` 中的测试\n<span class="token keyword">const</span> tests <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'./src/components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/index\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ntests<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>tests<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// requires 所有在 `project/src/components</span><span class="token comment">/**/</span>index<span class="token punctuation">.</span>js` 中的组件\n<span class="token keyword">const</span> components <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../src/components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/index\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncomponents<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>components<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote>\n<p>ℹ️  以下为 <code>karma</code> 的唯一<code>入口</code>起点文件</p>\n</blockquote>\n<p><strong>karma.conf.js</strong></p>\n<pre><code class="lang-js">config<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  files<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'test/index.js\'</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  preprocessors<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">\'test/index.js\'</span><span class="token punctuation">:</span> <span class="token string">\'webpack\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  webpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// 用 Istanbul 只监测业务代码</span>\n        <span class="token punctuation">{</span>\n          test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n          use<span class="token punctuation">:</span> <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'istanbul-instrumenter-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src/components/\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  reporters<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'progress\'</span><span class="token punctuation">,</span> <span class="token string">\'coverage-istanbul\'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  coverageIstanbulReporter<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    reports<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'text-summary\'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    fixWebpackSourcePaths<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-babel" id="-babel"></a><span class="text">使用 <code>Babel</code></span><a class="icon-link" href="#-babel"></a></h3>\n<p>You must run the instrumentation as a post step</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.js$|\\.jsx$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'istanbul-instrumenter-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span> esModules<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  enforce<span class="token punctuation">:</span> <span class="token string">\'post\'</span><span class="token punctuation">,</span>\n  exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules|\\.spec\\.js$/</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text"><a href="https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#instrumenter">Options</a></span><a class="icon-link" href="#options"></a></h2>\n<p>此 loader 支持 <code>istanbul-lib-instrument</code> 的所有配置选项</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>debug</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Turn on debugging mode\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>compact</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Generate compact code\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>autoWrap</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set to <code>true</code> to allow return statements outside of functions\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>esModules</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set to <code>true</code> to instrument ES2015 Modules\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>coverageVariable</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>__coverage__</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Name of global coverage variable\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>preserveComments</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Preserve comments in <code>output</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>produceSourceMap</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set to <code>true</code> to produce a source map for the instrumented code\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>sourceMapUrlCallback</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>null</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        A callback function that is called when a source map URL is found in the original code. This function is called with the source filename and the source map URL\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'istanbul-instrumenter-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/266822?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/deepsweet"></p>\n<p>Kir Belevich</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/mattlewis92"></p>\n<p><img width="150" height="150" src="https://github.com/mattlewis92.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Matt Lewis\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/istanbul-instrumenter-loader/">https://webpack.js.org/loaders/istanbul-instrumenter-loader/</a></p>\n</blockquote>\n',title:"istanbul-instrumenter-loader"},title:"istanbul-instrumenter-loader",url:"/loaders/istanbul-instrumenter-loader/"},{file:{attributes:{title:"jshint-loader",source:"https://raw.githubusercontent.com/webpack-contrib/jshint-loader/master/README.md",edit:"https://github.com/webpack-contrib/jshint-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/jshint-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"自定义报告函数",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Runs <a href="http://jshint.com/">JSHint</a> on required JavaScript files.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i jshint-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>在 webpack 配置中启用 jshint loader：</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span> <span class="token comment">// 涵盖 .js 文件</span>\n        enforce<span class="token punctuation">:</span> <span class="token string">"pre"</span><span class="token punctuation">,</span> <span class="token comment">// 预先加载好 jshint loader</span>\n        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span> <span class="token comment">// 排除掉 node_modules 文件夹下的所有文件</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">"jshint-loader"</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 更多 jslint 的配置项</span>\n  jshint<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 查询 jslint 配置项，请参考 http://www.jshint.com/docs/options/</span>\n    <span class="token comment">// 例如</span>\n    camelcase<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\n    <span class="token comment">//jslint 的错误信息在默认情况下会显示为 warning（警告）类信息</span>\n    <span class="token comment">//将 emitErrors 参数设置为 true 可使错误显示为 error（错误）类信息</span>\n    emitErrors<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\n    <span class="token comment">//jshint 默认情况下不会打断webpack编译</span>\n    <span class="token comment">//如果你想在 jshint 出现错误时，立刻停止编译</span>\n    <span class="token comment">//请设置 failOnHint 参数为true</span>\n    failOnHint<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// 自定义报告函数</span>\n    reporter<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">自定义报告函数</span><a class="icon-link" href="#-"></a></h2>\n<p>在默认情况下，<code>jshint-loader</code> 会提供一个默认的报告方法。</p>\n<p>然而，如果你想自定义报告函数，你可以在 <code>jshint</code> 配置下 key 为 <code>report</code> 下的配置项里传入自定义的函数。（参考上文的<em>用法</em>）</p>\n<p>然后，jshint 将会生成与以下示例结构一致的\n错误/警告信息（数组）给报告函数。</p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n<span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span>        <span class="token punctuation">[</span>字符串<span class="token punctuation">,</span> 通常是 <span class="token string">\'(error)\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    code<span class="token punctuation">:</span>      <span class="token punctuation">[</span>字符串<span class="token punctuation">,</span> 错误<span class="token operator">/</span>警告（error<span class="token operator">/</span>warning）编码<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    reason<span class="token punctuation">:</span>    <span class="token punctuation">[</span>字符串<span class="token punctuation">,</span> 错误<span class="token operator">/</span>警告（error<span class="token operator">/</span>warning）信息<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    evidence<span class="token punctuation">:</span>  <span class="token punctuation">[</span>字符串<span class="token punctuation">,</span> 对应生成此错误的编码<span class="token punctuation">]</span>\n    line<span class="token punctuation">:</span>      <span class="token punctuation">[</span>数字<span class="token punctuation">]</span>\n    character<span class="token punctuation">:</span> <span class="token punctuation">[</span>数字<span class="token punctuation">]</span>\n    scope<span class="token punctuation">:</span>     <span class="token punctuation">[</span>字符串<span class="token punctuation">,</span> 消息作用域<span class="token punctuation">;</span>\n                通常是 <span class="token string">\'(main)\'</span> <span class="token function">除非代码被解析</span><span class="token punctuation">(</span>eval<span class="token punctuation">)</span>了<span class="token punctuation">]</span>\n\n    <span class="token punctuation">[</span><span class="token operator">+</span> 还有一些旧有的参数，一般用户不必了解<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token comment">// ...</span>\n<span class="token comment">// 更多的错误/警告</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>报告函数会将 loader 的上下文信息保存在 <code>this</code> 后执行。你可以使用 <code>this.emitWarning(...)</code> 或者 <code>this.emitError(...)</code> 方法，手动触发信息的报告。请参考<a href="https://webpack.js.org/api/loaders/#the-loader-context">关于 loader 上下文的 webpack 文档</a>.</p>\n<p><strong>注意：</strong><code>jshint reporters</code> 是与 <code>jshint-loader</code> <strong>不兼容</strong>的！\n这是因为 reporter 的输入来源，只能从一个文件，而不能同时从多个文件读取。在这种方式下的错误报告，是与 jshint 的<a href="http://www.jshint.com/docs/reporters/">传统 reporters</a>  不一样的，\n因为 loader 插件（例如 jshint-loader）是会在每一个源文件上执行的，因此它们的报告函数也会分别对应每一个源文件上执行。</p>\n<p>webpack 控制台输出的格式大致如下：</p>\n<pre><code class="lang-js"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\nWARNING <span class="token keyword">in</span> <span class="token punctuation">.</span><span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>file<span class="token punctuation">.</span>js\n<span class="token operator">&lt;</span>reporter output<span class="token operator">></span>\n\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre>\n<p>`</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/jshint-loader/">https://webpack.js.org/loaders/jshint-loader/</a></p>\n</blockquote>\n',title:"jshint-loader"},title:"jshint-loader",url:"/loaders/jshint-loader/"},{file:{attributes:{title:"json-loader",source:"https://raw.githubusercontent.com/webpack-contrib/json-loader/master/README.md",edit:"https://github.com/webpack-contrib/json-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/json-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"通过配置（推荐）",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev json-loader\n</code></pre>\n<blockquote>\n<p>⚠️ <strong>注意：由于 <code>webpack &gt;= v2.0.0</code> 默认支持导入 JSON 文件。如果你使用自定义文件扩展名，你可能仍然需要使用此 loader。See the <a href="https://webpack.js.org/guides/migrating/#json-loader-is-not-required-anymore">v1.0.0 -&gt; v2.0.0 Migration Guide</a> for more information</strong></p>\n</blockquote>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>##</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'json-loader!./file.json\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><code>通过配置</code>（推荐）</span><a class="icon-link" href="#-"></a></h3>\n<pre><code class="lang-js"><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./file.json\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.json$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'json-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150" src="https://avatars.githubusercontent.com/sokra?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/sokra"></p>\n<p>Tobias Koppers</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<p></tbody></p>\n<p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/json-loader/">https://webpack.js.org/loaders/json-loader/</a></p>\n</blockquote>\n',title:"json-loader"},title:"json-loader",url:"/loaders/json-loader/"},{file:{attributes:{title:"json5-loader",source:"https://raw.githubusercontent.com/webpack-contrib/json5-loader/master/README.md",edit:"https://github.com/webpack-contrib/json5-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/json5-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"require 语句使用 loader 前缀的用法",id:"require-loader-"},{title:"维护人员",id:"-"},{title:"LICENSE",id:"license"}],contributors:[],related:[]},body:'<p>A webpack loader for parsing <a href="http://json5.org/"><code>json5</code></a> files into JavaScript objects.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-sh">$ npm <span class="token function">install</span> --save-dev json5-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>你可以通过以下用法使用这个 loader</p>\n<ul>\n<li>在 webpack 配置里的 <code>module.loaders</code> 对象中配置 <code>json5-loader</code>；</li>\n<li>直接在 require 语句中使用 <code>json5-loader!</code> 前缀。</li>\n</ul>\n<p>假设我们有下面这个 <code>json5</code> 文件</p>\n<pre><code class="lang-js"><span class="token comment">// appData.json5</span>\n<span class="token punctuation">{</span>\n  env<span class="token punctuation">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  passwordStregth<span class="token punctuation">:</span> <span class="token string">\'strong\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>###</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// 使所有以 .json5 结尾的文件使用 `json5-loader`</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.json5$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'json5-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token comment">// index.js</span>\n<span class="token keyword">var</span> appConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./appData.json5\'</span><span class="token punctuation">)</span>\n<span class="token comment">// 或者 ES6 语法</span>\n<span class="token comment">// import appConfig from \'./appData.json5\'</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>appConfig<span class="token punctuation">.</span>env<span class="token punctuation">)</span> <span class="token comment">// \'production\'</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#require-loader-" id="require-loader-"></a><span class="text">require 语句使用 loader 前缀的用法</span><a class="icon-link" href="#require-loader-"></a></h4>\n<pre><code class="lang-js"><span class="token keyword">var</span> appConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json5-loader!./appData.json5"</span><span class="token punctuation">)</span>\n<span class="token comment">// 返回的是 json 解析过的对象</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>appConfig<span class="token punctuation">.</span>env<span class="token punctuation">)</span> <span class="token comment">// \'production\'</span>\n</code></pre>\n<p>如果需要在 Node.js 中使用，不要忘记兼容(polyfill) require。更多参考 webpack 文档。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/sokra?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/sokra"></p>\n<p>Tobias Koppers</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/gdi2290?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/gdi2290"></p>\n<p>PatrickJS</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150" src="https://avatars.githubusercontent.com/Cellule?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/Cellule"></p>\n<p>Michael Ferris</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/kmck?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/kmck"></p>\n<p>Keith McKnight</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/radubrehar?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/radubrehar"></p>\n<p>Radu Brehar</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/kentcdodds?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/kentcdodds"></p>\n<p>Kent C. Dodds</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/stevelacy?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/stevelacy"></p>\n<p>Steve Lacy</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<p></tbody></p>\n<p></table></p>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">LICENSE</span><a class="icon-link" href="#license"></a></h2>\n<p>MIT</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/json5-loader/">https://webpack.js.org/loaders/json5-loader/</a></p>\n</blockquote>\n',title:"json5-loader"},title:"json5-loader",url:"/loaders/json5-loader/"},{file:{attributes:{title:"less-loader",source:"https://raw.githubusercontent.com/webpack-contrib/less-loader/master/README.md",edit:"https://github.com/webpack-contrib/less-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/less-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"示例",id:"-"},{title:"Usage",id:"usage"},{title:"Imports",id:"imports"},{title:"webpack resolver",id:"webpack-resolver"},{title:"Non-Less imports",id:"non-less-imports"},{title:"Less resolver",id:"less-resolver"},{title:"插件",id:"-"},{title:"Extracting style sheets",id:"extracting-style-sheets"},{title:"Source maps",id:"source-maps"},{title:"CSS modules gotcha",id:"css-modules-gotcha"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p align="center"><p>Compiles Less to CSS.</p>\n<p></p></p>\n<p>Use the <a href="/loaders/css-loader/">css-loader</a> or the <a href="/loaders/raw-loader/">raw-loader</a> to turn it into a JS module and the <a href="/plugins/extract-text-webpack-plugin/">ExtractTextPlugin</a> to extract it into a separate file.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev less-loader <span class="token function">less</span>\n</code></pre>\n<p>The less-loader requires <a href="https://github.com/less/less.js">less</a> as <a href="https://docs.npmjs.com/files/package.json#peerdependencies"><code>peerDependency</code></a>. Thus you are able to control the versions accurately.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p>将 <a href="https://github.com/webpack-contrib/css-loader">css-loader</a>、<a href="https://github.com/webpack-contrib/style">style-loader</a> 和 less-loader 链式调用，可以把所有样式立即应用于 DOM。</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span> <span class="token comment">// creates style nodes from JS strings</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span> <span class="token comment">// translates CSS into CommonJS</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span> <span class="token comment">// compiles Less to CSS</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>You can pass any Less specific options to the less-loader via <a href="https://webpack.js.org/configuration/module/#rule-options-rule-query">loader options</a>. See the <a href="http://lesscss.org/usage/#command-line-usage-options">Less documentation</a> for all available options in dash-case. Since we&#39;re passing these options to Less programmatically, you need to pass them in camelCase here:</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    strictMath<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                    noIeCompat<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Unfortunately, Less doesn&#39;t map all options 1-by-1 to camelCase. When in doubt, <a href="https://github.com/less/less.js/blob/3.x/bin/lessc">check their executable and search for the dash-case option</a>.</p>\n<p>##</p>\n<p>Usually, it&#39;s recommended to extract the style sheets into a dedicated file in production using the <a href="https://github.com/webpack-contrib/extract-text-webpack-plugin">ExtractTextPlugin</a>. This way your styles are not dependent on JavaScript:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"extract-text-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> extractLess <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">"[name].[contenthash].css"</span><span class="token punctuation">,</span>\n    disable<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"development"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> extractLess<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                    loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                    loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span>\n                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                <span class="token comment">// use style-loader in development</span>\n                fallback<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        extractLess\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<h3 class="header"><a class="anchor" href="#imports" id="imports"></a><span class="text">Imports</span><a class="icon-link" href="#imports"></a></h3>\n<p>Starting with less-loader 4, you can now choose between Less&#39; builtin resolver and webpack&#39;s resolver. By default, webpack&#39;s resolver is used.</p>\n<h4 class="header"><a class="anchor" href="#webpack-resolver" id="webpack-resolver"></a><span class="text">webpack resolver</span><a class="icon-link" href="#webpack-resolver"></a></h4>\n<p>webpack 提供了一种<a href="https://webpack.js.org/configuration/resolve/">解析文件的高级机制</a>。less-loader 应用一个 Less 插件，并且将所有查询参数传递给 webpack resolver。所以，你可以从 <code>node_modules</code> 导入你的 less 模块。只要加一个 <code>~</code> 前缀，告诉 webpack 去查询<a href="https://webpack.js.org/configuration/resolve/#resolve-modules"><code>模块</code></a>。</p>\n<pre><code class="lang-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"~bootstrap/less/bootstrap"</span><span class="token punctuation">;</span></span>\n</code></pre>\n<p>重要的是只使用 <code>~</code> 前缀，因为 <code>~/</code> 会解析为主目录。webpack 需要区分<code>bootstrap</code>和<code>〜bootstrap</code>，因为 CSS 和 Less 文件没有用于导入相对文件的特殊语法。<code>@import &quot;file&quot;</code> 与 <code>@import &quot;./file&quot;;</code> 写法相同</p>\n<h5 class="header"><a class="anchor" href="#non-less-imports" id="non-less-imports"></a><span class="text">Non-Less imports</span><a class="icon-link" href="#non-less-imports"></a></h5>\n<p>使用 webpack resolver，你可以引入任何文件类型。你只需要一个导出有效的 Less 代码的 loader。通常，你还需要设置 <code>issuer</code> 条件，以确保此规则仅适用于 Less 文件的导入：</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n            issuer<span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"js-to-less-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#less-resolver" id="less-resolver"></a><span class="text">Less resolver</span><a class="icon-link" href="#less-resolver"></a></h4>\n<p>If you specify the <code>paths</code> option, the less-loader will not use webpack&#39;s resolver. Modules, that can&#39;t be resolved in the local folder, will be searched in the given <code>paths</code>. This is Less&#39; default behavior. <code>paths</code> should be an array with absolute paths:</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    paths<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                        path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>In this case, all webpack features like importing non-Less files or aliasing won&#39;t work of course.</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">插件</span><a class="icon-link" href="#-"></a></h3>\n<p>为了使用<a href="http://lesscss.org/usage/#plugins">插件</a>，只需像下面这样简单设置 <code>plugins</code> 选项：</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> CleanCSSPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"less-plugin-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n            <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                        <span class="token keyword">new</span> <span class="token class-name">CleanCSSPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> advanced<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#extracting-style-sheets" id="extracting-style-sheets"></a><span class="text">Extracting style sheets</span><a class="icon-link" href="#extracting-style-sheets"></a></h3>\n<p>Bundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or <a href="https://webpack.js.org/concepts/hot-module-replacement/">hot module replacement</a> in development. In production, on the other hand, it&#39;s not a good idea to apply your style sheets depending on JS execution. Rendering may be delayed or even a <a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content">FOUC</a> might be visible. Thus it&#39;s often still better to have them as separate files in your final production build.</p>\n<p>There are two possibilities to extract a style sheet from the bundle:</p>\n<ul>\n<li><a href="https://github.com/peerigon/extract-loader">extract-loader</a> (simpler, but specialized on the css-loader&#39;s output)</li>\n<li><a href="https://github.com/webpack-contrib/extract-text-webpack-plugin">extract-text-webpack-plugin</a> (more complex, but works in all use-cases)</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#source-maps" id="source-maps"></a><span class="text">Source maps</span><a class="icon-link" href="#source-maps"></a></h3>\n<p>要启用 CSS 的 source map，你需要将 <code>sourceMap</code> 选项传递给 <em>less-loader</em> 和 <em>css-loader</em>。所以你的 `webpack.config.js&#39; 应该是这样：</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Also checkout the <a href="https://github.com/webpack-contrib/less-loader/tree/master/examples/sourceMaps">sourceMaps example</a>.</p>\n<p>如果你要编辑 Chrome 中的原始 Less 文件，<a href="https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0">这里有一个很好的博客文章</a>。此博客文章是关于 Sass 的，但它也适用于 Less。</p>\n<h3 class="header"><a class="anchor" href="#css-modules-gotcha" id="css-modules-gotcha"></a><span class="text">CSS modules gotcha</span><a class="icon-link" href="#css-modules-gotcha"></a></h3>\n<p>There is a known problem with Less and <a href="https://github.com/css-modules/css-modules">CSS modules</a> regarding relative file paths in <code>url(...)</code> statements. <a href="https://github.com/webpack-contrib/less-loader/issues/109#issuecomment-253797335">See this issue for an explanation</a>.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tr><td align="center"><p><a href="https://github.com/jhnns"></p>\n<p><img width="150" height="150" src="https://github.com/jhnns.png?s=150"></p>\n<p></a></p>\n<p><br></p>\n<p><a href="https://github.com/jhnns"></p>\n<p>Johannes Ewald</p>\n<p></a></p>\n<p></td></p>\n<tr><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/less-loader/">https://webpack.js.org/loaders/less-loader/</a></p>\n</blockquote>\n',title:"less-loader"},title:"less-loader",url:"/loaders/less-loader/"},{file:{attributes:{title:"bundle-loader",source:"https://raw.githubusercontent.com/webpack-contrib/bundle-loader/master/README.md",edit:"https://github.com/webpack-contrib/bundle-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/bundle-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"Options",id:"options"},{title:"name",id:"name"},{title:"Examples",id:"examples"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Bundle loader for webpack</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i bundle-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">用法</a></span><a class="icon-link" href="#-"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.bundle\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The chunk is requested, when you require the bundle.</p>\n<p><strong>file.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> bundle <span class="token keyword">from</span> <span class="token string">\'./file.bundle.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p>To wait until the chunk is available (and get the exports)\nyou need to async wait for it.</p>\n<pre><code class="lang-js"><span class="token function">bundle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// use the file like it was required</span>\n  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./file.js\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>This wraps the <code>require(&#39;file.js&#39;)</code> in a <code>require.ensure</code> block</p>\n<p>Multiple callbacks can be added. They will be executed in the order of addition.</p>\n<pre><code class="lang-js"><span class="token function">bundle</span><span class="token punctuation">(</span>callbackTwo<span class="token punctuation">)</span>\n<span class="token function">bundle</span><span class="token punctuation">(</span>callbackThree<span class="token punctuation">)</span>\n</code></pre>\n<p>If a callback is added after dependencies were loaded, it will be called immediately.</p>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>lazy</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Loads the imported bundle asynchronously\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>name</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[id].[name]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Configure a custom filename for your imported bundle\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>##</p>\n<p>The file is requested when you require the <code>bundle-loader</code>. If you want it to request it lazy, use:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    lazy<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token keyword">import</span> bundle <span class="token keyword">from</span> <span class="token string">\'./file.bundle.js\'</span>\n\n<span class="token function">bundle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote>\n<p>ℹ️  The chunk is not requested until you call the load function</p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#name" id="name"></a><span class="text"><code>name</code></span><a class="icon-link" href="#name"></a></h3>\n<p>You may set name for a bundle using the <code>name</code> options parameter.\nSee <a href="https://github.com/webpack/loader-utils#interpolatename">documentation</a>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[name]\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>:warning: chunks created by the loader will be named according to the\n<a href="https://webpack.js.org/configuration/output/#output-chunkfilename"><code>output.chunkFilename</code></a> rule, which defaults to <code>[id].[name]</code>. Here <code>[name]</code> corresponds to the chunk name set in the <code>name</code> options parameter.</p>\n</blockquote>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">import</span> bundle <span class="token keyword">from</span> <span class="token string">\'./file.bundle.js\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n   index<span class="token punctuation">:</span> <span class="token string">\'./App.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dest\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'[name].js\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// or whatever other format you want</span>\n    chunkFilename<span class="token punctuation">:</span> <span class="token string">\'[name].[id].js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.bundle\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          loader<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span><span class="token punctuation">,</span>\n          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            name<span class="token punctuation">:</span> <span class="token string">\'my-chunk\'</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Normal chunks will show up using the <code>filename</code> rule above, and be named according to their <code>[chunkname]</code>.</p>\n<p>Chunks from <code>bundle-loader</code>, however will load using the <code>chunkFilename</code> rule, so the example files will produce <code>my-chunk.1.js</code> and <code>file-2.js</code> respectively.</p>\n<p>You can also use <code>chunkFilename</code> to add hash values to the filename, since putting <code>[hash]</code> in the bundle options parameter does not work correctly.</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/bundle-loader/">https://webpack.js.org/loaders/bundle-loader/</a></p>\n</blockquote>\n',title:"bundle-loader"},title:"bundle-loader",url:"/loaders/bundle-loader/"},{file:{attributes:{title:"multi-loader",source:"https://raw.githubusercontent.com/webpack-contrib/multi-loader/master/README.md",edit:"https://github.com/webpack-contrib/multi-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/multi-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>This loader requires a module multiple times, each time loaded with a different loader. Like in a multi entry point the exports of the last item are exported.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i multi-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> multi <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"multi-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        <span class="token comment">// Add CSS to the DOM</span>\n        <span class="token comment">// and</span>\n        <span class="token comment">// Return the raw content</span>\n        loader<span class="token punctuation">:</span> <span class="token function">multi</span><span class="token punctuation">(</span>\n          <span class="token string">"style-loader!css-loader!autoprefixer-loader"</span><span class="token punctuation">,</span>\n          <span class="token string">"raw-loader"</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/multi-loader/">https://webpack.js.org/loaders/multi-loader/</a></p>\n</blockquote>\n',title:"multi-loader"},title:"multi-loader",url:"/loaders/multi-loader/"},{file:{attributes:{title:"node-loader",source:"https://raw.githubusercontent.com/webpack-contrib/node-loader/master/README.md",edit:"https://github.com/webpack-contrib/node-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/node-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"通过命令行（CLI）",id:"-cli-"},{title:"内联使用",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Node Add-ons for webpack</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev node-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>在 <a href="https://github.com/webpack/enhanced-require">enhanced-require</a> 中执行 <a href="https://nodejs.org/dist/latest/docs/api/addons.html">node add-ons</a></p>\n<p>通过 webpack 配置、命令行或者内联使用 loader。</p>\n<p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.node$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'node-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>在你的项目中</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> node <span class="token keyword">from</span> <span class="token string">\'file.node\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-cli-" id="-cli-"></a><span class="text">通过命令行（CLI）</span><a class="icon-link" href="#-cli-"></a></h3>\n<pre><code class="lang-bash">webpack --module-bind <span class="token string">\'node=node-loader\'</span>\n</code></pre>\n<p><strong>在你的项目中</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> node <span class="token keyword">from</span> <span class="token string">\'file.node\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">内联使用</span><a class="icon-link" href="#-"></a></h3>\n<p><strong>在你的项目中</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> node <span class="token keyword">from</span> <span class="token string">\'node-loader!./file.node\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/node-loader/">https://webpack.js.org/loaders/node-loader/</a></p>\n</blockquote>\n',title:"node-loader"},title:"node-loader",url:"/loaders/node-loader/"},{file:{attributes:{title:"null-loader",source:"https://raw.githubusercontent.com/webpack-contrib/null-loader/master/README.md",edit:"https://github.com/webpack-contrib/null-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/null-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"示例",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>A loader that returns an empty module.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i null-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p>One use for this loader is to silence modules imported by a dependency. Say, for example, your project relies on an ES6 library that imports a polyfill you don&#39;t need, so removing it will cause no loss in functionality. Test for the path to the polyfill and it won&#39;t be included in your bundle:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'node_modules/library/polyfill.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'null-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/null-loader/">https://webpack.js.org/loaders/null-loader/</a></p>\n</blockquote>\n',title:"null-loader"},title:"null-loader",url:"/loaders/null-loader/"},{file:{attributes:{title:"polymer-webpack-loader",source:"https://raw.githubusercontent.com/webpack-contrib/polymer-webpack-loader/master/README.md",edit:"https://github.com/webpack-contrib/polymer-webpack-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/polymer-webpack-loader",group:"-",anchors:[{title:"Path Translations",id:"path-translations"},{title:"Configuring the Loader",id:"configuring-the-loader"},{title:"include: Condition(s)",id:"include-condition-s-"},{title:"exclude: Condition(s)",id:"exclude-condition-s-"},{title:"Options",id:"options"},{title:"ignoreLinks: Condition(s)",id:"ignorelinks-condition-s-"},{title:"ignorePathReWrite: Condition(s)",id:"ignorepathrewrite-condition-s-"},{title:"processStyleLinks Boolean",id:"processstylelinks-boolean"},{title:"htmlLoader: Object",id:"htmlloader-object"},{title:"Use with Babel (or other JS transpilers)",id:"use-with-babel-or-other-js-transpilers-"},{title:"Use of HtmlWebpackPlugin",id:"use-of-htmlwebpackplugin"},{title:"Shimming",id:"shimming"},{title:"Boostrapping Your Application",id:"boostrapping-your-application"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p><a href="https://badge.fury.io/js/polymer-webpack-loader"><img src="https://badge.fury.io/js/polymer-webpack-loader.svg" alt="npm version"></a>\n<a href="https://travis-ci.org/webpack-contrib/polymer-webpack-loader"><img src="https://travis-ci.org/webpack-contrib/polymer-webpack-loader.svg?branch=master" alt="build status"></a></p>\n<blockquote>\n<p><a href="https://www.polymer-project.org/">Polymer</a> component loader for <a href="https://webpack.js.org/">webpack</a>.</p>\n</blockquote>\n<p>The loader allows you to write mixed HTML, CSS and JavaScript Polymer elements and\nstill use the full webpack ecosystem including module bundling and code splitting.</p>\n<p><img width="1024" alt="" src="https://user-images.githubusercontent.com/1066253/28131928-3b257288-66f0-11e7-8295-cb968cefb040.png"></p>\n<p>The loader transforms your components:</p>\n<ul>\n<li><code>&lt;link rel=&quot;import&quot; href=&quot;./my-other-element.html&quot;&gt;</code> -&gt; <code>import &#39;./my-other-element.html&#39;;</code></li>\n<li><code>&lt;dom-module&gt;</code> becomes a string which is registered at runtime</li>\n<li><code>&lt;script src=&quot;./other-script.js&quot;&gt;&lt;/script&gt;</code> -&gt; <code>import &#39;./other-script.js&#39;;</code></li>\n<li><p><code>&lt;script&gt;/* contents */&lt;/script&gt;</code> -&gt; <code>/* contents */</code></p>\n<p>What does that mean?</p>\n<p>Any <code>&lt;link&gt;</code> &quot;href&quot; or <code>&lt;script&gt;</code> &quot;src&quot; that is <strong>not an external link</strong> and does not start with <code>~</code>, <code>/</code>, <code>./</code> or a series of <code>../</code> will have <code>./</code> appended to the beginning of the value. To prevent this change use options ignoreLinks below.</p>\n</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#path-translations" id="path-translations"></a><span class="text">Path Translations</span><a class="icon-link" href="#path-translations"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th"><code>tag</code></div><div class="table-th"><code>import</code></div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>tag</code>\n    </div>\n    <div class="table-td-content">\n        <code>&lt;link rel=&quot;import&quot; href=&quot;path/to/some-element.html&quot;&gt;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import</code>\n    </div>\n    <div class="table-td-content">\n        <code>import &quot;./path/to/some-element.html&quot;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>tag</code>\n    </div>\n    <div class="table-td-content">\n        <code>&lt;link rel=&quot;import&quot; href=&quot;/path/to/some-element.html&quot;&gt;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import</code>\n    </div>\n    <div class="table-td-content">\n        <code>import &quot;/path/to/some-element.html&quot;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>tag</code>\n    </div>\n    <div class="table-td-content">\n        <code>&lt;link rel=&quot;import&quot; href=&quot;../path/to/some-element.html&quot;&gt;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import</code>\n    </div>\n    <div class="table-td-content">\n        <code>import &quot;../path/to/some-element.html&quot;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>tag</code>\n    </div>\n    <div class="table-td-content">\n        <code>&lt;link rel=&quot;import&quot; href=&quot;./path/to/some-element.html&quot;&gt;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import</code>\n    </div>\n    <div class="table-td-content">\n        <code>import &quot;./path/to/some-element.html&quot;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>tag</code>\n    </div>\n    <div class="table-td-content">\n        <code>&lt;link rel=&quot;import&quot; href=&quot;~path/to/some-element.html&quot;&gt;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import</code>\n    </div>\n    <div class="table-td-content">\n        <code>import &quot;~path/to/some-element.html&quot;</code>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h2 class="header"><a class="anchor" href="#configuring-the-loader" id="configuring-the-loader"></a><span class="text">Configuring the Loader</span><a class="icon-link" href="#configuring-the-loader"></a></h2>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> <span class="token function">Condition</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  exclude<span class="token punctuation">:</span> <span class="token function">Condition</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    ignoreLinks<span class="token punctuation">:</span> <span class="token function">Condition</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    ignorePathReWrite<span class="token punctuation">:</span> <span class="token function">Condition</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    processStyleLinks<span class="token punctuation">:</span> Boolean <span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    htmlLoader<span class="token punctuation">:</span> Object <span class="token punctuation">(</span>optional<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'polymer-webpack-loader\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#include-condition-s-" id="include-condition-s-"></a><span class="text">include: Condition(s)</span><a class="icon-link" href="#include-condition-s-"></a></h3>\n<p>See [Rule.include] and [Condition] in the webpack documentation. Paths\nmatching this option will be processed by polymer-webpack-loader.  WARNING: If\nthis property exists the loader will only process files matching the given\nconditions. If your component has a <code>&lt;link&gt;</code> pointing to a component e.g. in\nanother directory, the <code>include</code> condition(s) MUST also match that directory.</p>\n<h3 class="header"><a class="anchor" href="#exclude-condition-s-" id="exclude-condition-s-"></a><span class="text">exclude: Condition(s)</span><a class="icon-link" href="#exclude-condition-s-"></a></h3>\n<p>See [Rule.exclude] and [Condition] in the webpack documentation. Paths\nmatching this option will be excluded from processing by\npolymer-webpack-loader. NOTE: Files imported through a <code>&lt;link&gt;</code> will not be\nexcluded by this property. See <code>Options.ignoreLinks</code>.</p>\n<h3 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h3>\n<h4 class="header"><a class="anchor" href="#ignorelinks-condition-s-" id="ignorelinks-condition-s-"></a><span class="text">ignoreLinks: Condition(s)</span><a class="icon-link" href="#ignorelinks-condition-s-"></a></h4>\n<p><code>&lt;link&gt;</code>s pointing to paths matching these conditions (see [Condition] in the\nwebpack documentation) will not be transformed into <code>import</code>s.</p>\n<h4 class="header"><a class="anchor" href="#ignorepathrewrite-condition-s-" id="ignorepathrewrite-condition-s-"></a><span class="text">ignorePathReWrite: Condition(s)</span><a class="icon-link" href="#ignorepathrewrite-condition-s-"></a></h4>\n<p><code>&lt;link&gt;</code> paths matching these conditions (see [Condition] in the webpack\ndocumentation) will not be changed when transformed into <code>import</code>s. This can\nbe useful for respecting aliases, loader syntax (e.g.\n<code>markup-inline-loader!./my-element.html</code>), or module paths.</p>\n<h4 class="header"><a class="anchor" href="#processstylelinks-boolean" id="processstylelinks-boolean"></a><span class="text">processStyleLinks Boolean</span><a class="icon-link" href="#processstylelinks-boolean"></a></h4>\n<p>If set to true the loader will rewrite <code>&lt;link import=&quot;css&quot; href=&quot;...&quot;&gt;</code> or <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code> that are inside the dom-module with <code>&lt;style&gt;require(&#39;...&#39;)&lt;/style&gt;</code>. This will allow for the file to be processed by loaders that are set up in the webpack config to handle their file type.</p>\n<ol>\n<li>Any <code>&lt;link&gt;</code> that is inside the <code>&lt;dom-module&gt;</code> but not in the <code>&lt;template&gt;</code> will be added to the <code>&lt;template&gt;</code> in the order the tags appear in the file.</li>\n</ol>\n<pre><code class="lang-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dom-module</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file1.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file2.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dom-module</span><span class="token punctuation">></span></span>\n\n  would produce\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dom-module</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'file1.css\'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'file2.css\'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dom-module</span><span class="token punctuation">></span></span>\n</code></pre>\n<ol>\n<li>The loader will only replace a <code>&lt;link&gt;</code> if the href is a relative path. Any link attempting to access an external link i.e. <code>http</code>, <code>https</code> or <code>//</code> will not be replaced.</li>\n</ol>\n<h4 class="header"><a class="anchor" href="#htmlloader-object" id="htmlloader-object"></a><span class="text">htmlLoader: Object</span><a class="icon-link" href="#htmlloader-object"></a></h4>\n<p>Options to pass to the html-loader. See <a href="/loaders/html-loader/">html-loader</a>.</p>\n<h3 class="header"><a class="anchor" href="#use-with-babel-or-other-js-transpilers-" id="use-with-babel-or-other-js-transpilers-"></a><span class="text">Use with Babel (or other JS transpilers)</span><a class="icon-link" href="#use-with-babel-or-other-js-transpilers-"></a></h3>\n<p>If you&#39;d like to transpile the contents of your element&#39;s <code>&lt;script&gt;</code> block you can <a href="https://webpack.js.org/configuration/module/#rule-use">chain an additional loader</a>.</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n      use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// Chained loaders are applied last to first</span>\n        <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'polymer-webpack-loader\'</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// alternative syntax</span>\n\nmodule<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n      <span class="token comment">// Chained loaders are applied right to left</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader!polymer-webpack-loader\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#use-of-htmlwebpackplugin" id="use-of-htmlwebpackplugin"></a><span class="text">Use of HtmlWebpackPlugin</span><a class="icon-link" href="#use-of-htmlwebpackplugin"></a></h3>\n<p>Depending on how you configure the HtmlWebpackPlugin you may encounter conflicts with the polymer-webpack-loader.</p>\n<p>Example:</p>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'html-loader\'</span><span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./index.html\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'polymer-webpack-loader\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>This would expose your index.html file to the polymer-webpack-loader based on the process used by the html-loader. In this case you would need to exclude your html file from the polymer-webpack-loader or look for other ways to avoid this conflict. See: <a href="https://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md">html-webpack-plugin template options</a></p>\n<h2 class="header"><a class="anchor" href="#shimming" id="shimming"></a><span class="text">Shimming</span><a class="icon-link" href="#shimming"></a></h2>\n<p>Not all Polymer Elements have been written to execute as a module and will\nrequire changes to work with webpack. The most common issue encountered is because modules do not execute\nin the global scope. Variables, functions and classes will no longer be global unless\nthey are declared as properties on the global object (window).</p>\n<pre><code class="lang-js"><span class="token keyword">class</span> <span class="token class-name">MyElement</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// I\'m not global anymore</span>\nwindow<span class="token punctuation">.</span>myElement <span class="token operator">=</span> MyElement<span class="token punctuation">;</span> <span class="token comment">// Now I\'m global again</span>\n</code></pre>\n<p>For external library code, webpack provides <a href="https://webpack.js.org/guides/shimming/">shimming options</a>.</p>\n<ul>\n<li>Use the <a href="https://webpack.js.org/guides/shimming/#exports-loader">exports-loader</a> to\nadd a module export to components which expect a symbol to be global.</li>\n<li>Use the <a href="https://webpack.js.org/guides/shimming/#imports-loader">imports-loader</a> when a script\nexpects the <code>this</code> keyword to reference <code>window</code>.</li>\n<li>Use the <a href="https://webpack.js.org/guides/shimming/#provideplugin">ProvidePlugin</a> to add a module\nimport statement when a script expects a variable to be globally defined (but is now a module export).</li>\n<li>Use the <a href="https://webpack.js.org/plugins/normal-module-replacement-plugin/">NormalModuleReplacementPlugin</a>\nto have webpack swap a module-compliant version for a script.</li>\n</ul>\n<p>You may need to apply multiple shimming techniques to the same component.</p>\n<h2 class="header"><a class="anchor" href="#boostrapping-your-application" id="boostrapping-your-application"></a><span class="text">Boostrapping Your Application</span><a class="icon-link" href="#boostrapping-your-application"></a></h2>\n<p>The webcomponent polyfills must be added in a specific order. If you do not delay loading the main bundle with your components, you will see the following exceptions in the browser console:</p>\n<pre><code>Uncaught TypeError: Failed to construct <span class="token string">\'HTMLElement\'</span><span class="token keyword">:</span> Please use the <span class="token string">\'new\'</span> operator, this DOM object constructor cannot be called as a function.\n</code></pre><p>Reference the <a href="https://github.com/webpack-contrib/polymer-webpack-loader/blob/master/demo/src/index.ejs">demo html file</a>\nfor the proper loading sequence.</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/bryandcoulter"></p>\n<p><img width="150" height="150" src="https://avatars.githubusercontent.com/u/18359726?v=3"></p>\n<p></br></p>\n<pre><code>      Bryan Coulter\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/ChadKillingsworth"></p>\n<p><img width="150" height="150" src="https://avatars.githubusercontent.com/u/1247639?v=3"></p>\n<p></br></p>\n<pre><code>      Chad Killingsworth\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/robdodson"></p>\n<p><img width="150" height="150" src="https://avatars.githubusercontent.com/u/1066253?v=3"></p>\n<p></br></p>\n<pre><code>      Rob Dodson\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"polymer-webpack-loader"},title:"polymer-webpack-loader",url:"/loaders/polymer-webpack-loader/"},{file:{attributes:{title:"postcss-loader",source:"https://raw.githubusercontent.com/postcss/postcss-loader/master/README.md",edit:"https://github.com/postcss/postcss-loader/edit/master/README.md",repo:"https://github.com/postcss/postcss-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Config Cascade",id:"config-cascade"},{title:"Options",id:"options"},{title:"Exec",id:"exec"},{title:"Config",id:"config"},{title:"Path",id:"path"},{title:"Context (ctx)",id:"context-ctx-"},{title:"Plugins",id:"plugins"},{title:"Syntaxes",id:"syntaxes"},{title:"Parser",id:"parser"},{title:"Syntax",id:"syntax"},{title:"Stringifier",id:"stringifier"},{title:"SourceMap",id:"sourcemap"},{title:"'inline'",id:"-inline-"},{title:"Examples",id:"examples"},{title:"Stylelint",id:"stylelint"},{title:"CSS Modules",id:"css-modules"},{title:"CSS-in-JS",id:"css-in-js"},{title:"[Extract CSS][ExtractPlugin]",id:"-extract-css-extractplugin-"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>  <p>Loader for <a href="http://webpack.js.org/">webpack</a> to process CSS with <a href="http://postcss.org/">PostCSS</a></p>\n</div></p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i -D postcss-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>##</p>\n<p><strong>postcss.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  parser<span class="token punctuation">:</span> <span class="token string">\'sugarss\'</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">\'postcss-import\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'postcss-cssnext\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'cssnano\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>You can read more about common PostCSS Config <a href="https://github.com/michael-ciniawsky/postcss-load-config">here</a>.</p>\n<h3 class="header"><a class="anchor" href="#config-cascade" id="config-cascade"></a><span class="text"><code>Config Cascade</code></span><a class="icon-link" href="#config-cascade"></a></h3>\n<p>You can use different <code>postcss.config.js</code> files in different directories.\nConfig lookup starts from <code>path.dirname(file)</code> and walks the file tree upwards until a config file is found.</p>\n<pre><code><span class="token operator">|</span>– components\n<span class="token operator">|</span> <span class="token operator">|</span>– component\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– index.js\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– index.png\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– style.css <span class="token punctuation">(</span>1<span class="token punctuation">)</span>\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– postcss.config.js <span class="token punctuation">(</span>1<span class="token punctuation">)</span>\n<span class="token operator">|</span> <span class="token operator">|</span>– component\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– index.js\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– image.png\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– style.css <span class="token punctuation">(</span>2<span class="token punctuation">)</span>\n<span class="token operator">|</span>\n<span class="token operator">|</span>– postcss.config.js <span class="token punctuation">(</span>1 <span class="token operator">&amp;&amp;</span> 2 <span class="token punctuation">(</span>recommended<span class="token punctuation">))</span>\n<span class="token operator">|</span>– webpack.config.js\n<span class="token operator">|</span>\n<span class="token operator">|</span>– package.json\n</code></pre><p>After setting up your <code>postcss.config.js</code>, add <code>postcss-loader</code> to your <code>webpack.config.js</code>. You can use it standalone or in conjunction with <code>css-loader</code> (recommended). Use it <strong>after</strong> <code>css-loader</code> and <code>style-loader</code>, but <strong>before</strong> other preprocessor loaders like e.g <code>sass|less|stylus-loader</code>, if you use any.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'postcss-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>⚠️  When <code>postcss-loader</code> is used standalone (without <code>css-loader</code>) don&#39;t use <code>@import</code> in your CSS, since this can lead to quite bloated bundles</p>\n</blockquote>\n<p><strong>webpack.config.js (recommended)</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> importLoaders<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'postcss-loader\'</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#exec"><code>exec</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable PostCSS Parser support in <code>CSS-in-JS</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#syntaxes"><code>parser</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set PostCSS Parser\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#syntaxes"><code>syntax</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set PostCSS Syntax\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#syntaxes"><code>stringifier</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set PostCSS Stringifier\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#config"><code>config</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set <code>postcss.config.js</code> config path &amp;&amp; <code>ctx</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#plugins"><code>plugins</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Array|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set PostCSS Plugins\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#sourceMap"><code>sourceMap</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable Source Maps\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#exec" id="exec"></a><span class="text"><code>Exec</code></span><a class="icon-link" href="#exec"></a></h3>\n<p>If you use JS styles without the [<code>postcss-js</code>][postcss-js] parser, add the <code>exec</code> option.</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.style.js$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> importLoaders<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> parser<span class="token punctuation">:</span> <span class="token string">\'sugarss\'</span><span class="token punctuation">,</span> exec<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#config" id="config"></a><span class="text"><code>Config</code></span><a class="icon-link" href="#config"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#path"><code>path</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        PostCSS Config Path\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#context"><code>context</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        PostCSS Config Context\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h4 class="header"><a class="anchor" href="#path" id="path"></a><span class="text"><code>Path</code></span><a class="icon-link" href="#path"></a></h4>\n<p>You can manually specify the path to search for your config (<code>postcss.config.js</code>) with the <code>config.path</code> option. This is needed if you store your config  in a separate e.g <code>./config || ./.config</code> folder.</p>\n<blockquote>\n<p>⚠️  Otherwise it is <strong>unnecessary</strong> to set this option and is <strong>not</strong> recommended</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    config<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      path<span class="token punctuation">:</span> <span class="token string">\'path/to/postcss.config.js\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#context-ctx-" id="context-ctx-"></a><span class="text"><code>Context (ctx)</code></span><a class="icon-link" href="#context-ctx-"></a></h4>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>env</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>&#39;development&#39;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        <code>process.env.NODE_ENV</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>file</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>loader.resourcePath</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        <code>extname</code>, <code>dirname</code>, <code>basename</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>options</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>{}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Options\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p><code>postcss-loader</code> exposes context <code>ctx</code> to the config file, making your <code>postcss.config.js</code> dynamic, so can use it to do some real magic ✨</p>\n<p><strong>postcss.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> file<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  parser<span class="token punctuation">:</span> file<span class="token punctuation">.</span>extname <span class="token operator">===</span> <span class="token string">\'.sss\'</span> <span class="token operator">?</span> <span class="token string">\'sugarss\'</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">\'postcss-import\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> root<span class="token punctuation">:</span> file<span class="token punctuation">.</span>dirname <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'postcss-cssnext\'</span><span class="token punctuation">:</span> options<span class="token punctuation">.</span>cssnext <span class="token operator">?</span> options<span class="token punctuation">.</span>cssnext <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token string">\'autoprefixer\'</span><span class="token punctuation">:</span> env <span class="token operator">==</span> <span class="token string">\'production\'</span> <span class="token operator">?</span> options<span class="token punctuation">.</span>autoprefixer <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token string">\'cssnano\'</span><span class="token punctuation">:</span> env <span class="token operator">===</span> <span class="token string">\'production\'</span> <span class="token operator">?</span> options<span class="token punctuation">.</span>cssnano <span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    config<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      ctx<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        cssnext<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">}</span><span class="token punctuation">,</span>\n        cssnano<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">}</span><span class="token punctuation">,</span>\n        autoprefixer<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#plugins" id="plugins"></a><span class="text"><code>Plugins</code></span><a class="icon-link" href="#plugins"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    ident<span class="token punctuation">:</span> <span class="token string">\'postcss\'</span><span class="token punctuation">,</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">(</span>loader<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span> root<span class="token punctuation">:</span> loader<span class="token punctuation">.</span>resourcePath <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-cssnext\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'autoprefixer\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cssnano\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>⚠️  webpack requires an identifier (<code>ident</code>) in <code>options</code> when <code>{Function}/require</code> is used (Complex Options). The <code>ident</code> can be freely named as long as it is unique. It&#39;s recommended to name it (<code>ident: &#39;postcss&#39;</code>)</p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#syntaxes" id="syntaxes"></a><span class="text"><code>Syntaxes</code></span><a class="icon-link" href="#syntaxes"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#parser"><code>parser</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Custom PostCSS Parser\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#syntax"><code>syntax</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Custom PostCSS Syntax\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#stringifier"><code>stringifier</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Custom PostCSS Stringifier\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h4 class="header"><a class="anchor" href="#parser" id="parser"></a><span class="text"><code>Parser</code></span><a class="icon-link" href="#parser"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.sss$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> parser<span class="token punctuation">:</span> <span class="token string">\'sugarss\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#syntax" id="syntax"></a><span class="text"><code>Syntax</code></span><a class="icon-link" href="#syntax"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> syntax<span class="token punctuation">:</span> <span class="token string">\'sugarss\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#stringifier" id="stringifier"></a><span class="text"><code>Stringifier</code></span><a class="icon-link" href="#stringifier"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> stringifier<span class="token punctuation">:</span> <span class="token string">\'midas\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#sourcemap" id="sourcemap"></a><span class="text"><code>SourceMap</code></span><a class="icon-link" href="#sourcemap"></a></h3>\n<p>Enables source map support, <code>postcss-loader</code> will use the previous source map given by other loaders and update it accordingly, if no previous loader is applied before <code>postcss-loader</code>, the loader will generate a source map for you.</p>\n<blockquote>\n<p>:warning: If a previous loader like e.g <code>sass-loader</code> is applied and it&#39;s <code>sourceMap</code> option is set, but the <code>sourceMap</code> option in <code>postcss-loader</code> is omitted, previous source maps will be discarded by <code>postcss-loader</code> <strong>entirely</strong>.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#-inline-" id="-inline-"></a><span class="text"><code>&#39;inline&#39;</code></span><a class="icon-link" href="#-inline-"></a></h4>\n<p>You can set the <code>sourceMap: &#39;inline&#39;</code> option to inline the source map\nwithin the CSS directly as an annotation comment.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sourceMap<span class="token punctuation">:</span> <span class="token string">\'inline\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-css"><span class="token selector"><span class="token class">.class</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">/*# sourceMappingURL=data:application/json;base64, ... */</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<h3 class="header"><a class="anchor" href="#stylelint" id="stylelint"></a><span class="text"><code>Stylelint</code></span><a class="icon-link" href="#stylelint"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        ident<span class="token punctuation">:</span> <span class="token string">\'postcss\'</span><span class="token punctuation">,</span>\n        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'stylelint\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#css-modules" id="css-modules"></a><span class="text"><code>CSS Modules</code></span><a class="icon-link" href="#css-modules"></a></h3>\n<p>This loader [cannot be used] with [CSS Modules] out of the box due\nto the way <code>css-loader</code> processes file imports. To make them work properly,\neither add the css-loader’s [<code>importLoaders</code>] option.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> modules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> importLoaders<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'postcss-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>or use [postcss-modules] instead of <code>css-loader</code>.</p>\n<h3 class="header"><a class="anchor" href="#css-in-js" id="css-in-js"></a><span class="text"><code>CSS-in-JS</code></span><a class="icon-link" href="#css-in-js"></a></h3>\n<p>If you want to process styles written in JavaScript, use the [postcss-js] parser.</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.style.js$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> importLoaders<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> parser<span class="token punctuation">:</span> <span class="token string">\'postcss-js\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'babel-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>As result you will be able to write styles in the following way</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> colors <span class="token keyword">from</span> <span class="token string">\'./styles/colors\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    <span class="token string">\'.menu\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      color<span class="token punctuation">:</span> colors<span class="token punctuation">.</span>main<span class="token punctuation">,</span>\n      height<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>\n      <span class="token string">\'&amp;_link\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      color<span class="token punctuation">:</span> <span class="token string">\'white\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>:warning: If you are using Babel you need to do the following in order for the setup to work</p>\n<ol>\n<li>Add [babel-plugin-add-module-exports] to your configuration</li>\n<li>You need to have only one <strong>default</strong> export per style module</li>\n</ol>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#-extract-css-extractplugin-" id="-extract-css-extractplugin-"></a><span class="text">[Extract CSS][ExtractPlugin]</span><a class="icon-link" href="#-extract-css-extractplugin-"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          fallback<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> importLoaders<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token string">\'postcss-loader\'</span>\n          <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'[name].css\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"postcss-loader"},title:"postcss-loader",url:"/loaders/postcss-loader/"},{file:{attributes:{title:"raw-loader",source:"https://raw.githubusercontent.com/webpack-contrib/raw-loader/master/README.md",edit:"https://github.com/webpack-contrib/raw-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/raw-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"通过命令行（CLI）",id:"-cli-"},{title:"内联使用",id:"-"},{title:"维护者",id:"-"}],contributors:[],related:[]},body:'<p>A loader for webpack that lets you import files as a string.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev raw-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>通过 webpack 配置、命令行或者内联使用 loader。</p>\n<p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.txt$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'raw-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>在你的项目中</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> txt <span class="token keyword">from</span> <span class="token string">\'./file.txt\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-cli-" id="-cli-"></a><span class="text">通过命令行（CLI）</span><a class="icon-link" href="#-cli-"></a></h3>\n<pre><code class="lang-bash">webpack --module-bind <span class="token string">\'txt=raw-loader\'</span>\n</code></pre>\n<p><strong>在你的项目中</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> txt <span class="token keyword">from</span> <span class="token string">\'file.txt\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">内联使用</span><a class="icon-link" href="#-"></a></h3>\n<p><strong>在你的项目中</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> txt <span class="token keyword">from</span> <span class="token string">\'raw-loader!./file.txt\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护者</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/raw-loader/">https://webpack.js.org/loaders/raw-loader/</a></p>\n</blockquote>\n',title:"raw-loader"},title:"raw-loader",url:"/loaders/raw-loader/"},{file:{attributes:{title:"react-proxy-loader",source:"https://raw.githubusercontent.com/webpack-contrib/react-proxy-loader/master/README.md",edit:"https://github.com/webpack-contrib/react-proxy-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/react-proxy-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"配置",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Wraps a react component in a proxy component to enable Code Splitting (loads a react component and its dependencies on demand).</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> react-proxy-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">用法</a></span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">var</span> Component <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"react-proxy-loader!./Component"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => 返回代理组件（它按需加载。）</span>\n<span class="token comment">// （webpack 为此组件及其依赖项创建一个额外的 chunk）</span>\n\n<span class="token keyword">var</span> ComponentProxyMixin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"react-proxy-loader!./Component"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Mixin<span class="token punctuation">;</span>\n<span class="token comment">// => 返回代理组件的 mixin</span>\n<span class="token comment">// （这允许你为 proxy 的加载状态设置渲染）</span>\n<span class="token keyword">var</span> ComponentProxy <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>ComponentProxyMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    renderUnavailable<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>Loading<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>代理是一个react组件。所有属性都将传输到包装组件。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">配置</span><a class="icon-link" href="#-"></a></h2>\n<p>代替（或除了）内联 loader 调用之外，还可以在配置中指定代理组件：</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token comment">/* ... */</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token regex">/component\\.jsx$/</span><span class="token punctuation">,</span> <span class="token comment">// select component by RegExp</span>\n                    <span class="token regex">/\\.async\\.jsx$/</span><span class="token punctuation">,</span> <span class="token comment">// select component by extension</span>\n                    <span class="token string">"/abs/path/to/component.jsx"</span> <span class="token comment">// absolute path to component</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"react-proxy-loader"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>##</p>\n<p>你可以使用 <code>name</code> 查询参数为该 chunk 提供名称：</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> Component <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"react-proxy-loader?name=chunkName!./Component"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/react-proxy-loader/">https://webpack.js.org/loaders/react-proxy-loader/</a></p>\n</blockquote>\n',title:"react-proxy-loader"},title:"react-proxy-loader",url:"/loaders/react-proxy-loader/"},{file:{attributes:{title:"restyle-loader",source:"https://raw.githubusercontent.com/webpack-contrib/restyle-loader/master/README.md",edit:"https://github.com/webpack-contrib/restyle-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/restyle-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"示例",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<div align="center"><p>Updates style <code>&lt;link&gt;</code></p>\n<p> href value with a hash to trigger a style reload</p>\n<p></div></p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev restyle-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p><a href="https://webpack.js.org/loaders/">文档：使用 loader</a></p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css?$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">"restyle-loader"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        name<span class="token punctuation">:</span> <span class="token string">"[name].css?[hash:8]"</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>hash 需要启用热模块替换(Hot Module Replacement)</p>\n<p><strong>bundle.js</strong></p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./index.css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在这里打包代码...</span>\n</code></pre>\n<p><strong>index.html</strong></p>\n<pre><code class="lang-html">\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>loader 运行后就变成</p>\n<pre><code class="lang-html">\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/index.css?531fdfd0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/"></p>\n<p><img width="150" height="150" src="https://avatars2.githubusercontent.com/u/7072732?v=3&s=150"></p>\n<p><br /></p>\n<p><a href="https://github.com/"></p>\n<p>Daniel Verejan</p>\n<p></a></p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/restyle-loader/">https://webpack.js.org/loaders/restyle-loader/</a></p>\n</blockquote>\n',title:"restyle-loader"},title:"restyle-loader",url:"/loaders/restyle-loader/"},{file:{attributes:{title:"sass-loader",source:"https://raw.githubusercontent.com/webpack-contrib/sass-loader/master/README.md",edit:"https://github.com/webpack-contrib/sass-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/sass-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"示例",id:"-"},{title:"\b使用",id:"-"},{title:"导入(Import)",id:"-import-"},{title:"url(...) 的问题",id:"url-"},{title:"提取样式表",id:"-"},{title:"Source maps",id:"source-maps"},{title:"\b环境变量",id:"-"},{title:"维护人员",id:"-"},{title:"License",id:"license"}],contributors:[],related:[]},body:'<p>Loads a SASS/SCSS file and compiles it to CSS.</p>\n<p>Use the <a href="/loaders/css-loader/">css-loader</a> or the <a href="/loaders/raw-loader/">raw-loader</a> to turn it into a JS module and the <a href="/plugins/extract-text-webpack-plugin/">ExtractTextPlugin</a> to extract it into a separate file.\nLooking for the webpack 1 loader? Check out the <a href="https://github.com/webpack-contrib/sass-loader/tree/archive/webpack-1">archive/webpack-1 branch</a>.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> sass-loader node-sass webpack --save-dev\n</code></pre>\n<p><a href="https://github.com/sass/node-sass">node-sass</a> 和 <a href="https://github.com/webpack">webpack</a> 是 sass-loader 的 <a href="https://docs.npmjs.com/files/package.json#peerdependencies"><code>peerDependency</code></a>，因此能够精确控制它们的版本。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p>通过将 <a href="https://github.com/webpack-contrib/style-loader">style-loader</a> 和 <a href="https://github.com/webpack-contrib/css-loader">css-loader</a> 与 sass-loader 链式调用，可以立刻将样式作用在 DOM 元素。</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n      use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n          loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span> <span class="token comment">// 将 JS 字符串生成为 style 节点</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span> <span class="token comment">// \b将 CSS 转化成 CommonJS 模块</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span> <span class="token comment">// 将 Sass 编译成 CSS</span>\n      <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>也可以通过指定 <code>options</code> 参数，向 <a href="https://github.com/andrew/node-sass">node-sass</a> 传递选项参数。例如：</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n      use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          includePaths<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"absolute/path/a"</span><span class="token punctuation">,</span> <span class="token string">"absolute/path/b"</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Sass 的更多选项参见 <a href="https://github.com/andrew/node-sass">node-sass</a>。</p>\n<p>##</p>\n<p>通常，生产环境下比较推荐的做法是，使用 <a href="https://github.com/webpack-contrib/extract-text-webpack-plugin">ExtractTextPlugin</a> 将样式表抽离成专门的单独文件。这样，样式表将不再依赖于 JavaScript：</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"extract-text-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> extractSass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">"[name].[contenthash].css"</span><span class="token punctuation">,</span>\n    disable<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"development"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> extractSass<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                    loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                    loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span>\n                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                <span class="token comment">// 在开发环境使用 style-loader</span>\n                fallback<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        extractSass\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">\b使用</span><a class="icon-link" href="#-"></a></h2>\n<h3 class="header"><a class="anchor" href="#-import-" id="-import-"></a><span class="text">导入(Import)</span><a class="icon-link" href="#-import-"></a></h3>\n<p>webpack 提供一种<a href="https://webpack.js.org/concepts/module-resolution/">解析文件的高级的机制</a>。sass-loader 使用 node-sass 的 custom importer 特性，将所有的 query 传递给 webpack 的解析引擎(resolving engine)。只要它们前面加上 <code>~</code>，告诉 webpack 它不是一个相对路径，这样就可以 import 导入 <code>node_modules</code> 目录里面的 sass 模块：</p>\n<pre><code class="lang-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"~bootstrap/dist/css/bootstrap"</span><span class="token punctuation">;</span></span>\n</code></pre>\n<p>重要的是，只在前面加上 <code>~</code>，因为 <code>~/</code> 会解析到主目录(home directory)。webpack 需要区分 <code>bootstrap</code> 和 <code>~bootstrap</code>，因为 CSS 和 Sass 文件没有用于导入相关文件的特殊语法。<code>@import &quot;file&quot;</code> 与 <code>@import &quot;./file&quot;;</code> 这两种写法是相同的</p>\n<h3 class="header"><a class="anchor" href="#url-" id="url-"></a><span class="text"><code>url(...)</code> 的问题</span><a class="icon-link" href="#url-"></a></h3>\n<p>由于 Sass/<a href="https://github.com/sass/libsass">libsass</a> 并没有提供<a href="https://github.com/sass/libsass/issues/532">url rewriting</a> 的功能，所以所有的链接资源都是相对输出文件(output)而言。</p>\n<ul>\n<li>如果生成的 CSS 没有传递给 css-loader，它相对于网站的根目录。</li>\n<li>如果生成的 CSS 传递给了 css-loader，则所有的 url 都相对于入口文件（例如：<code>main.scss</code>）。</li>\n</ul>\n<p>第二种情况可能会带来一些问题。正常情况下我们期望相对路径的引用是相对于 <code>.scss</code> 去解析（如同在 <code>.css</code> 文件一样）。幸运的是，有2个方法可以解决这个问题：</p>\n<ul>\n<li>将 <a href="https://github.com/bholloway/resolve-url-loader">resolve-url-loader</a> \b设置于 loader 链中的 sass-loader 之后，就可以重写 url。</li>\n<li>Library 作者一般都会提供变量，用来设置资源路径，如 <a href="https://github.com/twbs/bootstrap-sass">bootstrap-sass</a>\b 可以通过 <code>$icon-font-path</code> 来设置。参见<a href="https://github.com/webpack-contrib/sass-loader/tree/master/test/bootstrapSass">this working bootstrap example</a>。</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">提取样式表</span><a class="icon-link" href="#-"></a></h3>\n<p>使用 webpack 打包 CSS 有许多优点，在开发环境，可以通过 hashed urls 或 <a href="https://webpack.js.org/concepts/hot-module-replacement/">模块热替换(HMR)</a> 引用图片和字体资源。而在线上环境，使样式依赖 JS 执行环境并不是一个好的实践。渲染会被推迟，甚至会出现 <a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content">FOUC</a>，因此在最终线上环境构建时，最好还是能够将 CSS 放在单独的文件中。</p>\n<p>从 bundle 中提取样式表，有2种可用的方法：</p>\n<ul>\n<li><a href="https://github.com/peerigon/extract-loader">extract-loader</a> （简单，专门针对 css-loader 的输出）</li>\n<li><a href="https://github.com/webpack-contrib/extract-text-webpack-plugin">extract-text-webpack-plugin</a> (\b复杂，但能够处理足够多的场景)</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#source-maps" id="source-maps"></a><span class="text">Source maps</span><a class="icon-link" href="#source-maps"></a></h3>\n<p>要启用 CSS source map，需要将 <code>sourceMap</code> 选项作为参数，传递给 <em>sass-loader</em> 和 <em>css-loader</em>。此时<code>webpack.config.js</code>\b 如下：</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    devtool<span class="token punctuation">:</span> <span class="token string">"source-map"</span><span class="token punctuation">,</span> <span class="token comment">// any "source-map"-like devtool is possible</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>如果你要在 Chrome 中编辑原始的 Sass 文件，建议阅读<a href="https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0">这篇不错的博客文章</a>。具体示例参考 <a href="https://github.com/webpack-contrib/sass-loader/tree/master/test">test/sourceMap</a>\b。</p>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">\b环境变量</span><a class="icon-link" href="#-"></a></h3>\n<p>如果你要将 Sass 代码放在实际的入口文件(entry file)之前，可以设置 <code>data</code> 选项。此时 sass-loader 不会覆盖 <code>data</code> 选项，只会将它拼接在入口文件的内容之前。当 Sass 变量依赖于环境时，这一点尤其有用。</p>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        data<span class="token punctuation">:</span> <span class="token string">"$env: "</span> <span class="token operator">+</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">+</span> <span class="token string">";"</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>注意：</strong>由于代码注入, 会破坏整个入口文件的 source map。\b通常一个简单的解决方案是，多个 Sass 文件入口。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tr><td align="center"><p><a href="https://github.com/jhnns"></p>\n<p><img width="150" height="150" src="https://avatars0.githubusercontent.com/u/781746?v=3"></p>\n<p></a></p>\n<p><br></p>\n<p><a href="https://github.com/jhnns"></p>\n<p>Johannes Ewald</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/webpack-contrib"></p>\n<p><img width="150" height="150" src="https://avatars1.githubusercontent.com/u/1243901?v=3&s=460"></p>\n<p></a></p>\n<p><br></p>\n<p><a href="https://github.com/webpack-contrib"></p>\n<p>Jorik Tangelder</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/akiran"></p>\n<p><img width="150" height="150" src="https://avatars1.githubusercontent.com/u/3403295?v=3"></p>\n<p></a></p>\n<p><br></p>\n<p><a href="https://github.com/akiran"></p>\n<p>Kiran</p>\n<p></a></p>\n<p></td></p>\n<tr><p></table></p>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">License</span><a class="icon-link" href="#license"></a></h2>\n<p><a href="http://www.opensource.org/licenses/mit-license.php">MIT</a></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/sass-loader/">https://webpack.js.org/loaders/sass-loader/</a></p>\n</blockquote>\n',title:"sass-loader"},title:"sass-loader",url:"/loaders/sass-loader/"},{file:{attributes:{title:"script-loader",source:"https://raw.githubusercontent.com/webpack-contrib/script-loader/master/README.md",edit:"https://github.com/webpack-contrib/script-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/script-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"内联",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev script-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>在全局上下文(global context)执行一次 JS 脚本。</p>\n<blockquote>\n<p>:警告: 在 node.js 中不会运行</p>\n</blockquote>\n<p>##</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> exec <span class="token keyword">from</span> <span class="token string">\'script.exec.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.exec\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'script-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">内联</span><a class="icon-link" href="#-"></a></h3>\n<pre><code class="lang-js"><span class="token keyword">import</span> exec <span class="token keyword">from</span> <span class="token string">\'script-loader!./script.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/script-loader/">https://webpack.js.org/loaders/script-loader/</a></p>\n</blockquote>\n',title:"script-loader"},title:"script-loader",url:"/loaders/script-loader/"},{file:{attributes:{title:"source-map-loader",source:"https://raw.githubusercontent.com/webpack-contrib/source-map-loader/master/README.md",edit:"https://github.com/webpack-contrib/source-map-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/source-map-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Extracts source maps from existing source files (from their <code>sourceMappingURL</code>).</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i -D source-map-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p><a href="https://webpack.js.org/concepts/#loaders">文档：使用 loader</a></p>\n<p>##</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"source-map-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        enforce<span class="token punctuation">:</span> <span class="token string">"pre"</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>source-map-loader</code> extracts existing source maps from all JavaScript entries. This includes both inline source maps as well as those linked via URL. All source map data is passed to webpack for processing as per a chosen <a href="https://webpack.js.org/configuration/devtool/">source map style</a> specified by the <code>devtool</code> option in <a href="https://webpack.js.org/configuration/">webpack.config.js</a>.</p>\n<p>This loader is especially useful when using 3rd-party libraries having their own source maps. If not extracted and processed into the souce map of the webpack bundle, browsers may misinterpret source map data. <code>source-map-loader</code> allows webpack to maintain source map data continuity across libraries so ease of debugging is preserved.</p>\n<p><code>source-map-loader</code> will extract from any JavaScript file, including those in the <code>node_modules</code> directory. Be mindful in setting <a href="https://webpack.js.org/configuration/module/#rule-include">include</a> and <a href="https://webpack.js.org/configuration/module/#rule-exclude">exclude</a> rule conditions to maximize bundling performance.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/source-map-loader/">https://webpack.js.org/loaders/source-map-loader/</a></p>\n</blockquote>\n',title:"source-map-loader"},title:"source-map-loader",url:"/loaders/source-map-loader/"},{file:{attributes:{title:"style-loader",source:"https://raw.githubusercontent.com/webpack-contrib/style-loader/master/README.md",edit:"https://github.com/webpack-contrib/style-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/style-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"Url",id:"url"},{title:"可选的(Useable)",id:"-useable-"},{title:"引用计数器 API(Reference Counter API)",id:"-api-reference-counter-api-"},{title:"选项",id:"-"},{title:"hmr",id:"hmr"},{title:"base",id:"base"},{title:"attrs",id:"attrs"},{title:"Url",id:"url"},{title:"transform",id:"transform"},{title:"Conditional",id:"conditional"},{title:"insertAt",id:"insertat"},{title:"insertInto",id:"insertinto"},{title:"singleton",id:"singleton"},{title:"sourceMap",id:"sourcemap"},{title:"convertToAbsoluteUrls",id:"converttoabsoluteurls"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Adds CSS to the DOM by injecting a <code>&lt;style&gt;</code> tag</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> style-loader --save-dev\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">用法</a></span><a class="icon-link" href="#-"></a></h2>\n<p>建议将 <code>style-loader</code> 与 <a href="https://github.com/webpack/css-loader"><code>css-loader</code></a> 结合使用</p>\n<p><strong>component.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">\'./file.css\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>###</p>\n<p>在使用<a href="https://github.com/webpack/css-loader#css-scope">局部作用域 CSS</a> 时，模块导出生成的（局部）标识符(identifier)。</p>\n<p><strong>component.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">\'./file.css\'</span>\n\nstyle<span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">"z849f98ca812"</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#url" id="url"></a><span class="text"><code>Url</code></span><a class="icon-link" href="#url"></a></h3>\n<p>也可以添加一个URL <code>&lt;link href=&quot;path/to/file.css&quot; rel=&quot;stylesheet&quot;&gt;</code>，而不是用带有 <code>&lt;style&gt;&lt;/style&gt;</code> 标签的内联 CSS <code>{String}</code>。</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">\'file.css\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"style-loader/url"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path/to/file.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n</code></pre>\n<blockquote>\n<p>:信息来源: 使用 <code>url</code> 引用的 Source map 和资源：当 style-loader 与 <code>{ options: { sourceMap: true } }</code> 选项一起使用时，CSS 模块将生成为 <code>Blob</code>，因此相对路径无法正常工作（他们将相对于 <code>chrome:blob</code> 或 <code>chrome:devtools</code>）。为了使资源保持正确的路径，必须设置 webpack 配置中的 <code>output.publicPath</code> 属性，以便生成绝对路径。或者，你可以启用上面提到的 <code>convertToAbsoluteUrls</code> 选项。</p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#-useable-" id="-useable-"></a><span class="text"><code>可选的(Useable)</code></span><a class="icon-link" href="#-useable-"></a></h3>\n<p>按照惯例，<code>引用计数器 API(Reference Counter API)</code> 应关联到 <code>.useable.css</code>，而 <code>.css</code> 的载入，应该使用基本的 <code>style-loader</code> 用法（类似于其他文件类型，例如 <code>.useable.less</code> 和 <code>.less</code>）。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.useable\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">"style-loader/useable"</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#-api-reference-counter-api-" id="-api-reference-counter-api-"></a><span class="text"><code>引用计数器 API(Reference Counter API)</code></span><a class="icon-link" href="#-api-reference-counter-api-"></a></h4>\n<p><strong>component.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">\'./file.css\'</span>\n\nstyle<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// = style.ref();</span>\nstyle<span class="token punctuation">.</span><span class="token function">unuse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// = style.unref();</span>\n</code></pre>\n<p>样式不会添加在 <code>import/require()</code> 上，而是在调用 <code>use</code>/<code>ref</code> 时添加。如果 <code>unuse</code>/<code>unref</code> 与 <code>use</code>/<code>ref</code> 一样频繁地被调用，那么样式将从页面中删除。</p>\n<p>:警告: 当 <code>unuse</code>/<code>unref</code> 比 <code>use</code>/<code>ref</code> 调用频繁的时候，产生的行为是不确定的。所以不要这样做。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">名称</div><div class="table-th">类型</div><div class="table-th">默认值</div><div class="table-th">描述</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>hmr</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        Enable/disable Hot Module Replacement (HMR), if disabled no HMR Code will be added (good for non local development/production)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>base</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        设置模块 ID 基础 (DLLPlugin)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>attrs</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>{}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        添加自定义 attrs 到 <code>&lt;style&gt;&lt;/style&gt;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>transform</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        转换/条件加载 CSS，通过传递转换/条件函数\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>insertAt</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>bottom</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        在给定位置处插入 <code>&lt;style&gt;&lt;/style&gt;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>insertInto</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>&lt;head&gt;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        给定位置中插入 <code>&lt;style&gt;&lt;/style&gt;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>sourceMap</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        启用/禁用 Sourcemap\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        名称\n    </div>\n    <div class="table-td-content">\n        <strong><code>convertToAbsoluteUrls</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        类型\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        默认值\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        描述\n    </div>\n    <div class="table-td-content">\n        启用 source map 后，将相对 URL 转换为绝对 URL\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#hmr" id="hmr"></a><span class="text"><code>hmr</code></span><a class="icon-link" href="#hmr"></a></h3>\n<p>Enable/disable Hot Module Replacement (HMR), if disabled no HMR Code will be added.\nThis could be used for non local development and production.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    hmr<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#base" id="base"></a><span class="text"><code>base</code></span><a class="icon-link" href="#base"></a></h3>\n<p>当使用一个或多个 <a href="https://robertknight.github.io/posts/webpack-dll-plugins/">DllPlugin</a> 时，此设置主要用作 <a href="https://github.com/webpack-contrib/style-loader/issues/163">css 冲突</a> 的修补方案。<code>base</code> 可以防止 <em>app</em> 的 css（或 <em>DllPlugin2</em> 的 css）覆盖 <em>DllPlugin1</em> 的 css，方法是指定一个 css 模块的 id 大于 <em>DllPlugin1</em> 的范围，例如：</p>\n<p><strong>webpack.dll1.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'css-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>webpack.dll2.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> base<span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'css-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>webpack.app.config.js</strong></p>\n<pre><code><span class="token punctuation">{</span>\n  test: /\\.css$/,\n  use: <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> loader: <span class="token string">\'style-loader\'</span>, options: <span class="token punctuation">{</span> base: 2000 <span class="token punctuation">}</span> <span class="token punctuation">}</span>,\n    <span class="token string">\'css-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><h3 class="header"><a class="anchor" href="#attrs" id="attrs"></a><span class="text"><code>attrs</code></span><a class="icon-link" href="#attrs"></a></h3>\n<p>如果已定义，style-loader 将把属性值附加在 <code>&lt;style&gt;</code> / <code>&lt;link&gt;</code> 元素上。</p>\n<p><strong>component.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">\'./file.css\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> attrs<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">\'id\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#url" id="url"></a><span class="text"><code>Url</code></span><a class="icon-link" href="#url"></a></h4>\n<p><strong>component.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> link <span class="token keyword">from</span> <span class="token string">\'./file.css\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'style-loader/url\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> attrs<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">\'id\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#transform" id="transform"></a><span class="text"><code>transform</code></span><a class="icon-link" href="#transform"></a></h3>\n<p><code>transform</code> 是一个函数，可以在通过 style-loader 加载到页面之前修改 css。\n该函数将在即将加载的 css 上调用，函数的返回值将被加载到页面，而不是原始的 css 中。\n如果 <code>transform</code> 函数的返回值是 falsy 值，那么 css 根本就不会加载到页面中。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    transform<span class="token punctuation">:</span> <span class="token string">\'path/to/transform.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>transform.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>css<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Here we can change the original css</span>\n  <span class="token keyword">const</span> transformed <span class="token operator">=</span> css<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">\'.classNameA\'</span><span class="token punctuation">,</span> <span class="token string">\'.classNameB\'</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> transformed\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#conditional" id="conditional"></a><span class="text"><code>Conditional</code></span><a class="icon-link" href="#conditional"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    transform<span class="token punctuation">:</span> <span class="token string">\'path/to/conditional.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>conditional.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>css<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果条件匹配则加载[和转换] CSS</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>css<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'something I want to check\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> css<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 如果返回 falsy 值，则不会加载 CSS</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#insertat" id="insertat"></a><span class="text"><code>insertAt</code></span><a class="icon-link" href="#insertat"></a></h3>\n<p>默认情况下，style-loader 将 <code>&lt;style&gt;</code> 元素附加到样式目标(style target)的末尾，即页面的 <code>&lt;head&gt;</code> 标签，也可以是由 <code>insertInto</code> 指定其他标签。这将导致 loader 创建的 CSS 优先于目标中已经存在的 CSS。要在目标的起始处插入 style 元素，请将此查询参数(query parameter)设置为 &#39;top&#39;，例如</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    insertAt<span class="token punctuation">:</span> <span class="token string">\'top\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>A new <code>&lt;style&gt;</code> element can be inserted before a specific element by passing an object, e.g.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    insertAt<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        before<span class="token punctuation">:</span> <span class="token string">\'#id\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#insertinto" id="insertinto"></a><span class="text"><code>insertInto</code></span><a class="icon-link" href="#insertinto"></a></h3>\n<p>默认情况下，样式加载器将 <code>&lt;style&gt;</code> 元素插入到页面的 <code>&lt;head&gt;</code> 标签中。如果要将标签插入到其他位置，可以在这里为该元素指定 CSS 选择器。如果你想要插入到 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement">IFrame</a> 中，请确保你具有足够的访问权限，样式将被注入到内容文档的 head 中。\n你还可以将样式插入到 <a href="https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot">ShadowRoot</a> 中，如下</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    insertInto<span class="token punctuation">:</span> <span class="token string">\'#host::shadow>#root\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#singleton" id="singleton"></a><span class="text"><code>singleton</code></span><a class="icon-link" href="#singleton"></a></h3>\n<p>如果已定义，则 style-loader 将重用单个 <code>&lt;style&gt;</code> 元素，而不是为每个所需的模块添加/删除单个元素。</p>\n<blockquote>\n<p>ℹ️  默认情况下启用此选项，IE9 对页面上允许的 style 标签数量有严格的限制。你可以使用 singleton 选项来启用或禁用它。</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    singleton<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#sourcemap" id="sourcemap"></a><span class="text"><code>sourceMap</code></span><a class="icon-link" href="#sourcemap"></a></h3>\n<p>启用/禁用 source map 加载</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#converttoabsoluteurls" id="converttoabsoluteurls"></a><span class="text"><code>convertToAbsoluteUrls</code></span><a class="icon-link" href="#converttoabsoluteurls"></a></h3>\n<p>如果 convertToAbsoluteUrls 和 sourceMaps 都启用，那么相对 url 将在 css 注入页面之前，被转换为绝对 url。这解决了在启用 source map 时，相对资源无法加载的<a href="https://github.com/webpack/style-loader/pull/96">问题</a>。你可以使用 convertToAbsoluteUrls 选项启用它。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    convertToAbsoluteUrls<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/sapegin"></p>\n<p><img width="150" height="150" src="https://github.com/sapegin.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Artem Sapegin\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tr><td align="center"><p><a href="https://github.com/sokra"></p>\n<p><img width="150" height="150" src="https://github.com/sokra.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Tobias Koppers\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/SpaceK33z"></p>\n<p><img width="150" height="150" src="https://github.com/SpaceK33z.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Kees Kluskens\n</code></pre><p></a></p>\n<p></td></p>\n<tr><tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/style-loader/">https://webpack.js.org/loaders/style-loader/</a></p>\n</blockquote>\n',title:"style-loader"},title:"style-loader",url:"/loaders/style-loader/"},{file:{attributes:{title:"svg-inline-loader",source:"https://raw.githubusercontent.com/webpack-contrib/svg-inline-loader/master/README.md",edit:"https://github.com/webpack-contrib/svg-inline-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/svg-inline-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"配置",id:"-"},{title:"Query 选项",id:"query-"},{title:"removingTags: [...string]",id:"removingtags-string-"},{title:"warnTags: [...string]",id:"warntags-string-"},{title:"removeSVGTagAttrs: boolean",id:"removesvgtagattrs-boolean"},{title:"removingTagAttrs: [...string]",id:"removingtagattrs-string-"},{title:"warnTagAttrs: [...string]",id:"warntagattrs-string-"},{title:"classPrefix: boolean || string",id:"classprefix-boolean-string"},{title:"idPrefix: boolean || string",id:"idprefix-boolean-string"},{title:"使用示例",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>This Webpack loader inlines SVG as module. If you use Adobe suite or Sketch to export SVGs, you will get auto-generated, unneeded crusts. This loader removes it for you, too.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> svg-inline-loader --save-dev\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">配置</span><a class="icon-link" href="#-"></a></h2>\n<p>只需加载配置对象到 <code>module.loaders</code> 像下面这样。</p>\n<pre><code class="lang-javascript">    <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.svg$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'svg-inline-loader\'</span>\n    <span class="token punctuation">}</span>\n</code></pre>\n<p>警告: 这个loader你应只配置一次，通过 <code>module.loaders</code> 或者 <code>require(&#39;!...&#39;)</code> 配置。 更多细节参考 <a href="https://github.com/webpack-contrib/svg-inline-loader/issues/15">#15</a>。</p>\n<h2 class="header"><a class="anchor" href="#query-" id="query-"></a><span class="text">Query 选项</span><a class="icon-link" href="#query-"></a></h2>\n<p>###</p>\n<p>删除指定的标签和它的子元素，你可以指定标签通过设置 <code>removingTags</code> 查询多个。</p>\n<p>默认值: <code>removeTags: false</code></p>\n<h4 class="header"><a class="anchor" href="#removingtags-string-" id="removingtags-string-"></a><span class="text"><code>removingTags: [...string]</code></span><a class="icon-link" href="#removingtags-string-"></a></h4>\n<p>警告: 你指定 <code>removeTags: true</code> 时，它才会执行。</p>\n<p>默认值: <code>removingTags: [&#39;title&#39;, &#39;desc&#39;, &#39;defs&#39;, &#39;style&#39;]</code></p>\n<h4 class="header"><a class="anchor" href="#warntags-string-" id="warntags-string-"></a><span class="text"><code>warnTags: [...string]</code></span><a class="icon-link" href="#warntags-string-"></a></h4>\n<p>警告标签,例: [&#39;desc&#39;, &#39;defs&#39;, &#39;style&#39;]</p>\n<p>默认值: <code>warnTags: []</code></p>\n<h4 class="header"><a class="anchor" href="#removesvgtagattrs-boolean" id="removesvgtagattrs-boolean"></a><span class="text"><code>removeSVGTagAttrs: boolean</code></span><a class="icon-link" href="#removesvgtagattrs-boolean"></a></h4>\n<p>删除 <code>&lt;svg /&gt;</code> 的 <code>width</code> 和 <code>height</code> 属性。</p>\n<p>默认值: <code>removeSVGTagAttrs: true</code></p>\n<h4 class="header"><a class="anchor" href="#removingtagattrs-string-" id="removingtagattrs-string-"></a><span class="text"><code>removingTagAttrs: [...string]</code></span><a class="icon-link" href="#removingtagattrs-string-"></a></h4>\n<p>删除内部的 <code>&lt;svg /&gt;</code>的属性。</p>\n<p>默认值: <code>removingTagAttrs: []</code></p>\n<h4 class="header"><a class="anchor" href="#warntagattrs-string-" id="warntagattrs-string-"></a><span class="text"><code>warnTagAttrs: [...string]</code></span><a class="icon-link" href="#warntagattrs-string-"></a></h4>\n<p>在console发出关于内部 <code>&lt;svg /&gt;</code> 属性的警告</p>\n<p>默认值: <code>warnTagAttrs: []</code></p>\n<h4 class="header"><a class="anchor" href="#classprefix-boolean-string" id="classprefix-boolean-string"></a><span class="text"><code>classPrefix: boolean || string</code></span><a class="icon-link" href="#classprefix-boolean-string"></a></h4>\n<p>添加一个前缀到svg文件的class，以避免碰撞。</p>\n<p>默认值: <code>classPrefix: false</code></p>\n<h4 class="header"><a class="anchor" href="#idprefix-boolean-string" id="idprefix-boolean-string"></a><span class="text"><code>idPrefix: boolean || string</code></span><a class="icon-link" href="#idprefix-boolean-string"></a></h4>\n<p>添加一个前缀到svg文件的id，以避免碰撞。</p>\n<p>默认值: <code>idPrefix: false</code></p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">使用示例</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-js"><span class="token comment">// 使用默认 hashed prefix (__[hash:base64:7]__)</span>\n<span class="token keyword">var</span> logoTwo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svg-inline-loader?classPrefix!./logo_two.svg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用自定义字符串</span>\n<span class="token keyword">var</span> logoOne <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svg-inline-loader?classPrefix=my-prefix-!./logo_one.svg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用自定义字符串和hash</span>\n<span class="token keyword">var</span> logoThree <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svg-inline-loader?classPrefix=__prefix-[sha512:hash:hex:5]__!./logo_three.svg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>hash 操作请参照 <a href="https://github.com/webpack/loader-utils#interpolatename">loader-utils</a>。</p>\n<p>通过 <code>module.loaders</code> 优先使用:</p>\n<pre><code class="lang-js">    <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.svg$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'svg-inline-loader?classPrefix\'</span>\n    <span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/svg-inline-loader/">https://webpack.js.org/loaders/svg-inline-loader/</a></p>\n</blockquote>\n',title:"svg-inline-loader"},title:"svg-inline-loader",url:"/loaders/svg-inline-loader/"},{file:{attributes:{title:"thread-loader",source:"https://raw.githubusercontent.com/webpack-contrib/thread-loader/master/README.md",edit:"https://github.com/webpack-contrib/thread-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/thread-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"示例",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Runs the following loaders in a worker pool.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev thread-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>把这个 loader 放置在其他 loader 之前， 放置在这个 loader 之后的 loader 就会在一个单独的 worker 池(worker pool)中运行</p>\n<p>在工人池(worker pool)中运行的 loader 是受到限制的。例如：</p>\n<ul>\n<li>这些 loader 不能产生新的文件。</li>\n<li>这些 loader 不能使用定制的 loader API（也就是说，通过插件）。</li>\n<li>这些 loader 无法获取 webpack 的选项设置。</li>\n</ul>\n<p>每个 worker 都是一个单独的有 600ms 限制的 node.js 进程。同时跨进程的数据交换也会被限制。</p>\n<p>请仅在耗时的 loader 上使用</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n        include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">"thread-loader"</span><span class="token punctuation">,</span>\n          <span class="token string">"expensive-loader"</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>可配选项</strong></p>\n<pre><code class="lang-js">use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">"thread-loader"</span><span class="token punctuation">,</span>\n    <span class="token comment">// 有同样配置的 loader 会共享一个 worker 池(worker pool)</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 产生的 worker 的数量，默认是 cpu 的核心数</span>\n      workers<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 一个 worker 进程中并行执行工作的数量</span>\n      <span class="token comment">// 默认为 20</span>\n      workerParallelJobs<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 额外的 node.js 参数</span>\n      workerNodeArgs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'--max-old-space-size\'</span><span class="token punctuation">,</span> <span class="token string">\'1024\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 闲置时定时删除 worker 进程</span>\n      <span class="token comment">// 默认为 500ms</span>\n      <span class="token comment">// 可以设置为无穷大， 这样在监视模式(--watch)下可以保持 worker 持续存在</span>\n      poolTimeout<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 池(pool)分配给 worker 的工作数量</span>\n      <span class="token comment">// 默认为 200</span>\n      <span class="token comment">// 降低这个数值会降低总体的效率，但是会提升工作分布更均一</span>\n      poolParallelJobs<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 池(pool)的名称</span>\n      <span class="token comment">// 可以修改名称来创建其余选项都一样的池(pool)</span>\n      name<span class="token punctuation">:</span> <span class="token string">"my-pool"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">"expensive-loader"</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p><strong>预热</strong></p>\n<p>可以通过预热 worker 池(worker pool)来防止启动 worker 时的高延时。</p>\n<p>这会启动池(pool)内最大数量的 worker 并把指定的模块载入 node.js 的模块缓存中。</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> threadLoader <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'thread-loader\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nthreadLoader<span class="token punctuation">.</span><span class="token function">warmup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// pool options, like passed to loader options</span>\n  <span class="token comment">// must match loader options to boot the correct pool</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  <span class="token comment">// modules to load</span>\n  <span class="token comment">// can be any module, i. e.</span>\n  <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'babel-preset-es2015\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/sokra"></p>\n<p><img width="150" height="150" src="https://github.com/sokra.png?size=150"></p>\n<p></br></p>\n<pre><code>      sokra\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/thread-loader/">https://webpack.js.org/loaders/thread-loader/</a></p>\n</blockquote>\n',title:"thread-loader"},title:"thread-loader",url:"/loaders/thread-loader/"},{file:{attributes:{title:"transform-loader",source:"https://raw.githubusercontent.com/webpack-contrib/transform-loader/master/README.md",edit:"https://github.com/webpack-contrib/transform-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/transform-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"webpack 2 配置示例",id:"webpack-2-"},{title:"webpack 1 配置示例",id:"webpack-1-"},{title:"典型 brfs 示例",id:"-brfs-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Use <a href="https://github.com/substack/node-browserify/wiki/list-of-transforms">browserify transforms</a> as webpack-loader.</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i transform-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">用法</a></span><a class="icon-link" href="#-"></a></h2>\n<p>通过查询参数(query parameter)来传递模块名。</p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"!transform-loader?brfs!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"!transform-loader/cacheable?brfs!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可缓存版本</span>\n</code></pre>\n<p>如果你传递了一个数字，将得到 <code>this.options.transforms[number]</code> 中的函数。</p>\n<h2 class="header"><a class="anchor" href="#webpack-2-" id="webpack-2-"></a><span class="text">webpack 2 配置示例</span><a class="icon-link" href="#webpack-2-"></a></h2>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"transform-loader?brfs"</span><span class="token punctuation">,</span>\n        enforce<span class="token punctuation">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          transforms<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token comment">/*file*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>\n                  buffer<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token operator">-</span>chunk<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.coffee$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"transform-loader/cacheable?coffeeify"</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          transforms<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token comment">/*file*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>\n                  buffer<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token operator">-</span>chunk<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.weirdjs$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"transform-loader?0"</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          transforms<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token comment">/*file*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>\n                  buffer<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token operator">-</span>chunk<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#webpack-1-" id="webpack-1-"></a><span class="text">webpack 1 配置示例</span><a class="icon-link" href="#webpack-1-"></a></h2>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    postLoaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"transform-loader?brfs"</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.coffee$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"transform-loader/cacheable?coffeeify"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.weirdjs$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"transform-loader?0"</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  transforms<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">through</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token operator">-</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-brfs-" id="-brfs-"></a><span class="text">典型 brfs 示例</span><a class="icon-link" href="#-brfs-"></a></h2>\n<p>假如你有下面这样的 Node 源码：</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'./test.txt\'</span><span class="token punctuation">,</span> <span class="token string">\'utf8\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>在 <code>npm install transform-loader brfs --save</code> 之后，添加如下 loader 到你的配置中：</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n    entry<span class="token punctuation">:</span> <span class="token string">"./index.js"</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"transform-loader?brfs"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>loader 将应用到所有 JS 文件，这样在执行 watch 任务时将导致性能提醒。因此你也许需要使用带缓存的版本 <code>transform-loader/cacheable?brfs</code>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/transform-loader/">https://webpack.js.org/loaders/transform-loader/</a></p>\n</blockquote>\n',title:"transform-loader"},title:"transform-loader",url:"/loaders/transform-loader/"},{file:{attributes:{title:"url-loader",source:"https://raw.githubusercontent.com/webpack-contrib/url-loader/master/README.md",edit:"https://github.com/webpack-contrib/url-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/url-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"Options",id:"options"},{title:"mimetype",id:"mimetype"},{title:"fallback",id:"fallback"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Loads files as <code>base64</code> encoded URL</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev url-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">用法</a></span><a class="icon-link" href="#-"></a></h2>\n<p><code>url-loader</code> 功能类似于 <a href="https://github.com/webpack-contrib/file-loader"><code>file-loader</code></a>，但是在文件大小（单位 byte）低于指定的限制时，可以返回一个 DataURL。</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> img <span class="token keyword">from</span> <span class="token string">\'./image.png\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.(png|jpg|gif)$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              limit<span class="token punctuation">:</span> <span class="token number">8192</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>limit</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Byte limit to inline files as Data URL\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>mimetype</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>extname</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Specify MIME type for the file (Otherwise it&#39;s inferred from the file extension)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>fallback</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>file-loader</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Specify <code>loader</code> for the file when file is greater than the limit (in bytes)\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>##</p>\n<p>If the file is greater than the limit (in bytes) the <a href="/loaders/file-loader/"><code>file-loader</code></a> is used by default and all query parameters are passed to it.\nYou can use other loader using <code>fallback</code> option.</p>\n<p>The limit can be specified via loader options and defaults to no limit.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    limit<span class="token punctuation">:</span> <span class="token number">8192</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#mimetype" id="mimetype"></a><span class="text"><code>mimetype</code></span><a class="icon-link" href="#mimetype"></a></h3>\n<p>Set the MIME type for the file. If unspecified the file extensions will be used to lookup the MIME type.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    mimetype<span class="token punctuation">:</span> <span class="token string">\'image/png\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#fallback" id="fallback"></a><span class="text"><code>fallback</code></span><a class="icon-link" href="#fallback"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    fallback<span class="token punctuation">:</span> <span class="token string">\'responsive-loader\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/sapegin"></p>\n<p><img width="150" height="150" src="https://github.com/sapegin.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Artem Sapegin\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/url-loader/">https://webpack.js.org/loaders/url-loader/</a></p>\n</blockquote>\n',title:"url-loader"},title:"url-loader",url:"/loaders/url-loader/"},{file:{attributes:{title:"val-loader",source:"https://raw.githubusercontent.com/webpack-contrib/val-loader/master/README.md",edit:"https://github.com/webpack-contrib/val-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/val-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"Function Interface",id:"function-interface"},{title:"{Object}",id:"-object-"},{title:"{Promise}",id:"-promise-"},{title:"Object Interface",id:"object-interface"},{title:"Options",id:"options"},{title:"Examples",id:"examples"},{title:"Complete",id:"complete"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Executes the given module to generate source code on build time</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i -D val-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>此 loader 所加载的模块必须符合以下接口</p>\n<p>##</p>\n<p>加载的模块必须使用以下<em>函数接口</em>，将  <code>default</code> export 导出为一个函数。</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Modules transpiled by <a href="https://babeljs.io/">Babel</a> are also supported</p>\n<pre><code class="lang-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#function-interface" id="function-interface"></a><span class="text"><code>Function Interface</code></span><a class="icon-link" href="#function-interface"></a></h3>\n<p>The function will be called with the loader <a href="https://webpack.js.org/configuration/module/#useentry"><code>options</code></a> and must either return</p>\n<h4 class="header"><a class="anchor" href="#-object-" id="-object-"></a><span class="text"><code>{Object}</code></span><a class="icon-link" href="#-object-"></a></h4>\n<p>Following the <strong>Object Interface</strong></p>\n<h4 class="header"><a class="anchor" href="#-promise-" id="-promise-"></a><span class="text"><code>{Promise}</code></span><a class="icon-link" href="#-promise-"></a></h4>\n<p>Resolving to an <code>{Object}</code> following the <strong>Object Interface</strong></p>\n<h3 class="header"><a class="anchor" href="#object-interface" id="object-interface"></a><span class="text"><code>Object Interface</code></span><a class="icon-link" href="#object-interface"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>code</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Buffer}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        (<strong>Required</strong>) The code that is passed to the next loader or to webpack\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>sourceMap</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <a href="https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit"><code>{Object}</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        (<strong>Optional</strong>) Will be passed to the next loader or to webpack\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>ast</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Array&lt;{Object}&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        (<strong>Optional</strong>) An <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a> that will be passed to the next loader. Useful to speed up the build time if the next loader uses the same AST\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>dependencies</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Array&lt;{String}&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        An array of absolute, native paths to file dependencies that need to be watched for changes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>contextDependencies</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Array&lt;{String}&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        An array of absolute, native paths to directory dependencies that need to be watched for changes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>cacheable</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Flag whether the code can be re-used in watch mode if none of the <code>dependencies</code> have changed\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<p><strong><code>val-loader</code></strong> itself has no options. The options are passed as they are (without cloning them) to the exported function</p>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p>If you have a module like this</p>\n<p><strong>answer.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">function</span> answer <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    code<span class="token punctuation">:</span> <span class="token string">\'module.exports = 42;\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> answer<span class="token punctuation">;</span>\n</code></pre>\n<p>you can use the <strong>val-loader</strong> to generate source code on build time</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'path/to/answer.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'val-loader\'</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#complete" id="complete"></a><span class="text"><code>Complete</code></span><a class="icon-link" href="#complete"></a></h3>\n<p>A complete example of all available features looks like this</p>\n<p><strong>answer.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ask <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./ask.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> generate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./generate.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">answer</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">ask</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>question<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>generate<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      ast<span class="token punctuation">:</span> result<span class="token punctuation">.</span>abstractSyntaxTree<span class="token punctuation">,</span>\n      code<span class="token punctuation">:</span> result<span class="token punctuation">.</span>code<span class="token punctuation">,</span>\n      <span class="token comment">// Mark dependencies of answer().</span>\n      <span class="token comment">// The function will be re-executed if one of these</span>\n      <span class="token comment">// dependencies has changed in watch mode.</span>\n      dependencies<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// Array of absolute native paths!</span>\n        require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./ask.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./generate.js\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token comment">// Flag the generated code as cacheable.</span>\n      <span class="token comment">// If none of the dependencies have changed,</span>\n      <span class="token comment">// the function won\'t be executed again.</span>\n      cacheable<span class="token punctuation">:</span> <span class="token boolean">true</span>\n      sourceMap<span class="token punctuation">:</span> result<span class="token punctuation">.</span>sourceMap<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> answer<span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'path/to/answer.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'val-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              question<span class="token punctuation">:</span> <span class="token string">\'What is the meaning of life?\'</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/781746?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/jhnns"></p>\n<p>Johannes Ewald</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/val-loader/">https://webpack.js.org/loaders/val-loader/</a></p>\n</blockquote>\n',title:"val-loader"},title:"val-loader",url:"/loaders/val-loader/"},{file:{attributes:{title:"worker-loader",source:"https://raw.githubusercontent.com/webpack-contrib/worker-loader/master/README.md",edit:"https://github.com/webpack-contrib/worker-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/worker-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"Config",id:"config"},{title:"Options",id:"options"},{title:"name",id:"name"},{title:"inline",id:"inline"},{title:"fallback",id:"fallback"},{title:"publicPath",id:"publicpath"},{title:"Examples",id:"examples"},{title:"Integrating with ES2015 Modules",id:"integrating-with-es2015-modules"},{title:"Integrating with TypeScript",id:"integrating-with-typescript"},{title:"Cross-Origin Policy",id:"cross-origin-policy"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>This loader registers the script as <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Worker</a></p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm i -D worker-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">用法</a></span><a class="icon-link" href="#-"></a></h2>\n<p>##</p>\n<p><strong>App.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'worker-loader!./Worker.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#config" id="config"></a><span class="text"><code>Config</code></span><a class="icon-link" href="#config"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.worker\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>App.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'./file.worker.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nworker<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#name"><strong><code>name</code></strong></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[hash].worker.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set a custom name for the output script\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#inline"><strong><code>inline</code></strong></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Inline the worker as a BLOB\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#fallback"><strong><code>fallback</code></strong></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Require a fallback for non-worker supporting environments\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#publicPath"><strong><code>publicPath</code></strong></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>null</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Override the path from which worker scripts are downloaded\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#name" id="name"></a><span class="text"><code>name</code></span><a class="icon-link" href="#name"></a></h3>\n<p>To set a custom name for the output script, use the <code>name</code> parameter. The name may contain the string <code>[hash]</code>, which will be replaced with a content dependent hash for caching purposes</p>\n<p><em>webpack.config.js*</em></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'WorkerName.[hash].js\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#inline" id="inline"></a><span class="text"><code>inline</code></span><a class="icon-link" href="#inline"></a></h3>\n<p>You can also inline the worker as a BLOB with the <code>inline</code> parameter</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> inline<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>ℹ️  Inline mode will also create chunks for browsers without support for inline workers, to disable this behavior just set <code>fallback</code> parameter as <code>false</code></p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> fallback<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#fallback" id="fallback"></a><span class="text"><code>fallback</code></span><a class="icon-link" href="#fallback"></a></h3>\n<p>Require a fallback for non-worker supporting environments</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> fallback<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#publicpath" id="publicpath"></a><span class="text"><code>publicPath</code></span><a class="icon-link" href="#publicpath"></a></h3>\n<p>Overrides the path from which worker scripts are downloaded. If not specified, the same public path used for other\nwebpack assets is used</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> publicPath<span class="token punctuation">:</span> <span class="token string">\'/scripts/workers/\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p>The worker file can import dependencies just like any other file</p>\n<p><strong>Worker.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'lodash\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span>\n\n_<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">\'foo\'</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Post data to parent thread</span>\nself<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Respond to message from parent thread</span>\nself<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#integrating-with-es2015-modules" id="integrating-with-es2015-modules"></a><span class="text"><code>Integrating with ES2015 Modules</code></span><a class="icon-link" href="#integrating-with-es2015-modules"></a></h3>\n<blockquote>\n<p>ℹ️  You can even use ES2015 Modules if you have the <a href="https://github.com/babel/babel-loader"><code>babel-loader</code></a> configured.</p>\n</blockquote>\n<p><strong>Worker.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span>\n\n_<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">\'foo\'</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Post data to parent thread</span>\nself<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Respond to message from parent thread</span>\nself<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#integrating-with-typescript" id="integrating-with-typescript"></a><span class="text"><code>Integrating with TypeScript</code></span><a class="icon-link" href="#integrating-with-typescript"></a></h3>\n<p>To integrate with TypeScript, you will need to define a custom module for the exports of your worker</p>\n<p><strong>typings/custom.d.ts</strong></p>\n<pre><code class="lang-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"worker-loader!*"</span> <span class="token punctuation">{</span>\n  <span class="token keyword">class</span> <span class="token class-name">WebpackWorker</span> <span class="token keyword">extends</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">export</span> <span class="token operator">=</span> WebpackWorker<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>Worker.ts</strong></p>\n<pre><code class="lang-typescript"><span class="token keyword">const</span> ctx<span class="token punctuation">:</span> Worker <span class="token operator">=</span> self as <span class="token keyword">any</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Post data to parent thread</span>\nctx<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"foo"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Respond to message from parent thread</span>\nctx<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>App.ts</strong></p>\n<pre><code class="lang-typescript"><span class="token keyword">import</span> Worker <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"worker-loader!./Worker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nworker<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#cross-origin-policy" id="cross-origin-policy"></a><span class="text"><code>Cross-Origin Policy</code></span><a class="icon-link" href="#cross-origin-policy"></a></h3>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"><code>WebWorkers</code></a> are restricted by a <a href="https://en.wikipedia.org/wiki/Same-origin_policy">same-origin policy</a>, so if your <code>webpack</code> assets are not being served from the same origin as your application, their download may be blocked by your browser. This scenario can commonly occur if you are hosting your assets under a CDN domain. Even downloads from the <code>webpack-dev-server</code> could be blocked. There are two workarounds</p>\n<p>Firstly, you can inline the worker as a blob instead of downloading it as an external script via the <a href="#inline"><code>inline</code></a> parameter</p>\n<p><strong>App.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'./file.worker.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> inline<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Secondly, you may override the base download URL for your worker script via the <a href="#publicpath"><code>publicPath</code></a> option</p>\n<p><strong>App.js</strong></p>\n<pre><code class="lang-js"><span class="token comment">// This will cause the worker to be downloaded from `/workers/file.worker.js`</span>\n<span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'./file.worker.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> publicPath<span class="token punctuation">:</span> <span class="token string">\'/workers/\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/TrySound"></p>\n<p><img width="150" height="150" src="https://avatars3.githubusercontent.com/u/5635476?v=3&s=150"></p>\n<p></a></p>\n<p><br /></p>\n<p><a href="https://github.com/TrySound"></p>\n<p>Bogdan Chadkin</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/worker-loader/">https://webpack.js.org/loaders/worker-loader/</a></p>\n</blockquote>\n',title:"worker-loader"},title:"worker-loader",url:"/loaders/worker-loader/"},{file:{attributes:{title:"mocha-loader",source:"https://raw.githubusercontent.com/webpack-contrib/mocha-loader/master/README.md",edit:"https://github.com/webpack-contrib/mocha-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/mocha-loader",group:"-",anchors:[{title:"安装",id:"-"},{title:"用法",id:"-"},{title:"命令行接口(CLI)",id:"-cli-"},{title:"Require",id:"require"},{title:"选项",id:"-"},{title:"维护人员",id:"-"}],contributors:[],related:[]},body:'<p>Allows <a href="http://mochajs.org/">Mocha</a> tests to be loaded and run via webpack</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">安装</span><a class="icon-link" href="#-"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev mocha-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法</span><a class="icon-link" href="#-"></a></h2>\n<p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./entry.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/test\\.js$/</span><span class="token punctuation">,</span>\n      use<span class="token punctuation">:</span> <span class="token string">\'mocha-loader\'</span><span class="token punctuation">,</span>\n      exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">\'./test\'</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-cli-" id="-cli-"></a><span class="text">命令行接口(CLI)</span><a class="icon-link" href="#-cli-"></a></h3>\n<pre><code class="lang-bash">webpack --module-bind <span class="token string">\'mocha-loader!./test\'</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">\'./test\'</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#require" id="require"></a><span class="text">Require</span><a class="icon-link" href="#require"></a></h3>\n<pre><code class="lang-js"><span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">\'mocha-loader!./test\'</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">选项</span><a class="icon-link" href="#-"></a></h2>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">维护人员</span><a class="icon-link" href="#-"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/loaders/mocha-loader/">https://webpack.js.org/loaders/mocha-loader/</a></p>\n</blockquote>\n',title:"mocha-loader"},title:"mocha-loader",url:"/loaders/mocha-loader/"}]},{title:"贡献",url:"contribute",pages:[{file:{attributes:{title:"作者指引",sort:2,group:"-",anchors:[{title:"Process",id:"process"},{title:"YAML Frontmatter",id:"yaml-frontmatter"},{title:"Article Structure",id:"article-structure"},{title:"Typesetting",id:"typesetting"},{title:"Formatting",id:"formatting"},{title:"Code",id:"code"},{title:"Lists",id:"lists"},{title:"Tables",id:"tables"},{title:"Configuration Properties",id:"configuration-properties"},{title:"Quotes",id:"quotes"},{title:"Blockquote",id:"blockquote"},{title:"Tip",id:"tip"}],contributors:[],related:[]},body:'<p>The following sections contain all you need to know about editing and formatting the content within this site. Make sure to do some research before starting your edits or additions. Sometimes the toughest part is finding where the content should live and determining whether or not it already exists.</p>\n<h2 class="header"><a class="anchor" href="#process" id="process"></a><span class="text">Process</span><a class="icon-link" href="#process"></a></h2>\n<ol>\n<li>Check related issue if an article links to one.</li>\n<li>Hit <code>edit</code> and expand on the structure.</li>\n<li>PR changes.</li>\n</ol>\n<h2 class="header"><a class="anchor" href="#yaml-frontmatter" id="yaml-frontmatter"></a><span class="text">YAML Frontmatter</span><a class="icon-link" href="#yaml-frontmatter"></a></h2>\n<p>Each article contains a small section at the top written in <a href="https://jekyllrb.com/docs/frontmatter/">YAML Frontmatter</a>:</p>\n<pre><code class="lang-yaml"><span class="token punctuation">---</span>\n<span class="token key atrule">title</span><span class="token punctuation">:</span> My Article\n<span class="token key atrule">sort</span><span class="token punctuation">:</span> <span class="token number">3</span>\n<span class="token key atrule">contributors</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token punctuation">[</span>github username<span class="token punctuation">]</span>\n<span class="token key atrule">related</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> Title of Related Article\n    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>url of related article<span class="token punctuation">]</span>\n<span class="token punctuation">---</span>\n</code></pre>\n<p>Let&#39;s break these down:</p>\n<ul>\n<li><code>title</code>: The name of the article.</li>\n<li><code>sort</code>: The order of the article within its section.</li>\n<li><code>contributors</code>: A list of GitHub usernames who have contributed to this article.</li>\n<li><code>related</code>: Any related reading or useful examples.</li>\n</ul>\n<p>Note that <code>related</code> will generate a <strong>Further Reading</strong> section at the bottom of the page and <code>contributors</code> will yield a <strong>Contributors</strong> section below it. If you edit an article and would like recognition, don&#39;t hesitate to add your GitHub username to the <code>contributors</code> list.</p>\n<h2 class="header"><a class="anchor" href="#article-structure" id="article-structure"></a><span class="text">Article Structure</span><a class="icon-link" href="#article-structure"></a></h2>\n<ol>\n<li>Brief Introduction - a paragraph or two so you get the basic idea about the what and why.</li>\n<li>Outline Remaining Content – how the content will be presented.</li>\n<li>Main Content - tell what you promised to tell.</li>\n<li>Conclusion - tell what you told and recap the main points.</li>\n</ol>\n<h2 class="header"><a class="anchor" href="#typesetting" id="typesetting"></a><span class="text">Typesetting</span><a class="icon-link" href="#typesetting"></a></h2>\n<ul>\n<li>webpack should always be written in lower-case letters. Even at the beginning of a sentence. (<a href="https://github.com/webpack/media#name">source</a>)</li>\n<li>loaders are enclosed in backticks and <a href="https://en.wikipedia.org/w/index.php?title=Kebab_case">kebab-cased</a>: <code>css-loader</code>, <code>ts-loader</code>, …</li>\n<li>plugins are enclosed in backticks and <a href="https://en.wikipedia.org/wiki/Camel_case">camel-cased</a>: <code>BannerPlugin</code>, <code>NpmInstallWebpackPlugin</code>, …</li>\n<li>Use &quot;webpack 2&quot; to refer to a specific webpack version (<del>&quot;webpack v2&quot;</del>)</li>\n<li>Use ES5; ES2015, ES2016, … to refer to the ECMAScript standards (<del>ES6</del>, <del>ES7</del>)</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#formatting" id="formatting"></a><span class="text">Formatting</span><a class="icon-link" href="#formatting"></a></h2>\n<h3 class="header"><a class="anchor" href="#code" id="code"></a><span class="text">Code</span><a class="icon-link" href="#code"></a></h3>\n<p><strong>Syntax: ```javascript … ```</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> foo <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">\'bar\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#lists" id="lists"></a><span class="text">Lists</span><a class="icon-link" href="#lists"></a></h3>\n<ul>\n<li>Boo</li>\n<li>Foo</li>\n<li>Zoo</li>\n</ul>\n<p>Lists should be ordered alphabetically.</p>\n<h3 class="header"><a class="anchor" href="#tables" id="tables"></a><span class="text">Tables</span><a class="icon-link" href="#tables"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Parameter</div><div class="table-th">Explanation</div><div class="table-th">Input Type</div><div class="table-th">Default Value</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        --debug\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Switch loaders to debug mode\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default Value\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        --devtool\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Define source map type for the bundled resources\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input Type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default Value\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        --progress\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Print compilation progress in percentage\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default Value\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>Same goes for tables.</p>\n<h3 class="header"><a class="anchor" href="#configuration-properties" id="configuration-properties"></a><span class="text">Configuration Properties</span><a class="icon-link" href="#configuration-properties"></a></h3>\n<p>The <a href="/configuration">configuration</a> properties should be ordered alphabetically as well:</p>\n<ul>\n<li><code>devServer.compress</code></li>\n<li><code>devServer.contentBase</code></li>\n<li><code>devServer.hot</code></li>\n</ul>\n<h3 class="header"><a class="anchor" href="#quotes" id="quotes"></a><span class="text">Quotes</span><a class="icon-link" href="#quotes"></a></h3>\n<h4 class="header"><a class="anchor" href="#blockquote" id="blockquote"></a><span class="text">Blockquote</span><a class="icon-link" href="#blockquote"></a></h4>\n<p><strong>Syntax: ></strong></p>\n<blockquote>\n<p>This is a blockquote.</p>\n</blockquote>\n<h4 class="header"><a class="anchor" href="#tip" id="tip"></a><span class="text">Tip</span><a class="icon-link" href="#tip"></a></h4>\n<p><strong>Syntax: T></strong></p>\n<blockquote class="tip"><div class="tip-content"> This is a tip. </div></blockquote><p><strong>Syntax: W></strong></p>\n<blockquote class="warning"><div class="tip-content"> This is a warning. </div></blockquote><p><strong>Syntax: ?></strong></p>\n<blockquote class="todo"><div class="tip-content"> This is a todo. </div></blockquote><hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/writers-guide/">https://webpack.js.org/writers-guide/</a></p>\n</blockquote>\n',title:"作者指引"},title:"作者指引",url:"/contribute/writers-guide/"},{file:{attributes:{title:"编写一个 loader",sort:3,contributors:["asulaiman","michael-ciniawsky"],group:"-",anchors:[{title:"设置",id:"-"},{title:"简单用法",id:"-"},{title:"复杂用法",id:"-"},{title:"用法引导",id:"-"},{title:"简单(Simple)",id:"-simple-"},{title:"链式(Chaining)",id:"-chaining-"},{title:"模块化(Modular)",id:"-modular-"},{title:"无状态(Stateless)",id:"-stateless-"},{title:"loader 工具库(Loader Utilities)",id:"loader-loader-utilities-"},{title:"loader 依赖(Loader Dependencies)",id:"loader-loader-dependencies-"},{title:"模块依赖(Module Dependencies)",id:"-module-dependencies-"},{title:"通用代码(Common Code)",id:"-common-code-"},{title:"绝对路径(Absolute Paths)",id:"-absolute-paths-"},{title:"同等依赖(Peer Dependencies)",id:"-peer-dependencies-"},{title:"测试",id:"-"}],related:[]},body:'<p>插件是导出一个函数的 node 模块。该函数在 loader 转换资源的时候调用。给定的函数通过 <code>this</code> 上下文访问 <a href="/api/loaders/">loader API</a>。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">设置</span><a class="icon-link" href="#-"></a></h2>\n<p>在深入研究不同 loader 以及他们的用法和例子之前，我们先看三种本地开发测试的方法。</p>\n<p>匹配(test)单个 loader，你可以简单通过在 rule 对象设置 <code>path.resolve</code> 指向这个本地文件</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'path/to/loader.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>匹配(test)多个 loaders，你可以使用 <code>resolveLoader.modules</code> 配置，webpack 将会从这些目录中搜索这些 loaders。例如，如果你的项目中有一个 <code>/loaders</code> 本地目录：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">resolveLoader<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  modules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'node_modules\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'loaders\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>最后，相当重要的是，如果你已经为 loader 创建了独立的库和包，你可以使用 <a href="https://docs.npmjs.com/cli/link"><code>npm link</code></a>，来将其关联到你要测试的项目。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">简单用法</span><a class="icon-link" href="#-"></a></h2>\n<p>当一个 loader 在资源中使用，这个 loader 只能传入一个参数 - 包含资源文件内容的字符串</p>\n<p>同步 loader 可以简单的返回一个代表模块转化后的值。在更复杂的情况下，loader 也可以通过使用 <code>this.callback(err, values...)</code> 函数，返回任意数量的值。错误要么传递给这个 <code>this.callback</code> 函数，要么扔进同步 loader 中。</p>\n<p>loader 会返回一个或者两个值。第一个值类型是 JavaScript 代码的字符串或者 buffer。第二个参数值是 SourceMap，它是个 JavaScript 对象。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">复杂用法</span><a class="icon-link" href="#-"></a></h2>\n<p>当链式调用多个 loader 的时候，请记住它们会以相反的顺序执行。取决于数组写法格式，从右向左或者从下向上执行。</p>\n<ul>\n<li>最后的 loader 最早调用，将会传入原始资源内容。</li>\n<li>第一个 loader 最后调用，期望值是传出 JavaScript 和 source map（可选）。</li>\n<li>中间的 loader 执行时，会传入前一个 loader 传出的结果。</li>\n</ul>\n<p>所以，在接下来的例子，<code>foo-loader</code> 被传入原始资源，<code>bar-loader</code> 将接收 <code>foo-loader</code> 的产出，返回最终转化后的模块和一个 source map（可选）</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.js/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'bar-loader\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'foo-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">用法引导</span><a class="icon-link" href="#-"></a></h2>\n<p>编写 loader 时应该遵循以下准则。它们按重要程度排序，有些仅适用于某些场景，请阅读下面详细的章节以获得更多信息。</p>\n<ul>\n<li><strong>简单易用</strong>。</li>\n<li>使用<strong>链式</strong>传递。</li>\n<li><strong>模块化</strong>的输出。</li>\n<li>确保<strong>无状态</strong>。</li>\n<li>使用 <strong>loader utilities</strong>。</li>\n<li>记录 <strong>loader 的依赖</strong>。</li>\n<li>解析<strong>模块依赖关系</strong>。</li>\n<li>提取<strong>通用代码</strong>。</li>\n<li>避免<strong>绝对路径</strong>。</li>\n<li>使用 <strong>peer dependencies</strong>。</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#-simple-" id="-simple-"></a><span class="text">简单(Simple)</span><a class="icon-link" href="#-simple-"></a></h3>\n<p>loaders 应该只做单一任务。这不仅使每个 loader 易维护，也可以在更多场景链式调用。</p>\n<h3 class="header"><a class="anchor" href="#-chaining-" id="-chaining-"></a><span class="text">链式(Chaining)</span><a class="icon-link" href="#-chaining-"></a></h3>\n<p>利用 loader 可以链式调用的优势。写五个简单的 loader 实现五项任务，而不是一个 loader 实现五项任务。功能隔离不仅是 loader 更简单，也让 loader 可以使用自己本身不具备的功能。</p>\n<p>以通过 loader 选项或者查询参数得到的数据渲染模板为例。可以把源代码编译为模板，执行并输出包含 HTML 代码的字符串写到一个 loader 中。但是根据用法引导，已经存在这样一个 <code>apply-loader</code>，可以将它和其他开源 loader 串联在一起调用。</p>\n<ul>\n<li><code>jade-loader</code>：导出一个函数，把模板转换为模块。</li>\n<li><code>apply-loader</code>：根据 loader 选项执行函数，返回原生 HTML。</li>\n<li><code>html-loader</code>：接收 HTML，输出一个合法的 JS 模块。</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> loader 可以被链式调用意味着不一定要输出 JavaScript。只要下一个 loader 可以处理这个输出，这个 loader 就可以返回任意类型的模块。 </div></blockquote><h3 class="header"><a class="anchor" href="#-modular-" id="-modular-"></a><span class="text">模块化(Modular)</span><a class="icon-link" href="#-modular-"></a></h3>\n<p>保证输出模块化。loader 生成的模块与普通模块遵循相同的设计原则。</p>\n<h3 class="header"><a class="anchor" href="#-stateless-" id="-stateless-"></a><span class="text">无状态(Stateless)</span><a class="icon-link" href="#-stateless-"></a></h3>\n<p>确保 loader 在不同模块转换之间不保存状态。每次运行都应该独立于其他编译模块以及相同模块之前的编译结果。</p>\n<h3 class="header"><a class="anchor" href="#loader-loader-utilities-" id="loader-loader-utilities-"></a><span class="text">loader 工具库(Loader Utilities)</span><a class="icon-link" href="#loader-loader-utilities-"></a></h3>\n<p>充分利用 <a href="https://github.com/webpack/loader-utils"><code>loader-utils</code></a> 包。它提供了许多有用的工具，但最常用的一种方法是获取传递给 loader 的选项。<a href="https://github.com/webpack-contrib/schema-utils"><code>schema-utils</code></a> 包配合 <code>loader-utils</code>，用于保证 loader 选项，进行与 JSON Schema 结构一致的校验。这里有一个简单使用两者的例子：</p>\n<p><strong>loader.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> getOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'loader-utils\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> validateOptions <span class="token keyword">from</span> <span class="token string">\'schema-utils\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'object\'</span><span class="token punctuation">,</span>\n  properties<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">\'string\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">validateOptions</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token string">\'Example Loader\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 对资源应用一些转换……</span>\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`export default </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#loader-loader-dependencies-" id="loader-loader-dependencies-"></a><span class="text">loader 依赖(Loader Dependencies)</span><a class="icon-link" href="#loader-loader-dependencies-"></a></h3>\n<p>如果一个 loader 使用外部资源（例如，从文件系统读取），<strong>必须</strong>声明它。这些信息用于使缓存 loaders 无效，以及在观察模式(watch mode)下重编译。下面是一个简单示例，说明如何使用 <code>addDependency</code> 方法实现上述声明：</p>\n<p><strong>loader.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">\'path\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> headerPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'header.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addDependency</span><span class="token punctuation">(</span>headerPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>headerPath<span class="token punctuation">,</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> header <span class="token operator">+</span> <span class="token string">"\\n"</span> <span class="token operator">+</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-module-dependencies-" id="-module-dependencies-"></a><span class="text">模块依赖(Module Dependencies)</span><a class="icon-link" href="#-module-dependencies-"></a></h3>\n<p>根据模块类型，可能会有不同的模式指定依赖关系。例如在 CSS 中，使用 <code>@import</code> 和 <code>url(...)</code> 语句来声明依赖。这些依赖关系应该由模块系统解析。</p>\n<p>可以通过以下两种方式中的一种来实现：</p>\n<ul>\n<li>通过把它们转化成 <code>require</code> 语句。</li>\n<li>使用 <code>this.resolve</code> 函数解析路径。</li>\n</ul>\n<p><code>css-loader</code> 是第一种方式的一个例子。它将 <code>@import</code> 语句替换为 <code>require</code> 其他样式文件，将 <code>url(...)</code> 替换为 <code>require</code> 引用文件，从而实现将依赖关系转化为 <code>require</code> 声明。</p>\n<p>对于 <code>less-loader</code>，无法将每个 <code>@import</code> 转化为 <code>require</code>，因为所有 <code>.less</code> 的文件中的变量和混合跟踪必须一次编译。因此，<code>less-loader</code> 将 <code>less</code> 编译器进行了扩展，自定义路径解析逻辑。然后，利用第二种方式，通过 webpack 的 <code>this.resolve</code> 解析依赖。</p>\n<blockquote class="tip"><div class="tip-content"> 如果语言只支持相对 url（例如 <code>url(file)</code> 总是指向 <code>./file</code>），通过使用 <code>~</code> 来指定已安装模块（例如，引用 <code>node_modules</code> 中的那些模块）。所以对于 <code>url</code>，相当于 <code>url(&#39;~some-library/image.jpg&#39;)</code>。 </div></blockquote><h3 class="header"><a class="anchor" href="#-common-code-" id="-common-code-"></a><span class="text">通用代码(Common Code)</span><a class="icon-link" href="#-common-code-"></a></h3>\n<p>避免在 loader 处理的每个模块中生成通用代码。相反，你应该在 loader 中创建一个运行时文件，并生成 <code>require</code> 语句以引用该共享模块。</p>\n<h3 class="header"><a class="anchor" href="#-absolute-paths-" id="-absolute-paths-"></a><span class="text">绝对路径(Absolute Paths)</span><a class="icon-link" href="#-absolute-paths-"></a></h3>\n<p>不要在模块代码中插入绝对路径，因为当项目根路径变化时，文件绝对路径也会变化。<code>loader-utils</code> 中的 <a href="https://github.com/webpack/loader-utils#stringifyrequest"><code>stringifyRequest</code></a> 方法，可以将绝对路径转化为相对路径。</p>\n<h3 class="header"><a class="anchor" href="#-peer-dependencies-" id="-peer-dependencies-"></a><span class="text">同等依赖(Peer Dependencies)</span><a class="icon-link" href="#-peer-dependencies-"></a></h3>\n<p>如果你的 loader 简单包裹另外一个包，你应该把这个包作为一个 <code>peerDependency</code> 引入。这种方式允许应用程序开发者在必要情况下，在 <code>package.json</code> 中指定所需的确定版本。</p>\n<p>例如，<code>sass-loader</code> <a href="https://github.com/webpack-contrib/sass-loader/blob/master/package.json">指定 <code>node-sass</code></a> 作为同等依赖，引用如下：</p>\n<pre><code class="lang-js"><span class="token string">"peerDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"node-sass"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">测试</span><a class="icon-link" href="#-"></a></h2>\n<p>当你遵循上面的用法引导编写了一个 loader，并且可以在本地运行。下一步该做什么呢？让我们用一个简单的单元测试，来保证 loader 能够按照我们预期的方式正确运行。我们将使用 <a href="https://facebook.github.io/jest/">Jest</a> 框架。然后还需要安装 <code>babel-jest</code> 和允许我们使用 <code>import</code> / <code>export</code> 和 <code>async</code> / <code>await</code> 的一些预设环境(presets)。让我们开始安装，并且将这些依赖保存为 <code>devDependencies</code>：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev jest babel-jest babel-preset-env\n</code></pre>\n<p><strong>.babelrc</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>\n    <span class="token string">"env"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"4"</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>我们的 loader 将会处理 <code>.txt</code> 文件，并且将任何实例中的 <code>[name]</code> 直接替换为 loader 选项中设置的 <code>name</code>。然后返回包含默认导出文本的 JavaScript 模块。</p>\n<p><strong>src/loader.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> getOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'loader-utils\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  source <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\[name\\]/g</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`export default </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>我们将会使用这个 loader 处理以下文件：</p>\n<p><strong>test/example.txt</strong></p>\n<pre><code class="lang-text">Hey <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">!</span>\n</code></pre>\n<p>请注意留心接下来的步骤，我们将会使用 <a href="/api/node">Node.js API</a> 和 <a href="https://github.com/webpack/memory-fs"><code>memory-fs</code></a> 去执行 webpack。这让我们避免向磁盘产生<code>输出文件</code>，并允许我们访问获取转换模块的统计数据 <code>stats</code>：</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack memory-fs\n</code></pre>\n<p><strong>test/compiler.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">\'path\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> webpack <span class="token keyword">from</span> <span class="token string">\'webpack\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> memoryfs <span class="token keyword">from</span> <span class="token string">\'memory-fs\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>fixture<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    context<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n    entry<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fixture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.txt$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          loader<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'../src/loader.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            name<span class="token punctuation">:</span> <span class="token string">\'Alice\'</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  compiler<span class="token punctuation">.</span>outputFileSystem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">memoryfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token function">resolve</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> 这种情况下，我们可以内联 webpack 配置，也可以把配置作为参数传给导出的函数。这允许我们使用相同的编译模块测试多个设置。 </div></blockquote><p>最后，我们来编写测试，并且添加 npm script 运行它。</p>\n<p><strong>test/loader.test.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> compiler <span class="token keyword">from</span> <span class="token string">\'./compiler.js\'</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Inserts name and outputs JavaScript\'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> stats <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">compiler</span><span class="token punctuation">(</span><span class="token string">\'example.txt\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> output <span class="token operator">=</span> stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>source<span class="token punctuation">;</span>\n\n  <span class="token function">expect</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>`<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">"Hey Alice!\\\\n"</span>`<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"jest"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>准备就绪后，我们可以运行它，然后看新的 loader 是否能通过测试：</p>\n<pre><code class="lang-bash"> PASS  test/loader.test.js\n  ✓ Inserts name and outputs JavaScript <span class="token punctuation">(</span>229ms<span class="token punctuation">)</span>\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        1.853s, estimated 2s\nRan all <span class="token function">test</span> suites.\n</code></pre>\n<p>一切正常！现在，你应该准备开始开发、测试、部署你的 loaders 了。我们希望你可以在社区分享你的 loader！</p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/contribute/how-to-write-a-loader/">https://webpack.js.org/contribute/how-to-write-a-loader/</a></p>\n</blockquote>\n',title:"编写一个 loader"},title:"编写一个 loader",url:"/contribute/writing-a-loader/"},{file:{attributes:{title:"编写一个插件",sort:4,contributors:["tbroadley"],group:"-",anchors:[{title:"创建插件",id:"-"},{title:"编译器(Compiler)和编译(Compilation)",id:"-compiler-compilation-"},{title:"基本插件架构",id:"-"},{title:"访问编译",id:"-"},{title:"异步编译插件",id:"-"},{title:"示例",id:"-"},{title:"不同类型的插件",id:"-"}],related:[]},body:'<p>插件向第三方开发者提供了 webpack 引擎中完整的能力。使用阶段式的构建回调，开发者可以引入它们自己的行为到 webpack 构建流程中。创建插件比创建 loader 更加高级，因为你将需要理解一些 webpack 底层的内部特性来做相应的勾子，所以做好阅读一些源码的准备！</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">创建插件</span><a class="icon-link" href="#-"></a></h2>\n<p><code>webpack</code>插件的组成：</p>\n<ul>\n<li>一个JavaScript命名函数。</li>\n<li>在它的原型上定义一个<code>apply</code>方法。</li>\n<li>指定绑定自身的<a href="/api/compiler/#event-hooks">事件钩子</a>。</li>\n<li>处理webpack内部实例的特定数据。</li>\n<li>功能完成后调用webpack提供的回调。</li>\n</ul>\n<pre><code class="lang-javascript"><span class="token comment">// 命名函数</span>\n<span class="token keyword">function</span> <span class="token function">MyExampleWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在它的 prototype 上定义一个 `apply` 方法。</span>\nMyExampleWebpackPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 指定挂载的webpack事件钩子。</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'webpacksEventHook\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation <span class="token comment">/* 处理webpack内部实例的特定数据。*/</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"This is an example plugin!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 功能完成后调用webpack提供的回调。</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-compiler-compilation-" id="-compiler-compilation-"></a><span class="text">编译器(Compiler)和编译(Compilation)</span><a class="icon-link" href="#-compiler-compilation-"></a></h2>\n<p>在插件开发中最重要的两个资源就是 <code>compiler</code> 和 <code>compilation</code> 对象。理解它们的角色是扩展 webpack 引擎重要的第一步。</p>\n<ul>\n<li><p><code>compiler</code> 对象代表了完整的 webpack 环境配置。这个对象在启动 webpack 时被一次性建立，并在所有可操作的设置中被配置，包括原始配置，loader 和插件。当在 webpack 环境中应用一个插件时，插件将收到一个编译器对象的引用。可以使用它来访问 webpack 的主环境。</p>\n</li>\n<li><p><code>compilation</code> 对象代表了一次单一的版本构建和生成资源。当运行 webpack 开发环境中间件时，每当检测到一个文件变化，一次新的编译将被创建，从而生成一组新的编译资源。一个编译对象表现了当前的模块资源、编译生成资源、变化的文件、以及被跟踪依赖的状态信息。编译对象也提供了很多关键点回调供插件做自定义处理时选择使用。</p>\n</li>\n</ul>\n<p>这两个成员是任何 webpack 插件不可或缺的部分（特别是 <code>compilation</code>），如果开发者阅读它们的源码并进行熟悉，将获益匪浅：</p>\n<ul>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/Compiler.js">Compiler Source</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/Compilation.js">Compilation Source</a></li>\n</ul>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">基本插件架构</span><a class="icon-link" href="#-"></a></h2>\n<p>插件都是被实例化的带有 <code>apply</code> 原型方法的对象。这个 <code>apply</code> 方法在安装插件时将被 webpack 编译器调用一次。<code>apply</code> 方法提供了一个对应的编译器对象的引用，从而可以访问到相关的编译器回调。一个简单的插件结构如下：</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">HelloWorldPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用配置（options）设置插件实例</span>\n<span class="token punctuation">}</span>\n\nHelloWorldPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'done\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hello World!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> HelloWorldPlugin<span class="token punctuation">;</span>\n</code></pre>\n<p>然后要安装这个插件，只需要在你的 webpack 配置的 <code>plugin</code> 数组中加入一个实例：</p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> HelloWorldPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'hello-world\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ... 这里是其他配置 ...</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HelloWorldPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>options<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">访问编译</span><a class="icon-link" href="#-"></a></h2>\n<p>使用编译器对象时，你可以绑定提供了编译对象引用的回调拿到每次新的编译对象。这些编译对象提供了构建流程中很多步骤的回调来做勾子。</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">HelloCompilationPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nHelloCompilationPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// 设置回调来访问编译对象：</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"compilation"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// 现在设置回调来访问编译中的步骤：</span>\n    compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"optimize"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Assets are being optimized."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> HelloCompilationPlugin<span class="token punctuation">;</span>\n</code></pre>\n<p>关于 <code>compiler</code> 和 <code>compilation</code> 的更多可用的回调和信息，以及其它重要的对象，请参考 <a href="/api/plugins/">插件</a> 文档。</p>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">异步编译插件</span><a class="icon-link" href="#-"></a></h2>\n<p>有一些编译插件中的步骤是异步的，这样要传递一个回调函数，并且在插件运行结束时回调<em>必须</em>被调用。</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">HelloAsyncPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nHelloAsyncPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"emit"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// 做一些异步处理……</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Done with async work..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> HelloAsyncPlugin<span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">示例</span><a class="icon-link" href="#-"></a></h2>\n<p>一旦能我们深入理解 webpack 编译器和每个独立的编译，我们依赖 webpack 引擎将有无限多的事可以做。我们可以重新格式化已有的文件，创建衍生的文件，或者制作全新的生成文件。</p>\n<p>让我们来写一个简单的示例插件，生成一个叫做 <code>filelist.md</code> 的新文件；文件内容是所有构建生成的文件的列表。这个插件大概像下面这样：</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">FileListPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nFileListPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'emit\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 创建一个头部字符串：</span>\n    <span class="token keyword">var</span> filelist <span class="token operator">=</span> <span class="token string">\'In this build:\\n\\n\'</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 检查所有编译好的资源文件：</span>\n    <span class="token comment">// 为每个文件名新增一行</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> filename <span class="token keyword">in</span> compilation<span class="token punctuation">.</span>assets<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      filelist <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">\'- \'</span><span class="token operator">+</span> filename <span class="token operator">+</span><span class="token string">\'\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 把它作为一个新的文件资源插入到 webpack 构建中：</span>\n    compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span><span class="token string">\'filelist.md\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      source<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> filelist<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      size<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> filelist<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> FileListPlugin<span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#-" id="-"></a><span class="text">不同类型的插件</span><a class="icon-link" href="#-"></a></h2>\n<p>webpack插件可以按照它所注册的事件分成不同的类型。每一个事件钩子决定了如何使用注册的插件。</p>\n<ul>\n<li><strong>同步</strong> The Tapable instance applies plugins using</li>\n</ul>\n<p><code>applyPlugins(name: string, args: any...)</code></p>\n<p><code>applyPluginsBailResult(name: string, args: any...)</code></p>\n<p>This means that each of the plugin callbacks will be invoked one after the other with the specific <code>args</code>.\nThis is the simplest format for a plugin. Many useful events like <code>&quot;compile&quot;</code>, <code>&quot;this-compilation&quot;</code> expect plugins to have synchronous execution.</p>\n<ul>\n<li><strong>waterfall</strong> Plugins applied using</li>\n</ul>\n<p><code>applyPluginsWaterfall(name: string, init: any, args: any...)</code></p>\n<p>Here each of the plugins are called one after the other with the args from the return value of the previous plugin. The plugin must take the order of its execution into account.\nIt must accept arguments from the previous plugin that was executed. The value for the first plugin is <code>init</code>. This pattern is used in the Tapable instances which are related to the <code>webpack</code> templates like <code>ModuleTemplate</code>, <code>ChunkTemplate</code> etc.</p>\n<ul>\n<li><strong>asynchronous</strong> When all the plugins are applied asynchronously using</li>\n</ul>\n<p><code>applyPluginsAsync(name: string, args: any..., callback: (err?: Error) -&gt; void)</code></p>\n<p>The plugin handler functions are called with all args and a callback function with the signature <code>(err?: Error) -&gt; void</code>. The handler functions are called in order of registration. <code>callback`` is called after all the handlers are called.\nThis is also a commonly used pattern for events like</code>&quot;emit&quot;<code>,</code>&quot;run&quot;`.</p>\n<ul>\n<li><strong>async waterfall</strong> The plugins will be applied asynchronously in the waterfall manner.</li>\n</ul>\n<p><code>applyPluginsAsyncWaterfall(name: string, init: any, callback: (err: Error, result: any) -&gt; void)</code></p>\n<p>The plugin handler functions are called with the current value and a callback function with the signature <code>(err: Error, nextValue: any) -&gt; void.</code> When called <code>nextValue</code> is the current value for the next handler. The current value for the first handler is <code>init</code>. After all handlers are applied, callback is called with the last value. If any handler passes a value for <code>err</code>, the callback is called with this error and no more handlers are called.\nThis plugin pattern is expected for events like <code>&quot;before-resolve&quot;</code> and <code>&quot;after-resolve&quot;</code>.</p>\n<ul>\n<li><strong>async series</strong> It is the same as asynchronous but if any of the plugins registered fails, then no more plugins are called.</li>\n</ul>\n<p><code>applyPluginsAsyncSeries(name: string, args: any..., callback: (err: Error, result: any) -&gt; void)</code></p>\n<p>-<strong>parallel</strong> -</p>\n<p><code>applyPluginsParallel(name: string, args: any..., callback: (err?: Error) -&gt; void)</code></p>\n<p><code>applyPluginsParallelBailResult(name: string, args: any..., callback: (err: Error, result: any) -&gt; void)</code></p>\n<hr>\n<blockquote>\n<p>原文：<a href="https://webpack.js.org/development/how-to-write-a-plugin/">https://webpack.js.org/development/how-to-write-a-plugin/</a></p>\n</blockquote>\n',title:"编写一个插件"},title:"编写一个插件",url:"/contribute/writing-a-plugin/"},{file:{attributes:{title:"Plugin Patterns",sort:5,group:"-",anchors:[{title:"Exploring assets, chunks, modules, and dependencies",id:"exploring-assets-chunks-modules-and-dependencies"},{title:"Monitoring the watch graph",id:"monitoring-the-watch-graph"},{title:"Changed chunks",id:"changed-chunks"}],contributors:[],related:[]},body:'<p>Plugins grant unlimited opportunity to perform customizations within the webpack build system. This allows you to create custom asset types, perform unique build modifications, or even enhance the webpack runtime while using middleware. The following are some features of webpack that become useful while writing plugins.</p>\n<h2 class="header"><a class="anchor" href="#exploring-assets-chunks-modules-and-dependencies" id="exploring-assets-chunks-modules-and-dependencies"></a><span class="text">Exploring assets, chunks, modules, and dependencies</span><a class="icon-link" href="#exploring-assets-chunks-modules-and-dependencies"></a></h2>\n<p>After a compilation is sealed, all structures within the compilation may be traversed.</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nMyPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'emit\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// Explore each chunk (build output):</span>\n    compilation<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Explore each module within the chunk (built inputs):</span>\n      chunk<span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Explore each source file path that was included into the module:</span>\n        module<span class="token punctuation">.</span>fileDependencies<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// we\'ve learned a lot about the source structure now...</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// Explore each asset filename generated by the chunk:</span>\n      chunk<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Get the asset source for each file generated by the chunk:</span>\n        <span class="token keyword">var</span> source <span class="token operator">=</span> compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span>\n</code></pre>\n<ul>\n<li><code>compilation.modules</code>: An array of modules (built inputs) in the compilation. Each module manages the build of a raw file from your source library.</li>\n<li><code>module.fileDependencies</code>: An array of source file paths included into a module. This includes the source JavaScript file itself (ex: <code>index.js</code>), and all dependency asset files (stylesheets, images, etc) that it has required. Reviewing dependencies is useful for seeing what source files belong to a module.</li>\n<li><code>compilation.chunks</code>: An array of chunks (build outputs) in the compilation. Each chunk manages the composition of a final rendered assets.</li>\n<li><code>chunk.modules</code>: An array of modules that are included into a chunk. By extension, you may look through each module&#39;s dependencies to see what raw source files fed into a chunk.</li>\n<li><code>chunk.files</code>: An array of output filenames generated by the chunk. You may access these asset sources from the <code>compilation.assets</code> table.</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#monitoring-the-watch-graph" id="monitoring-the-watch-graph"></a><span class="text">Monitoring the watch graph</span><a class="icon-link" href="#monitoring-the-watch-graph"></a></h3>\n<p>While running webpack middleware, each compilation includes a <code>fileDependencies</code> array (what files are being watched) and a <code>fileTimestamps</code> hash that maps watched file paths to a timestamp. These are extremely useful for detecting what files have changed within the compilation:</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>prevTimestamps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nMyPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'emit\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">var</span> changedFiles <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>compilation<span class="token punctuation">.</span>fileTimestamps<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>watchfile<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>prevTimestamps<span class="token punctuation">[</span>watchfile<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startTime<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>compilation<span class="token punctuation">.</span>fileTimestamps<span class="token punctuation">[</span>watchfile<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>prevTimestamps <span class="token operator">=</span> compilation<span class="token punctuation">.</span>fileTimestamps<span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span>\n</code></pre>\n<p>You may also feed new file paths into the watch graph to receive compilation triggers when those files change. Simply push valid filepaths into the <code>compilation.fileDependencies</code> array to add them to the watch. Note: the <code>fileDependencies</code> array is rebuilt in each compilation, so your plugin must push its own watched dependencies into each compilation to keep them under watch.</p>\n<h2 class="header"><a class="anchor" href="#changed-chunks" id="changed-chunks"></a><span class="text">Changed chunks</span><a class="icon-link" href="#changed-chunks"></a></h2>\n<p>Similar to the watch graph, it&#39;s fairly simple to monitor changed chunks (or modules, for that matter) within a compilation by tracking their hashes.</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>chunkVersions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nMyPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'emit\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">var</span> changedChunks <span class="token operator">=</span> compilation<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> oldVersion <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chunkVersions<span class="token punctuation">[</span>chunk<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>chunkVersions<span class="token punctuation">[</span>chunk<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> chunk<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> chunk<span class="token punctuation">.</span>hash <span class="token operator">!==</span> oldVersion<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span>\n</code></pre>\n',title:"Plugin Patterns"},title:"Plugin Patterns",url:"/contribute/plugin-patterns/"},{file:{attributes:{title:"Release Process",sort:6,contributors:["d3viant0ne","sokra"],group:"-",anchors:[{title:"Pull Requests",id:"pull-requests"},{title:"Releasing",id:"releasing"}],related:[]},body:'<p>The release process for deploying webpack is actually quite painless. Read through the following steps, so you have a clear understanding of how it&#39;s done.</p>\n<h2 class="header"><a class="anchor" href="#pull-requests" id="pull-requests"></a><span class="text">Pull Requests</span><a class="icon-link" href="#pull-requests"></a></h2>\n<p>When merging pull requests into the <code>master</code> branch, select the <em>Create Merge Commit</em> option.</p>\n<h2 class="header"><a class="anchor" href="#releasing" id="releasing"></a><span class="text">Releasing</span><a class="icon-link" href="#releasing"></a></h2>\n<pre><code class="lang-sh">npm version patch <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push --follow-tags <span class="token operator">&amp;&amp;</span> npm publish\nnpm version minor <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push --follow-tags <span class="token operator">&amp;&amp;</span> npm publish\nnpm version major <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push --follow-tags <span class="token operator">&amp;&amp;</span> npm publish\n</code></pre>\n<p><em>This will increment the package version, commits the changes, cuts a <strong>local tag</strong>, push to github &amp; publish the npm package.</em></p>\n<p>After that go to the github <a href="https://github.com/webpack/webpack/releases">releases page</a> and write a Changelog for the new tag.</p>\n',title:"Release Process"},title:"Release Process",url:"/contribute/release-process/"},{file:{attributes:{title:"调试",sort:7,contributors:["skipjack","tbroadley"],related:[{title:"Learn and Debug webpack with Chrome DevTools!",url:"https://medium.com/webpack/webpack-bits-learn-and-debug-webpack-with-chrome-dev-tools-da1c5b19554b"},{title:"Debugging Guide | Node",url:"https://nodejs.org/en/docs/guides/debugging-getting-started/"},{title:"Debugging Node.js with Chrome DevTools",url:"https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27"}],group:"-",anchors:[{title:"Stats",id:"stats"},{title:"DevTools",id:"devtools"}]},body:'<p>When contributing to the core repo, writing a loader/plugin, or even just working on complex project, debugging tools can be central to your workflow. Whether the problem is slow performance on a large project or an unhelpful traceback, the following utilities can make figuring it out less painful.</p>\n<ul>\n<li>The <a href="/api/stats"><code>stats</code> data</a> made available through <a href="/api/node#stats-object">Node</a> and the <a href="/api/cli#common-options">CLI</a>.</li>\n<li>Chrome <strong>DevTools</strong> via <code>node-nightly</code> and the latest Node.js versions.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#stats" id="stats"></a><span class="text">Stats</span><a class="icon-link" href="#stats"></a></h2>\n<p>Whether you want to sift through <a href="/api/stats">this data</a> manually or use a tool to process it, the <code>stats</code> data can be extremely useful when debugging build issues. We won&#39;t go in depth here as there&#39;s an <a href="/api/stats">entire page</a> dedicated to its contents, but know that you can use it to find the following information:</p>\n<ul>\n<li>The contents of every module.</li>\n<li>The modules contained within every chunk.</li>\n<li>Per module compilation and resolving stats.</li>\n<li>Build errors and warnings.</li>\n<li>The relationships between modules.</li>\n<li>And much more...</li>\n</ul>\n<p>On top of that, the official <a href="https://github.com/webpack/analyse">analyze tool</a> and <a href="/guides/code-splitting#bundle-analysis">various others</a> will accept this data and visualize it in various ways.</p>\n<h2 class="header"><a class="anchor" href="#devtools" id="devtools"></a><span class="text">DevTools</span><a class="icon-link" href="#devtools"></a></h2>\n<p>While <a href="https://nodejs.org/api/console.html"><code>console</code></a> statements may work well in simpler scenarios, sometimes a more robust solution is needed. As most front-end developers already know, Chrome DevTools are a life saver when debugging web applications, <em>but they don’t have to stop there</em>. As of Node v6.3.0+, developers can use the built-in <code>--inspect</code> flag to debug a node program in DevTools.</p>\n<p>This gives you the power to easily create breakpoints, debug memory usage, expose and examine objects in the console, and much more. In this short demo, we&#39;ll utilize the <a href="https://github.com/hemanth/node-nightly"><code>node-nightly</code></a> package which provides access to the latest and greatest inspecting capabilities.</p>\n<blockquote class="warning"><div class="tip-content"> The <code>--inspect</code> interface has been available since v6.3.0 so feel to try it out with your local version, but be warned that certain features and flags may differ from the ones in this demo. </div></blockquote><p>Let&#39;s start by installing it globally:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --global node-nightly\n</code></pre>\n<p>Now, we&#39;ll need to run it once to finish the installation:</p>\n<pre><code class="lang-bash">node-nightly\n</code></pre>\n<p>Now, we can simply use <code>node-nightly</code> along with the <code>--inspect</code> flag to start our build in any webpack-based project. Note that we cannot run NPM <code>scripts</code>, e.g. <code>npm run build</code>, so we&#39;ll have specify the full <code>node_modules</code> path:</p>\n<pre><code class="lang-bash">node-nightly --inspect ./node_modules/webpack/bin/webpack.js\n</code></pre>\n<p>Which should output something like:</p>\n<pre><code class="lang-bash">Debugger listening on ws://127.0.0.1:9229/c624201a-250f-416e-a018-300bbec7be2c\nFor <span class="token function">help</span> see https://nodejs.org/en/docs/inspector\n</code></pre>\n<p>Now jump to <code>chrome://inspect</code> in the browser and you should see any active scripts you&#39;ve inspected under the <em>Remote Target</em> header. Click the &quot;inspect&quot; link under each script to open a dedicated debugger or the <em>Open dedicated DevTools for Node</em> link for a session that will autoconnect. You can also check out the <a href="https://chrome.google.com/webstore/detail/nodejs-v8-inspector-manag/gnhhdgbaldcilmgcpfddgdbkhjohddkj">NiM extension</a>, a handy Chrome plugin that will automatically open a DevTools tab every time you <code>--inspect</code> a script.</p>\n<p>We recommend using the <code>--inspect-brk</code> flag which will break on the first statement of the script allowing you to go through the source to set breakpoints and start/stop the build as you please. Also, don&#39;t forget that you can still pass arguments to the script. For example, if you have multiple configuration files you could pass <code>--config webpack.prod.js</code> to specify the configuration you&#39;d like to debug.</p>\n',title:"调试"},title:"调试",url:"/contribute/debugging/"}]},{url:"vote",pages:[]},{url:"organization",pages:[]},{url:"starter-kits",pages:[]},{url:"api/plugins",pages:[]},{url:"development",pages:[]}]}),document.getElementById("src/components/SidebarMobile/SidebarMobile.jsx")),e.render(t.createElement(l,{pages:[{url:"/concepts/",group:"-",title:"概念",anchors:[{title:"入口(entry)",id:"-entry-"},{title:"出口(output)",id:"-output-"},{title:"loader",id:"loader"},{title:"插件(plugins)",id:"-plugins-"}]},{url:"/concepts/entry-points/",title:"入口起点(Entry Points)",group:"-",anchors:[{title:"单个入口（简写）语法",id:"-"},{title:"对象语法",id:"-"},{title:"常见场景",id:"-"},{title:"分离 应用程序(app) 和 第三方库(vendor) 入口",id:"-app-vendor-"},{title:"多页面应用程序",id:"-"}]},{url:"/concepts/output/",title:"输出(Output)",group:"-",anchors:[{title:"用法(Usage)",id:"-usage-"},{title:"多个入口起点",id:"-"},{title:"高级进阶",id:"-"}]},{url:"/concepts/loaders/",title:"Loader",group:"-",anchors:[{title:"示例",id:"-"},{title:"使用 Loader",id:"-loader"},{title:"配置[Configuration]",id:"-configuration-"},{title:"内联",id:"-"},{title:"CLI",id:"cli"},{title:"Loader 特性",id:"loader-"},{title:"解析 Loader",id:"-loader"}]},{url:"/concepts/plugins/",title:"插件(Plugins)",group:"-",anchors:[{title:"剖析",id:"-"},{title:"用法",id:"-"},{title:"配置",id:"-"},{title:"Node API",id:"node-api"}]},{url:"/concepts/configuration/",title:"配置(Configuration)",group:"-",anchors:[{title:"最简单的配置",id:"-"},{title:"多个 Target",id:"-target"},{title:"使用其他配置语言",id:"-"}]},{url:"/concepts/modules/",title:"模块(Modules)",group:"-",anchors:[{title:"什么是 webpack 模块",id:"-webpack-"},{title:"支持的模块类型",id:"-"}]},{url:"/concepts/module-resolution/",title:"模块解析(Module Resolution)",group:"-",anchors:[{title:"webpack 中的解析规则",id:"webpack-"},{title:"绝对路径",id:"-"},{title:"相对路径",id:"-"},{title:"模块路径",id:"-"},{title:"解析 Loader(Resolving Loaders)",id:"-loader-resolving-loaders-"},{title:"缓存",id:"-"}]},{url:"/concepts/dependency-graph/",title:"依赖图(Dependency Graph)",group:"-",anchors:[]},{url:"/concepts/targets/",title:"构建目标(Targets)",group:"-",anchors:[{title:"用法",id:"-"},{title:"多个 Target",id:"-target"},{title:"资源",id:"-"}]},{url:"/concepts/manifest/",title:"Manifest",group:"-",anchors:[{title:"Runtime",id:"runtime"},{title:"Manifest",id:"manifest"},{title:"问题",id:"-"}]},{url:"/concepts/hot-module-replacement/",title:"模块热替换(Hot Module Replacement)",group:"-",anchors:[{title:"这一切是如何运行的？",id:"-"},{title:"在应用程序中",id:"-"},{title:"在编译器中",id:"-"},{title:"在模块中",id:"-"},{title:"在 HMR Runtime 中",id:"-hmr-runtime-"},{title:"入门",id:"-"}]}],currentPage:"/concepts/manifest/"}),document.getElementById("src/components/Sidebar/Sidebar.jsx")),e.render(t.createElement(i,{}),document.getElementById("src/components/Gitter/Gitter.jsx"))}])});